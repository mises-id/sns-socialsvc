// Code generated by truss. DO NOT EDIT.
// Rerunning truss will overwrite this file.
// Version: 5f7d5bf015
// Version Date: 2021-11-26T09:27:01Z

// Package grpc provides a gRPC client for the Social service.
package grpc

import (
	"context"
	"github.com/pkg/errors"
	"google.golang.org/grpc"
	"google.golang.org/grpc/metadata"

	"github.com/go-kit/kit/endpoint"
	grpctransport "github.com/go-kit/kit/transport/grpc"

	// This Service
	pb "github.com/mises-id/sns-socialsvc/proto"
	"github.com/mises-id/sns-socialsvc/svc"
)

// New returns an service backed by a gRPC client connection. It is the
// responsibility of the caller to dial, and later close, the connection.
func New(conn *grpc.ClientConn, options ...ClientOption) (pb.SocialServer, error) {
	var cc clientConfig

	for _, f := range options {
		err := f(&cc)
		if err != nil {
			return nil, errors.Wrap(err, "cannot apply option")
		}
	}

	clientOptions := []grpctransport.ClientOption{
		grpctransport.ClientBefore(
			contextValuesToGRPCMetadata(cc.headers)),
	}
	var signinEndpoint endpoint.Endpoint
	{
		signinEndpoint = grpctransport.NewClient(
			conn,
			"socialsvc.Social",
			"SignIn",
			EncodeGRPCSignInRequest,
			DecodeGRPCSignInResponse,
			pb.SignInResponse{},
			clientOptions...,
		).Endpoint()
	}

	var finduserEndpoint endpoint.Endpoint
	{
		finduserEndpoint = grpctransport.NewClient(
			conn,
			"socialsvc.Social",
			"FindUser",
			EncodeGRPCFindUserRequest,
			DecodeGRPCFindUserResponse,
			pb.FindUserResponse{},
			clientOptions...,
		).Endpoint()
	}

	var updateuserprofileEndpoint endpoint.Endpoint
	{
		updateuserprofileEndpoint = grpctransport.NewClient(
			conn,
			"socialsvc.Social",
			"UpdateUserProfile",
			EncodeGRPCUpdateUserProfileRequest,
			DecodeGRPCUpdateUserProfileResponse,
			pb.UpdateUserResponse{},
			clientOptions...,
		).Endpoint()
	}

	var updateuseravatarEndpoint endpoint.Endpoint
	{
		updateuseravatarEndpoint = grpctransport.NewClient(
			conn,
			"socialsvc.Social",
			"UpdateUserAvatar",
			EncodeGRPCUpdateUserAvatarRequest,
			DecodeGRPCUpdateUserAvatarResponse,
			pb.UpdateUserResponse{},
			clientOptions...,
		).Endpoint()
	}

	var updateusernameEndpoint endpoint.Endpoint
	{
		updateusernameEndpoint = grpctransport.NewClient(
			conn,
			"socialsvc.Social",
			"UpdateUserName",
			EncodeGRPCUpdateUserNameRequest,
			DecodeGRPCUpdateUserNameResponse,
			pb.UpdateUserResponse{},
			clientOptions...,
		).Endpoint()
	}

	var createstatusEndpoint endpoint.Endpoint
	{
		createstatusEndpoint = grpctransport.NewClient(
			conn,
			"socialsvc.Social",
			"CreateStatus",
			EncodeGRPCCreateStatusRequest,
			DecodeGRPCCreateStatusResponse,
			pb.CreateStatusResponse{},
			clientOptions...,
		).Endpoint()
	}

	var updatestatusEndpoint endpoint.Endpoint
	{
		updatestatusEndpoint = grpctransport.NewClient(
			conn,
			"socialsvc.Social",
			"UpdateStatus",
			EncodeGRPCUpdateStatusRequest,
			DecodeGRPCUpdateStatusResponse,
			pb.UpdateStatusResponse{},
			clientOptions...,
		).Endpoint()
	}

	var deletestatusEndpoint endpoint.Endpoint
	{
		deletestatusEndpoint = grpctransport.NewClient(
			conn,
			"socialsvc.Social",
			"DeleteStatus",
			EncodeGRPCDeleteStatusRequest,
			DecodeGRPCDeleteStatusResponse,
			pb.SimpleResponse{},
			clientOptions...,
		).Endpoint()
	}

	var likestatusEndpoint endpoint.Endpoint
	{
		likestatusEndpoint = grpctransport.NewClient(
			conn,
			"socialsvc.Social",
			"LikeStatus",
			EncodeGRPCLikeStatusRequest,
			DecodeGRPCLikeStatusResponse,
			pb.SimpleResponse{},
			clientOptions...,
		).Endpoint()
	}

	var unlikestatusEndpoint endpoint.Endpoint
	{
		unlikestatusEndpoint = grpctransport.NewClient(
			conn,
			"socialsvc.Social",
			"UnLikeStatus",
			EncodeGRPCUnLikeStatusRequest,
			DecodeGRPCUnLikeStatusResponse,
			pb.SimpleResponse{},
			clientOptions...,
		).Endpoint()
	}

	var listlikestatusEndpoint endpoint.Endpoint
	{
		listlikestatusEndpoint = grpctransport.NewClient(
			conn,
			"socialsvc.Social",
			"ListLikeStatus",
			EncodeGRPCListLikeStatusRequest,
			DecodeGRPCListLikeStatusResponse,
			pb.ListLikeResponse{},
			clientOptions...,
		).Endpoint()
	}

	var getstatusEndpoint endpoint.Endpoint
	{
		getstatusEndpoint = grpctransport.NewClient(
			conn,
			"socialsvc.Social",
			"GetStatus",
			EncodeGRPCGetStatusRequest,
			DecodeGRPCGetStatusResponse,
			pb.GetStatusResponse{},
			clientOptions...,
		).Endpoint()
	}

	var liststatusEndpoint endpoint.Endpoint
	{
		liststatusEndpoint = grpctransport.NewClient(
			conn,
			"socialsvc.Social",
			"ListStatus",
			EncodeGRPCListStatusRequest,
			DecodeGRPCListStatusResponse,
			pb.ListStatusResponse{},
			clientOptions...,
		).Endpoint()
	}

	var newliststatusEndpoint endpoint.Endpoint
	{
		newliststatusEndpoint = grpctransport.NewClient(
			conn,
			"socialsvc.Social",
			"NewListStatus",
			EncodeGRPCNewListStatusRequest,
			DecodeGRPCNewListStatusResponse,
			pb.NewListStatusResponse{},
			clientOptions...,
		).Endpoint()
	}

	var listrecommendedEndpoint endpoint.Endpoint
	{
		listrecommendedEndpoint = grpctransport.NewClient(
			conn,
			"socialsvc.Social",
			"ListRecommended",
			EncodeGRPCListRecommendedRequest,
			DecodeGRPCListRecommendedResponse,
			pb.ListStatusResponse{},
			clientOptions...,
		).Endpoint()
	}

	var listusertimelineEndpoint endpoint.Endpoint
	{
		listusertimelineEndpoint = grpctransport.NewClient(
			conn,
			"socialsvc.Social",
			"ListUserTimeline",
			EncodeGRPCListUserTimelineRequest,
			DecodeGRPCListUserTimelineResponse,
			pb.ListStatusResponse{},
			clientOptions...,
		).Endpoint()
	}

	var latestfollowingEndpoint endpoint.Endpoint
	{
		latestfollowingEndpoint = grpctransport.NewClient(
			conn,
			"socialsvc.Social",
			"LatestFollowing",
			EncodeGRPCLatestFollowingRequest,
			DecodeGRPCLatestFollowingResponse,
			pb.LatestFollowingResponse{},
			clientOptions...,
		).Endpoint()
	}

	var listrelationshipEndpoint endpoint.Endpoint
	{
		listrelationshipEndpoint = grpctransport.NewClient(
			conn,
			"socialsvc.Social",
			"ListRelationship",
			EncodeGRPCListRelationshipRequest,
			DecodeGRPCListRelationshipResponse,
			pb.ListRelationshipResponse{},
			clientOptions...,
		).Endpoint()
	}

	var followEndpoint endpoint.Endpoint
	{
		followEndpoint = grpctransport.NewClient(
			conn,
			"socialsvc.Social",
			"Follow",
			EncodeGRPCFollowRequest,
			DecodeGRPCFollowResponse,
			pb.SimpleResponse{},
			clientOptions...,
		).Endpoint()
	}

	var unfollowEndpoint endpoint.Endpoint
	{
		unfollowEndpoint = grpctransport.NewClient(
			conn,
			"socialsvc.Social",
			"UnFollow",
			EncodeGRPCUnFollowRequest,
			DecodeGRPCUnFollowResponse,
			pb.SimpleResponse{},
			clientOptions...,
		).Endpoint()
	}

	var listmessageEndpoint endpoint.Endpoint
	{
		listmessageEndpoint = grpctransport.NewClient(
			conn,
			"socialsvc.Social",
			"ListMessage",
			EncodeGRPCListMessageRequest,
			DecodeGRPCListMessageResponse,
			pb.ListMessageResponse{},
			clientOptions...,
		).Endpoint()
	}

	var readmessageEndpoint endpoint.Endpoint
	{
		readmessageEndpoint = grpctransport.NewClient(
			conn,
			"socialsvc.Social",
			"ReadMessage",
			EncodeGRPCReadMessageRequest,
			DecodeGRPCReadMessageResponse,
			pb.SimpleResponse{},
			clientOptions...,
		).Endpoint()
	}

	var getmessagesummaryEndpoint endpoint.Endpoint
	{
		getmessagesummaryEndpoint = grpctransport.NewClient(
			conn,
			"socialsvc.Social",
			"GetMessageSummary",
			EncodeGRPCGetMessageSummaryRequest,
			DecodeGRPCGetMessageSummaryResponse,
			pb.MessageSummaryResponse{},
			clientOptions...,
		).Endpoint()
	}

	var listcommentEndpoint endpoint.Endpoint
	{
		listcommentEndpoint = grpctransport.NewClient(
			conn,
			"socialsvc.Social",
			"ListComment",
			EncodeGRPCListCommentRequest,
			DecodeGRPCListCommentResponse,
			pb.ListCommentResponse{},
			clientOptions...,
		).Endpoint()
	}

	var getcommentEndpoint endpoint.Endpoint
	{
		getcommentEndpoint = grpctransport.NewClient(
			conn,
			"socialsvc.Social",
			"GetComment",
			EncodeGRPCGetCommentRequest,
			DecodeGRPCGetCommentResponse,
			pb.GetCommentResponse{},
			clientOptions...,
		).Endpoint()
	}

	var newrecommendstatusEndpoint endpoint.Endpoint
	{
		newrecommendstatusEndpoint = grpctransport.NewClient(
			conn,
			"socialsvc.Social",
			"NewRecommendStatus",
			EncodeGRPCNewRecommendStatusRequest,
			DecodeGRPCNewRecommendStatusResponse,
			pb.NewRecommendStatusResponse{},
			clientOptions...,
		).Endpoint()
	}

	var createcommentEndpoint endpoint.Endpoint
	{
		createcommentEndpoint = grpctransport.NewClient(
			conn,
			"socialsvc.Social",
			"CreateComment",
			EncodeGRPCCreateCommentRequest,
			DecodeGRPCCreateCommentResponse,
			pb.CreateCommentResponse{},
			clientOptions...,
		).Endpoint()
	}

	var deletecommentEndpoint endpoint.Endpoint
	{
		deletecommentEndpoint = grpctransport.NewClient(
			conn,
			"socialsvc.Social",
			"DeleteComment",
			EncodeGRPCDeleteCommentRequest,
			DecodeGRPCDeleteCommentResponse,
			pb.SimpleResponse{},
			clientOptions...,
		).Endpoint()
	}

	var likecommentEndpoint endpoint.Endpoint
	{
		likecommentEndpoint = grpctransport.NewClient(
			conn,
			"socialsvc.Social",
			"LikeComment",
			EncodeGRPCLikeCommentRequest,
			DecodeGRPCLikeCommentResponse,
			pb.SimpleResponse{},
			clientOptions...,
		).Endpoint()
	}

	var unlikecommentEndpoint endpoint.Endpoint
	{
		unlikecommentEndpoint = grpctransport.NewClient(
			conn,
			"socialsvc.Social",
			"UnlikeComment",
			EncodeGRPCUnlikeCommentRequest,
			DecodeGRPCUnlikeCommentResponse,
			pb.SimpleResponse{},
			clientOptions...,
		).Endpoint()
	}

	var listblacklistEndpoint endpoint.Endpoint
	{
		listblacklistEndpoint = grpctransport.NewClient(
			conn,
			"socialsvc.Social",
			"ListBlacklist",
			EncodeGRPCListBlacklistRequest,
			DecodeGRPCListBlacklistResponse,
			pb.ListBlacklistResponse{},
			clientOptions...,
		).Endpoint()
	}

	var createblacklistEndpoint endpoint.Endpoint
	{
		createblacklistEndpoint = grpctransport.NewClient(
			conn,
			"socialsvc.Social",
			"CreateBlacklist",
			EncodeGRPCCreateBlacklistRequest,
			DecodeGRPCCreateBlacklistResponse,
			pb.SimpleResponse{},
			clientOptions...,
		).Endpoint()
	}

	var deleteblacklistEndpoint endpoint.Endpoint
	{
		deleteblacklistEndpoint = grpctransport.NewClient(
			conn,
			"socialsvc.Social",
			"DeleteBlacklist",
			EncodeGRPCDeleteBlacklistRequest,
			DecodeGRPCDeleteBlacklistResponse,
			pb.SimpleResponse{},
			clientOptions...,
		).Endpoint()
	}

	var sharetweeturlEndpoint endpoint.Endpoint
	{
		sharetweeturlEndpoint = grpctransport.NewClient(
			conn,
			"socialsvc.Social",
			"ShareTweetUrl",
			EncodeGRPCShareTweetUrlRequest,
			DecodeGRPCShareTweetUrlResponse,
			pb.ShareTweetUrlResponse{},
			clientOptions...,
		).Endpoint()
	}

	var usertwitterauthEndpoint endpoint.Endpoint
	{
		usertwitterauthEndpoint = grpctransport.NewClient(
			conn,
			"socialsvc.Social",
			"UserTwitterAuth",
			EncodeGRPCUserTwitterAuthRequest,
			DecodeGRPCUserTwitterAuthResponse,
			pb.UserTwitterAuthResponse{},
			clientOptions...,
		).Endpoint()
	}

	var usertwitterairdropEndpoint endpoint.Endpoint
	{
		usertwitterairdropEndpoint = grpctransport.NewClient(
			conn,
			"socialsvc.Social",
			"UserTwitterAirdrop",
			EncodeGRPCUserTwitterAirdropRequest,
			DecodeGRPCUserTwitterAirdropResponse,
			pb.UserTwitterAirdropResponse{},
			clientOptions...,
		).Endpoint()
	}

	return svc.Endpoints{
		SignInEndpoint:             signinEndpoint,
		FindUserEndpoint:           finduserEndpoint,
		UpdateUserProfileEndpoint:  updateuserprofileEndpoint,
		UpdateUserAvatarEndpoint:   updateuseravatarEndpoint,
		UpdateUserNameEndpoint:     updateusernameEndpoint,
		CreateStatusEndpoint:       createstatusEndpoint,
		UpdateStatusEndpoint:       updatestatusEndpoint,
		DeleteStatusEndpoint:       deletestatusEndpoint,
		LikeStatusEndpoint:         likestatusEndpoint,
		UnLikeStatusEndpoint:       unlikestatusEndpoint,
		ListLikeStatusEndpoint:     listlikestatusEndpoint,
		GetStatusEndpoint:          getstatusEndpoint,
		ListStatusEndpoint:         liststatusEndpoint,
		NewListStatusEndpoint:      newliststatusEndpoint,
		ListRecommendedEndpoint:    listrecommendedEndpoint,
		ListUserTimelineEndpoint:   listusertimelineEndpoint,
		LatestFollowingEndpoint:    latestfollowingEndpoint,
		ListRelationshipEndpoint:   listrelationshipEndpoint,
		FollowEndpoint:             followEndpoint,
		UnFollowEndpoint:           unfollowEndpoint,
		ListMessageEndpoint:        listmessageEndpoint,
		ReadMessageEndpoint:        readmessageEndpoint,
		GetMessageSummaryEndpoint:  getmessagesummaryEndpoint,
		ListCommentEndpoint:        listcommentEndpoint,
		GetCommentEndpoint:         getcommentEndpoint,
		NewRecommendStatusEndpoint: newrecommendstatusEndpoint,
		CreateCommentEndpoint:      createcommentEndpoint,
		DeleteCommentEndpoint:      deletecommentEndpoint,
		LikeCommentEndpoint:        likecommentEndpoint,
		UnlikeCommentEndpoint:      unlikecommentEndpoint,
		ListBlacklistEndpoint:      listblacklistEndpoint,
		CreateBlacklistEndpoint:    createblacklistEndpoint,
		DeleteBlacklistEndpoint:    deleteblacklistEndpoint,
		ShareTweetUrlEndpoint:      sharetweeturlEndpoint,
		UserTwitterAuthEndpoint:    usertwitterauthEndpoint,
		UserTwitterAirdropEndpoint: usertwitterairdropEndpoint,
	}, nil
}

// GRPC Client Decode

// DecodeGRPCSignInResponse is a transport/grpc.DecodeResponseFunc that converts a
// gRPC signin reply to a user-domain signin response. Primarily useful in a client.
func DecodeGRPCSignInResponse(_ context.Context, grpcReply interface{}) (interface{}, error) {
	reply := grpcReply.(*pb.SignInResponse)
	return reply, nil
}

// DecodeGRPCFindUserResponse is a transport/grpc.DecodeResponseFunc that converts a
// gRPC finduser reply to a user-domain finduser response. Primarily useful in a client.
func DecodeGRPCFindUserResponse(_ context.Context, grpcReply interface{}) (interface{}, error) {
	reply := grpcReply.(*pb.FindUserResponse)
	return reply, nil
}

// DecodeGRPCUpdateUserProfileResponse is a transport/grpc.DecodeResponseFunc that converts a
// gRPC updateuserprofile reply to a user-domain updateuserprofile response. Primarily useful in a client.
func DecodeGRPCUpdateUserProfileResponse(_ context.Context, grpcReply interface{}) (interface{}, error) {
	reply := grpcReply.(*pb.UpdateUserResponse)
	return reply, nil
}

// DecodeGRPCUpdateUserAvatarResponse is a transport/grpc.DecodeResponseFunc that converts a
// gRPC updateuseravatar reply to a user-domain updateuseravatar response. Primarily useful in a client.
func DecodeGRPCUpdateUserAvatarResponse(_ context.Context, grpcReply interface{}) (interface{}, error) {
	reply := grpcReply.(*pb.UpdateUserResponse)
	return reply, nil
}

// DecodeGRPCUpdateUserNameResponse is a transport/grpc.DecodeResponseFunc that converts a
// gRPC updateusername reply to a user-domain updateusername response. Primarily useful in a client.
func DecodeGRPCUpdateUserNameResponse(_ context.Context, grpcReply interface{}) (interface{}, error) {
	reply := grpcReply.(*pb.UpdateUserResponse)
	return reply, nil
}

// DecodeGRPCCreateStatusResponse is a transport/grpc.DecodeResponseFunc that converts a
// gRPC createstatus reply to a user-domain createstatus response. Primarily useful in a client.
func DecodeGRPCCreateStatusResponse(_ context.Context, grpcReply interface{}) (interface{}, error) {
	reply := grpcReply.(*pb.CreateStatusResponse)
	return reply, nil
}

// DecodeGRPCUpdateStatusResponse is a transport/grpc.DecodeResponseFunc that converts a
// gRPC updatestatus reply to a user-domain updatestatus response. Primarily useful in a client.
func DecodeGRPCUpdateStatusResponse(_ context.Context, grpcReply interface{}) (interface{}, error) {
	reply := grpcReply.(*pb.UpdateStatusResponse)
	return reply, nil
}

// DecodeGRPCDeleteStatusResponse is a transport/grpc.DecodeResponseFunc that converts a
// gRPC deletestatus reply to a user-domain deletestatus response. Primarily useful in a client.
func DecodeGRPCDeleteStatusResponse(_ context.Context, grpcReply interface{}) (interface{}, error) {
	reply := grpcReply.(*pb.SimpleResponse)
	return reply, nil
}

// DecodeGRPCLikeStatusResponse is a transport/grpc.DecodeResponseFunc that converts a
// gRPC likestatus reply to a user-domain likestatus response. Primarily useful in a client.
func DecodeGRPCLikeStatusResponse(_ context.Context, grpcReply interface{}) (interface{}, error) {
	reply := grpcReply.(*pb.SimpleResponse)
	return reply, nil
}

// DecodeGRPCUnLikeStatusResponse is a transport/grpc.DecodeResponseFunc that converts a
// gRPC unlikestatus reply to a user-domain unlikestatus response. Primarily useful in a client.
func DecodeGRPCUnLikeStatusResponse(_ context.Context, grpcReply interface{}) (interface{}, error) {
	reply := grpcReply.(*pb.SimpleResponse)
	return reply, nil
}

// DecodeGRPCListLikeStatusResponse is a transport/grpc.DecodeResponseFunc that converts a
// gRPC listlikestatus reply to a user-domain listlikestatus response. Primarily useful in a client.
func DecodeGRPCListLikeStatusResponse(_ context.Context, grpcReply interface{}) (interface{}, error) {
	reply := grpcReply.(*pb.ListLikeResponse)
	return reply, nil
}

// DecodeGRPCGetStatusResponse is a transport/grpc.DecodeResponseFunc that converts a
// gRPC getstatus reply to a user-domain getstatus response. Primarily useful in a client.
func DecodeGRPCGetStatusResponse(_ context.Context, grpcReply interface{}) (interface{}, error) {
	reply := grpcReply.(*pb.GetStatusResponse)
	return reply, nil
}

// DecodeGRPCListStatusResponse is a transport/grpc.DecodeResponseFunc that converts a
// gRPC liststatus reply to a user-domain liststatus response. Primarily useful in a client.
func DecodeGRPCListStatusResponse(_ context.Context, grpcReply interface{}) (interface{}, error) {
	reply := grpcReply.(*pb.ListStatusResponse)
	return reply, nil
}

// DecodeGRPCNewListStatusResponse is a transport/grpc.DecodeResponseFunc that converts a
// gRPC newliststatus reply to a user-domain newliststatus response. Primarily useful in a client.
func DecodeGRPCNewListStatusResponse(_ context.Context, grpcReply interface{}) (interface{}, error) {
	reply := grpcReply.(*pb.NewListStatusResponse)
	return reply, nil
}

// DecodeGRPCListRecommendedResponse is a transport/grpc.DecodeResponseFunc that converts a
// gRPC listrecommended reply to a user-domain listrecommended response. Primarily useful in a client.
func DecodeGRPCListRecommendedResponse(_ context.Context, grpcReply interface{}) (interface{}, error) {
	reply := grpcReply.(*pb.ListStatusResponse)
	return reply, nil
}

// DecodeGRPCListUserTimelineResponse is a transport/grpc.DecodeResponseFunc that converts a
// gRPC listusertimeline reply to a user-domain listusertimeline response. Primarily useful in a client.
func DecodeGRPCListUserTimelineResponse(_ context.Context, grpcReply interface{}) (interface{}, error) {
	reply := grpcReply.(*pb.ListStatusResponse)
	return reply, nil
}

// DecodeGRPCLatestFollowingResponse is a transport/grpc.DecodeResponseFunc that converts a
// gRPC latestfollowing reply to a user-domain latestfollowing response. Primarily useful in a client.
func DecodeGRPCLatestFollowingResponse(_ context.Context, grpcReply interface{}) (interface{}, error) {
	reply := grpcReply.(*pb.LatestFollowingResponse)
	return reply, nil
}

// DecodeGRPCListRelationshipResponse is a transport/grpc.DecodeResponseFunc that converts a
// gRPC listrelationship reply to a user-domain listrelationship response. Primarily useful in a client.
func DecodeGRPCListRelationshipResponse(_ context.Context, grpcReply interface{}) (interface{}, error) {
	reply := grpcReply.(*pb.ListRelationshipResponse)
	return reply, nil
}

// DecodeGRPCFollowResponse is a transport/grpc.DecodeResponseFunc that converts a
// gRPC follow reply to a user-domain follow response. Primarily useful in a client.
func DecodeGRPCFollowResponse(_ context.Context, grpcReply interface{}) (interface{}, error) {
	reply := grpcReply.(*pb.SimpleResponse)
	return reply, nil
}

// DecodeGRPCUnFollowResponse is a transport/grpc.DecodeResponseFunc that converts a
// gRPC unfollow reply to a user-domain unfollow response. Primarily useful in a client.
func DecodeGRPCUnFollowResponse(_ context.Context, grpcReply interface{}) (interface{}, error) {
	reply := grpcReply.(*pb.SimpleResponse)
	return reply, nil
}

// DecodeGRPCListMessageResponse is a transport/grpc.DecodeResponseFunc that converts a
// gRPC listmessage reply to a user-domain listmessage response. Primarily useful in a client.
func DecodeGRPCListMessageResponse(_ context.Context, grpcReply interface{}) (interface{}, error) {
	reply := grpcReply.(*pb.ListMessageResponse)
	return reply, nil
}

// DecodeGRPCReadMessageResponse is a transport/grpc.DecodeResponseFunc that converts a
// gRPC readmessage reply to a user-domain readmessage response. Primarily useful in a client.
func DecodeGRPCReadMessageResponse(_ context.Context, grpcReply interface{}) (interface{}, error) {
	reply := grpcReply.(*pb.SimpleResponse)
	return reply, nil
}

// DecodeGRPCGetMessageSummaryResponse is a transport/grpc.DecodeResponseFunc that converts a
// gRPC getmessagesummary reply to a user-domain getmessagesummary response. Primarily useful in a client.
func DecodeGRPCGetMessageSummaryResponse(_ context.Context, grpcReply interface{}) (interface{}, error) {
	reply := grpcReply.(*pb.MessageSummaryResponse)
	return reply, nil
}

// DecodeGRPCListCommentResponse is a transport/grpc.DecodeResponseFunc that converts a
// gRPC listcomment reply to a user-domain listcomment response. Primarily useful in a client.
func DecodeGRPCListCommentResponse(_ context.Context, grpcReply interface{}) (interface{}, error) {
	reply := grpcReply.(*pb.ListCommentResponse)
	return reply, nil
}

// DecodeGRPCGetCommentResponse is a transport/grpc.DecodeResponseFunc that converts a
// gRPC getcomment reply to a user-domain getcomment response. Primarily useful in a client.
func DecodeGRPCGetCommentResponse(_ context.Context, grpcReply interface{}) (interface{}, error) {
	reply := grpcReply.(*pb.GetCommentResponse)
	return reply, nil
}

// DecodeGRPCNewRecommendStatusResponse is a transport/grpc.DecodeResponseFunc that converts a
// gRPC newrecommendstatus reply to a user-domain newrecommendstatus response. Primarily useful in a client.
func DecodeGRPCNewRecommendStatusResponse(_ context.Context, grpcReply interface{}) (interface{}, error) {
	reply := grpcReply.(*pb.NewRecommendStatusResponse)
	return reply, nil
}

// DecodeGRPCCreateCommentResponse is a transport/grpc.DecodeResponseFunc that converts a
// gRPC createcomment reply to a user-domain createcomment response. Primarily useful in a client.
func DecodeGRPCCreateCommentResponse(_ context.Context, grpcReply interface{}) (interface{}, error) {
	reply := grpcReply.(*pb.CreateCommentResponse)
	return reply, nil
}

// DecodeGRPCDeleteCommentResponse is a transport/grpc.DecodeResponseFunc that converts a
// gRPC deletecomment reply to a user-domain deletecomment response. Primarily useful in a client.
func DecodeGRPCDeleteCommentResponse(_ context.Context, grpcReply interface{}) (interface{}, error) {
	reply := grpcReply.(*pb.SimpleResponse)
	return reply, nil
}

// DecodeGRPCLikeCommentResponse is a transport/grpc.DecodeResponseFunc that converts a
// gRPC likecomment reply to a user-domain likecomment response. Primarily useful in a client.
func DecodeGRPCLikeCommentResponse(_ context.Context, grpcReply interface{}) (interface{}, error) {
	reply := grpcReply.(*pb.SimpleResponse)
	return reply, nil
}

// DecodeGRPCUnlikeCommentResponse is a transport/grpc.DecodeResponseFunc that converts a
// gRPC unlikecomment reply to a user-domain unlikecomment response. Primarily useful in a client.
func DecodeGRPCUnlikeCommentResponse(_ context.Context, grpcReply interface{}) (interface{}, error) {
	reply := grpcReply.(*pb.SimpleResponse)
	return reply, nil
}

// DecodeGRPCListBlacklistResponse is a transport/grpc.DecodeResponseFunc that converts a
// gRPC listblacklist reply to a user-domain listblacklist response. Primarily useful in a client.
func DecodeGRPCListBlacklistResponse(_ context.Context, grpcReply interface{}) (interface{}, error) {
	reply := grpcReply.(*pb.ListBlacklistResponse)
	return reply, nil
}

// DecodeGRPCCreateBlacklistResponse is a transport/grpc.DecodeResponseFunc that converts a
// gRPC createblacklist reply to a user-domain createblacklist response. Primarily useful in a client.
func DecodeGRPCCreateBlacklistResponse(_ context.Context, grpcReply interface{}) (interface{}, error) {
	reply := grpcReply.(*pb.SimpleResponse)
	return reply, nil
}

// DecodeGRPCDeleteBlacklistResponse is a transport/grpc.DecodeResponseFunc that converts a
// gRPC deleteblacklist reply to a user-domain deleteblacklist response. Primarily useful in a client.
func DecodeGRPCDeleteBlacklistResponse(_ context.Context, grpcReply interface{}) (interface{}, error) {
	reply := grpcReply.(*pb.SimpleResponse)
	return reply, nil
}

// DecodeGRPCShareTweetUrlResponse is a transport/grpc.DecodeResponseFunc that converts a
// gRPC sharetweeturl reply to a user-domain sharetweeturl response. Primarily useful in a client.
func DecodeGRPCShareTweetUrlResponse(_ context.Context, grpcReply interface{}) (interface{}, error) {
	reply := grpcReply.(*pb.ShareTweetUrlResponse)
	return reply, nil
}

// DecodeGRPCUserTwitterAuthResponse is a transport/grpc.DecodeResponseFunc that converts a
// gRPC usertwitterauth reply to a user-domain usertwitterauth response. Primarily useful in a client.
func DecodeGRPCUserTwitterAuthResponse(_ context.Context, grpcReply interface{}) (interface{}, error) {
	reply := grpcReply.(*pb.UserTwitterAuthResponse)
	return reply, nil
}

// DecodeGRPCUserTwitterAirdropResponse is a transport/grpc.DecodeResponseFunc that converts a
// gRPC usertwitterairdrop reply to a user-domain usertwitterairdrop response. Primarily useful in a client.
func DecodeGRPCUserTwitterAirdropResponse(_ context.Context, grpcReply interface{}) (interface{}, error) {
	reply := grpcReply.(*pb.UserTwitterAirdropResponse)
	return reply, nil
}

// GRPC Client Encode

// EncodeGRPCSignInRequest is a transport/grpc.EncodeRequestFunc that converts a
// user-domain signin request to a gRPC signin request. Primarily useful in a client.
func EncodeGRPCSignInRequest(_ context.Context, request interface{}) (interface{}, error) {
	req := request.(*pb.SignInRequest)
	return req, nil
}

// EncodeGRPCFindUserRequest is a transport/grpc.EncodeRequestFunc that converts a
// user-domain finduser request to a gRPC finduser request. Primarily useful in a client.
func EncodeGRPCFindUserRequest(_ context.Context, request interface{}) (interface{}, error) {
	req := request.(*pb.FindUserRequest)
	return req, nil
}

// EncodeGRPCUpdateUserProfileRequest is a transport/grpc.EncodeRequestFunc that converts a
// user-domain updateuserprofile request to a gRPC updateuserprofile request. Primarily useful in a client.
func EncodeGRPCUpdateUserProfileRequest(_ context.Context, request interface{}) (interface{}, error) {
	req := request.(*pb.UpdateUserProfileRequest)
	return req, nil
}

// EncodeGRPCUpdateUserAvatarRequest is a transport/grpc.EncodeRequestFunc that converts a
// user-domain updateuseravatar request to a gRPC updateuseravatar request. Primarily useful in a client.
func EncodeGRPCUpdateUserAvatarRequest(_ context.Context, request interface{}) (interface{}, error) {
	req := request.(*pb.UpdateUserAvatarRequest)
	return req, nil
}

// EncodeGRPCUpdateUserNameRequest is a transport/grpc.EncodeRequestFunc that converts a
// user-domain updateusername request to a gRPC updateusername request. Primarily useful in a client.
func EncodeGRPCUpdateUserNameRequest(_ context.Context, request interface{}) (interface{}, error) {
	req := request.(*pb.UpdateUserNameRequest)
	return req, nil
}

// EncodeGRPCCreateStatusRequest is a transport/grpc.EncodeRequestFunc that converts a
// user-domain createstatus request to a gRPC createstatus request. Primarily useful in a client.
func EncodeGRPCCreateStatusRequest(_ context.Context, request interface{}) (interface{}, error) {
	req := request.(*pb.CreateStatusRequest)
	return req, nil
}

// EncodeGRPCUpdateStatusRequest is a transport/grpc.EncodeRequestFunc that converts a
// user-domain updatestatus request to a gRPC updatestatus request. Primarily useful in a client.
func EncodeGRPCUpdateStatusRequest(_ context.Context, request interface{}) (interface{}, error) {
	req := request.(*pb.UpdateStatusRequest)
	return req, nil
}

// EncodeGRPCDeleteStatusRequest is a transport/grpc.EncodeRequestFunc that converts a
// user-domain deletestatus request to a gRPC deletestatus request. Primarily useful in a client.
func EncodeGRPCDeleteStatusRequest(_ context.Context, request interface{}) (interface{}, error) {
	req := request.(*pb.DeleteStatusRequest)
	return req, nil
}

// EncodeGRPCLikeStatusRequest is a transport/grpc.EncodeRequestFunc that converts a
// user-domain likestatus request to a gRPC likestatus request. Primarily useful in a client.
func EncodeGRPCLikeStatusRequest(_ context.Context, request interface{}) (interface{}, error) {
	req := request.(*pb.LikeStatusRequest)
	return req, nil
}

// EncodeGRPCUnLikeStatusRequest is a transport/grpc.EncodeRequestFunc that converts a
// user-domain unlikestatus request to a gRPC unlikestatus request. Primarily useful in a client.
func EncodeGRPCUnLikeStatusRequest(_ context.Context, request interface{}) (interface{}, error) {
	req := request.(*pb.UnLikeStatusRequest)
	return req, nil
}

// EncodeGRPCListLikeStatusRequest is a transport/grpc.EncodeRequestFunc that converts a
// user-domain listlikestatus request to a gRPC listlikestatus request. Primarily useful in a client.
func EncodeGRPCListLikeStatusRequest(_ context.Context, request interface{}) (interface{}, error) {
	req := request.(*pb.ListLikeRequest)
	return req, nil
}

// EncodeGRPCGetStatusRequest is a transport/grpc.EncodeRequestFunc that converts a
// user-domain getstatus request to a gRPC getstatus request. Primarily useful in a client.
func EncodeGRPCGetStatusRequest(_ context.Context, request interface{}) (interface{}, error) {
	req := request.(*pb.GetStatusRequest)
	return req, nil
}

// EncodeGRPCListStatusRequest is a transport/grpc.EncodeRequestFunc that converts a
// user-domain liststatus request to a gRPC liststatus request. Primarily useful in a client.
func EncodeGRPCListStatusRequest(_ context.Context, request interface{}) (interface{}, error) {
	req := request.(*pb.ListStatusRequest)
	return req, nil
}

// EncodeGRPCNewListStatusRequest is a transport/grpc.EncodeRequestFunc that converts a
// user-domain newliststatus request to a gRPC newliststatus request. Primarily useful in a client.
func EncodeGRPCNewListStatusRequest(_ context.Context, request interface{}) (interface{}, error) {
	req := request.(*pb.NewListStatusRequest)
	return req, nil
}

// EncodeGRPCListRecommendedRequest is a transport/grpc.EncodeRequestFunc that converts a
// user-domain listrecommended request to a gRPC listrecommended request. Primarily useful in a client.
func EncodeGRPCListRecommendedRequest(_ context.Context, request interface{}) (interface{}, error) {
	req := request.(*pb.ListStatusRequest)
	return req, nil
}

// EncodeGRPCListUserTimelineRequest is a transport/grpc.EncodeRequestFunc that converts a
// user-domain listusertimeline request to a gRPC listusertimeline request. Primarily useful in a client.
func EncodeGRPCListUserTimelineRequest(_ context.Context, request interface{}) (interface{}, error) {
	req := request.(*pb.ListStatusRequest)
	return req, nil
}

// EncodeGRPCLatestFollowingRequest is a transport/grpc.EncodeRequestFunc that converts a
// user-domain latestfollowing request to a gRPC latestfollowing request. Primarily useful in a client.
func EncodeGRPCLatestFollowingRequest(_ context.Context, request interface{}) (interface{}, error) {
	req := request.(*pb.LatestFollowingRequest)
	return req, nil
}

// EncodeGRPCListRelationshipRequest is a transport/grpc.EncodeRequestFunc that converts a
// user-domain listrelationship request to a gRPC listrelationship request. Primarily useful in a client.
func EncodeGRPCListRelationshipRequest(_ context.Context, request interface{}) (interface{}, error) {
	req := request.(*pb.ListRelationshipRequest)
	return req, nil
}

// EncodeGRPCFollowRequest is a transport/grpc.EncodeRequestFunc that converts a
// user-domain follow request to a gRPC follow request. Primarily useful in a client.
func EncodeGRPCFollowRequest(_ context.Context, request interface{}) (interface{}, error) {
	req := request.(*pb.FollowRequest)
	return req, nil
}

// EncodeGRPCUnFollowRequest is a transport/grpc.EncodeRequestFunc that converts a
// user-domain unfollow request to a gRPC unfollow request. Primarily useful in a client.
func EncodeGRPCUnFollowRequest(_ context.Context, request interface{}) (interface{}, error) {
	req := request.(*pb.UnFollowRequest)
	return req, nil
}

// EncodeGRPCListMessageRequest is a transport/grpc.EncodeRequestFunc that converts a
// user-domain listmessage request to a gRPC listmessage request. Primarily useful in a client.
func EncodeGRPCListMessageRequest(_ context.Context, request interface{}) (interface{}, error) {
	req := request.(*pb.ListMessageRequest)
	return req, nil
}

// EncodeGRPCReadMessageRequest is a transport/grpc.EncodeRequestFunc that converts a
// user-domain readmessage request to a gRPC readmessage request. Primarily useful in a client.
func EncodeGRPCReadMessageRequest(_ context.Context, request interface{}) (interface{}, error) {
	req := request.(*pb.ReadMessageRequest)
	return req, nil
}

// EncodeGRPCGetMessageSummaryRequest is a transport/grpc.EncodeRequestFunc that converts a
// user-domain getmessagesummary request to a gRPC getmessagesummary request. Primarily useful in a client.
func EncodeGRPCGetMessageSummaryRequest(_ context.Context, request interface{}) (interface{}, error) {
	req := request.(*pb.GetMessageSummaryRequest)
	return req, nil
}

// EncodeGRPCListCommentRequest is a transport/grpc.EncodeRequestFunc that converts a
// user-domain listcomment request to a gRPC listcomment request. Primarily useful in a client.
func EncodeGRPCListCommentRequest(_ context.Context, request interface{}) (interface{}, error) {
	req := request.(*pb.ListCommentRequest)
	return req, nil
}

// EncodeGRPCGetCommentRequest is a transport/grpc.EncodeRequestFunc that converts a
// user-domain getcomment request to a gRPC getcomment request. Primarily useful in a client.
func EncodeGRPCGetCommentRequest(_ context.Context, request interface{}) (interface{}, error) {
	req := request.(*pb.GetCommentRequest)
	return req, nil
}

// EncodeGRPCNewRecommendStatusRequest is a transport/grpc.EncodeRequestFunc that converts a
// user-domain newrecommendstatus request to a gRPC newrecommendstatus request. Primarily useful in a client.
func EncodeGRPCNewRecommendStatusRequest(_ context.Context, request interface{}) (interface{}, error) {
	req := request.(*pb.NewRecommendStatusRequest)
	return req, nil
}

// EncodeGRPCCreateCommentRequest is a transport/grpc.EncodeRequestFunc that converts a
// user-domain createcomment request to a gRPC createcomment request. Primarily useful in a client.
func EncodeGRPCCreateCommentRequest(_ context.Context, request interface{}) (interface{}, error) {
	req := request.(*pb.CreateCommentRequest)
	return req, nil
}

// EncodeGRPCDeleteCommentRequest is a transport/grpc.EncodeRequestFunc that converts a
// user-domain deletecomment request to a gRPC deletecomment request. Primarily useful in a client.
func EncodeGRPCDeleteCommentRequest(_ context.Context, request interface{}) (interface{}, error) {
	req := request.(*pb.DeleteCommentRequest)
	return req, nil
}

// EncodeGRPCLikeCommentRequest is a transport/grpc.EncodeRequestFunc that converts a
// user-domain likecomment request to a gRPC likecomment request. Primarily useful in a client.
func EncodeGRPCLikeCommentRequest(_ context.Context, request interface{}) (interface{}, error) {
	req := request.(*pb.LikeCommentRequest)
	return req, nil
}

// EncodeGRPCUnlikeCommentRequest is a transport/grpc.EncodeRequestFunc that converts a
// user-domain unlikecomment request to a gRPC unlikecomment request. Primarily useful in a client.
func EncodeGRPCUnlikeCommentRequest(_ context.Context, request interface{}) (interface{}, error) {
	req := request.(*pb.UnlikeCommentRequest)
	return req, nil
}

// EncodeGRPCListBlacklistRequest is a transport/grpc.EncodeRequestFunc that converts a
// user-domain listblacklist request to a gRPC listblacklist request. Primarily useful in a client.
func EncodeGRPCListBlacklistRequest(_ context.Context, request interface{}) (interface{}, error) {
	req := request.(*pb.ListBlacklistRequest)
	return req, nil
}

// EncodeGRPCCreateBlacklistRequest is a transport/grpc.EncodeRequestFunc that converts a
// user-domain createblacklist request to a gRPC createblacklist request. Primarily useful in a client.
func EncodeGRPCCreateBlacklistRequest(_ context.Context, request interface{}) (interface{}, error) {
	req := request.(*pb.CreateBlacklistRequest)
	return req, nil
}

// EncodeGRPCDeleteBlacklistRequest is a transport/grpc.EncodeRequestFunc that converts a
// user-domain deleteblacklist request to a gRPC deleteblacklist request. Primarily useful in a client.
func EncodeGRPCDeleteBlacklistRequest(_ context.Context, request interface{}) (interface{}, error) {
	req := request.(*pb.DeleteBlacklistRequest)
	return req, nil
}

// EncodeGRPCShareTweetUrlRequest is a transport/grpc.EncodeRequestFunc that converts a
// user-domain sharetweeturl request to a gRPC sharetweeturl request. Primarily useful in a client.
func EncodeGRPCShareTweetUrlRequest(_ context.Context, request interface{}) (interface{}, error) {
	req := request.(*pb.ShareTweetUrlRequest)
	return req, nil
}

// EncodeGRPCUserTwitterAuthRequest is a transport/grpc.EncodeRequestFunc that converts a
// user-domain usertwitterauth request to a gRPC usertwitterauth request. Primarily useful in a client.
func EncodeGRPCUserTwitterAuthRequest(_ context.Context, request interface{}) (interface{}, error) {
	req := request.(*pb.UserTwitterAuthRequest)
	return req, nil
}

// EncodeGRPCUserTwitterAirdropRequest is a transport/grpc.EncodeRequestFunc that converts a
// user-domain usertwitterairdrop request to a gRPC usertwitterairdrop request. Primarily useful in a client.
func EncodeGRPCUserTwitterAirdropRequest(_ context.Context, request interface{}) (interface{}, error) {
	req := request.(*pb.UserTwitterAirdropRequest)
	return req, nil
}

type clientConfig struct {
	headers []string
}

// ClientOption is a function that modifies the client config
type ClientOption func(*clientConfig) error

func CtxValuesToSend(keys ...string) ClientOption {
	return func(o *clientConfig) error {
		o.headers = keys
		return nil
	}
}

func contextValuesToGRPCMetadata(keys []string) grpctransport.ClientRequestFunc {
	return func(ctx context.Context, md *metadata.MD) context.Context {
		var pairs []string
		for _, k := range keys {
			if v, ok := ctx.Value(k).(string); ok {
				pairs = append(pairs, k, v)
			}
		}

		if pairs != nil {
			*md = metadata.Join(*md, metadata.Pairs(pairs...))
		}

		return ctx
	}
}
