// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: socialsvc.proto

// The package name determines the name of the directories that truss creates
// for `package echo;` truss will create the directory "echo-service".

package socialsvc

import (
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/metaverse/truss/deftree/googlethirdparty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type SignInRequest struct {
	Auth string `protobuf:"bytes,1,opt,name=auth,proto3" json:"auth,omitempty"`
}

func (m *SignInRequest) Reset()         { *m = SignInRequest{} }
func (m *SignInRequest) String() string { return proto.CompactTextString(m) }
func (*SignInRequest) ProtoMessage()    {}
func (*SignInRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_565883138c05ff17, []int{0}
}
func (m *SignInRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SignInRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SignInRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SignInRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignInRequest.Merge(m, src)
}
func (m *SignInRequest) XXX_Size() int {
	return m.Size()
}
func (m *SignInRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SignInRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SignInRequest proto.InternalMessageInfo

func (m *SignInRequest) GetAuth() string {
	if m != nil {
		return m.Auth
	}
	return ""
}

type SignInResponse struct {
	Code uint64 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Jwt  string `protobuf:"bytes,2,opt,name=jwt,proto3" json:"jwt,omitempty"`
}

func (m *SignInResponse) Reset()         { *m = SignInResponse{} }
func (m *SignInResponse) String() string { return proto.CompactTextString(m) }
func (*SignInResponse) ProtoMessage()    {}
func (*SignInResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_565883138c05ff17, []int{1}
}
func (m *SignInResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SignInResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SignInResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SignInResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignInResponse.Merge(m, src)
}
func (m *SignInResponse) XXX_Size() int {
	return m.Size()
}
func (m *SignInResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SignInResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SignInResponse proto.InternalMessageInfo

func (m *SignInResponse) GetCode() uint64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *SignInResponse) GetJwt() string {
	if m != nil {
		return m.Jwt
	}
	return ""
}

type UserInfo struct {
	Uid      uint64 `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Username string `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	Misesid  string `protobuf:"bytes,3,opt,name=misesid,proto3" json:"misesid,omitempty"`
	Gender   string `protobuf:"bytes,4,opt,name=gender,proto3" json:"gender,omitempty"`
	Mobile   string `protobuf:"bytes,5,opt,name=mobile,proto3" json:"mobile,omitempty"`
	Email    string `protobuf:"bytes,6,opt,name=email,proto3" json:"email,omitempty"`
	Address  string `protobuf:"bytes,7,opt,name=address,proto3" json:"address,omitempty"`
	Avatar   string `protobuf:"bytes,8,opt,name=avatar,proto3" json:"avatar,omitempty"`
}

func (m *UserInfo) Reset()         { *m = UserInfo{} }
func (m *UserInfo) String() string { return proto.CompactTextString(m) }
func (*UserInfo) ProtoMessage()    {}
func (*UserInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_565883138c05ff17, []int{2}
}
func (m *UserInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserInfo.Merge(m, src)
}
func (m *UserInfo) XXX_Size() int {
	return m.Size()
}
func (m *UserInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_UserInfo.DiscardUnknown(m)
}

var xxx_messageInfo_UserInfo proto.InternalMessageInfo

func (m *UserInfo) GetUid() uint64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *UserInfo) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *UserInfo) GetMisesid() string {
	if m != nil {
		return m.Misesid
	}
	return ""
}

func (m *UserInfo) GetGender() string {
	if m != nil {
		return m.Gender
	}
	return ""
}

func (m *UserInfo) GetMobile() string {
	if m != nil {
		return m.Mobile
	}
	return ""
}

func (m *UserInfo) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *UserInfo) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *UserInfo) GetAvatar() string {
	if m != nil {
		return m.Avatar
	}
	return ""
}

type FindUserRequest struct {
	Uid uint64 `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
}

func (m *FindUserRequest) Reset()         { *m = FindUserRequest{} }
func (m *FindUserRequest) String() string { return proto.CompactTextString(m) }
func (*FindUserRequest) ProtoMessage()    {}
func (*FindUserRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_565883138c05ff17, []int{3}
}
func (m *FindUserRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FindUserRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FindUserRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FindUserRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FindUserRequest.Merge(m, src)
}
func (m *FindUserRequest) XXX_Size() int {
	return m.Size()
}
func (m *FindUserRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_FindUserRequest.DiscardUnknown(m)
}

var xxx_messageInfo_FindUserRequest proto.InternalMessageInfo

func (m *FindUserRequest) GetUid() uint64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

type FindUserResponse struct {
	Code       uint64    `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	User       *UserInfo `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty"`
	IsFollowed bool      `protobuf:"varint,3,opt,name=is_followed,json=isFollowed,proto3" json:"is_followed,omitempty"`
}

func (m *FindUserResponse) Reset()         { *m = FindUserResponse{} }
func (m *FindUserResponse) String() string { return proto.CompactTextString(m) }
func (*FindUserResponse) ProtoMessage()    {}
func (*FindUserResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_565883138c05ff17, []int{4}
}
func (m *FindUserResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FindUserResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FindUserResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FindUserResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FindUserResponse.Merge(m, src)
}
func (m *FindUserResponse) XXX_Size() int {
	return m.Size()
}
func (m *FindUserResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_FindUserResponse.DiscardUnknown(m)
}

var xxx_messageInfo_FindUserResponse proto.InternalMessageInfo

func (m *FindUserResponse) GetCode() uint64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *FindUserResponse) GetUser() *UserInfo {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *FindUserResponse) GetIsFollowed() bool {
	if m != nil {
		return m.IsFollowed
	}
	return false
}

type UpdateUserProfileRequest struct {
	Uid     uint64 `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Gender  string `protobuf:"bytes,2,opt,name=gender,proto3" json:"gender,omitempty"`
	Mobile  string `protobuf:"bytes,3,opt,name=mobile,proto3" json:"mobile,omitempty"`
	Email   string `protobuf:"bytes,4,opt,name=email,proto3" json:"email,omitempty"`
	Address string `protobuf:"bytes,5,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *UpdateUserProfileRequest) Reset()         { *m = UpdateUserProfileRequest{} }
func (m *UpdateUserProfileRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateUserProfileRequest) ProtoMessage()    {}
func (*UpdateUserProfileRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_565883138c05ff17, []int{5}
}
func (m *UpdateUserProfileRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateUserProfileRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateUserProfileRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateUserProfileRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateUserProfileRequest.Merge(m, src)
}
func (m *UpdateUserProfileRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpdateUserProfileRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateUserProfileRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateUserProfileRequest proto.InternalMessageInfo

func (m *UpdateUserProfileRequest) GetUid() uint64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *UpdateUserProfileRequest) GetGender() string {
	if m != nil {
		return m.Gender
	}
	return ""
}

func (m *UpdateUserProfileRequest) GetMobile() string {
	if m != nil {
		return m.Mobile
	}
	return ""
}

func (m *UpdateUserProfileRequest) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *UpdateUserProfileRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type UpdateUserAvatarRequest struct {
	Uid          uint64 `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	AttachmentId uint64 `protobuf:"varint,2,opt,name=attachment_id,json=attachmentId,proto3" json:"attachment_id,omitempty"`
}

func (m *UpdateUserAvatarRequest) Reset()         { *m = UpdateUserAvatarRequest{} }
func (m *UpdateUserAvatarRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateUserAvatarRequest) ProtoMessage()    {}
func (*UpdateUserAvatarRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_565883138c05ff17, []int{6}
}
func (m *UpdateUserAvatarRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateUserAvatarRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateUserAvatarRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateUserAvatarRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateUserAvatarRequest.Merge(m, src)
}
func (m *UpdateUserAvatarRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpdateUserAvatarRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateUserAvatarRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateUserAvatarRequest proto.InternalMessageInfo

func (m *UpdateUserAvatarRequest) GetUid() uint64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *UpdateUserAvatarRequest) GetAttachmentId() uint64 {
	if m != nil {
		return m.AttachmentId
	}
	return 0
}

type UpdateUserNameRequest struct {
	Uid      uint64 `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Username string `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
}

func (m *UpdateUserNameRequest) Reset()         { *m = UpdateUserNameRequest{} }
func (m *UpdateUserNameRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateUserNameRequest) ProtoMessage()    {}
func (*UpdateUserNameRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_565883138c05ff17, []int{7}
}
func (m *UpdateUserNameRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateUserNameRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateUserNameRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateUserNameRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateUserNameRequest.Merge(m, src)
}
func (m *UpdateUserNameRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpdateUserNameRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateUserNameRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateUserNameRequest proto.InternalMessageInfo

func (m *UpdateUserNameRequest) GetUid() uint64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *UpdateUserNameRequest) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

type UpdateUserResponse struct {
	Code uint64    `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	User *UserInfo `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty"`
}

func (m *UpdateUserResponse) Reset()         { *m = UpdateUserResponse{} }
func (m *UpdateUserResponse) String() string { return proto.CompactTextString(m) }
func (*UpdateUserResponse) ProtoMessage()    {}
func (*UpdateUserResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_565883138c05ff17, []int{8}
}
func (m *UpdateUserResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateUserResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateUserResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateUserResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateUserResponse.Merge(m, src)
}
func (m *UpdateUserResponse) XXX_Size() int {
	return m.Size()
}
func (m *UpdateUserResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateUserResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateUserResponse proto.InternalMessageInfo

func (m *UpdateUserResponse) GetCode() uint64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *UpdateUserResponse) GetUser() *UserInfo {
	if m != nil {
		return m.User
	}
	return nil
}

type LinkMetaInfo struct {
	Title         string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Host          string `protobuf:"bytes,2,opt,name=host,proto3" json:"host,omitempty"`
	Link          string `protobuf:"bytes,3,opt,name=link,proto3" json:"link,omitempty"`
	AttachmentId  uint64 `protobuf:"varint,4,opt,name=attachment_id,json=attachmentId,proto3" json:"attachment_id,omitempty"`
	AttachmentUrl string `protobuf:"bytes,5,opt,name=attachment_url,json=attachmentUrl,proto3" json:"attachment_url,omitempty"`
}

func (m *LinkMetaInfo) Reset()         { *m = LinkMetaInfo{} }
func (m *LinkMetaInfo) String() string { return proto.CompactTextString(m) }
func (*LinkMetaInfo) ProtoMessage()    {}
func (*LinkMetaInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_565883138c05ff17, []int{9}
}
func (m *LinkMetaInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LinkMetaInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LinkMetaInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LinkMetaInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LinkMetaInfo.Merge(m, src)
}
func (m *LinkMetaInfo) XXX_Size() int {
	return m.Size()
}
func (m *LinkMetaInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_LinkMetaInfo.DiscardUnknown(m)
}

var xxx_messageInfo_LinkMetaInfo proto.InternalMessageInfo

func (m *LinkMetaInfo) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *LinkMetaInfo) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

func (m *LinkMetaInfo) GetLink() string {
	if m != nil {
		return m.Link
	}
	return ""
}

func (m *LinkMetaInfo) GetAttachmentId() uint64 {
	if m != nil {
		return m.AttachmentId
	}
	return 0
}

func (m *LinkMetaInfo) GetAttachmentUrl() string {
	if m != nil {
		return m.AttachmentUrl
	}
	return ""
}

type StatusInfo struct {
	Id           string        `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	User         *UserInfo     `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty"`
	Content      string        `protobuf:"bytes,3,opt,name=content,proto3" json:"content,omitempty"`
	FromType     string        `protobuf:"bytes,4,opt,name=from_type,json=fromType,proto3" json:"from_type,omitempty"`
	StatusType   string        `protobuf:"bytes,5,opt,name=status_type,json=statusType,proto3" json:"status_type,omitempty"`
	Parent       *StatusInfo   `protobuf:"bytes,6,opt,name=parent,proto3" json:"parent,omitempty"`
	Origin       *StatusInfo   `protobuf:"bytes,7,opt,name=origin,proto3" json:"origin,omitempty"`
	CommentCount uint64        `protobuf:"varint,8,opt,name=comment_count,json=commentCount,proto3" json:"comment_count,omitempty"`
	LikeCount    uint64        `protobuf:"varint,9,opt,name=like_count,json=likeCount,proto3" json:"like_count,omitempty"`
	ForwardCount uint64        `protobuf:"varint,10,opt,name=forward_count,json=forwardCount,proto3" json:"forward_count,omitempty"`
	IsLiked      bool          `protobuf:"varint,11,opt,name=is_liked,json=isLiked,proto3" json:"is_liked,omitempty"`
	LinkMeta     *LinkMetaInfo `protobuf:"bytes,12,opt,name=link_meta,json=linkMeta,proto3" json:"link_meta,omitempty"`
	CreatedAt    uint64        `protobuf:"varint,13,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
}

func (m *StatusInfo) Reset()         { *m = StatusInfo{} }
func (m *StatusInfo) String() string { return proto.CompactTextString(m) }
func (*StatusInfo) ProtoMessage()    {}
func (*StatusInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_565883138c05ff17, []int{10}
}
func (m *StatusInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StatusInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StatusInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StatusInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StatusInfo.Merge(m, src)
}
func (m *StatusInfo) XXX_Size() int {
	return m.Size()
}
func (m *StatusInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_StatusInfo.DiscardUnknown(m)
}

var xxx_messageInfo_StatusInfo proto.InternalMessageInfo

func (m *StatusInfo) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *StatusInfo) GetUser() *UserInfo {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *StatusInfo) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *StatusInfo) GetFromType() string {
	if m != nil {
		return m.FromType
	}
	return ""
}

func (m *StatusInfo) GetStatusType() string {
	if m != nil {
		return m.StatusType
	}
	return ""
}

func (m *StatusInfo) GetParent() *StatusInfo {
	if m != nil {
		return m.Parent
	}
	return nil
}

func (m *StatusInfo) GetOrigin() *StatusInfo {
	if m != nil {
		return m.Origin
	}
	return nil
}

func (m *StatusInfo) GetCommentCount() uint64 {
	if m != nil {
		return m.CommentCount
	}
	return 0
}

func (m *StatusInfo) GetLikeCount() uint64 {
	if m != nil {
		return m.LikeCount
	}
	return 0
}

func (m *StatusInfo) GetForwardCount() uint64 {
	if m != nil {
		return m.ForwardCount
	}
	return 0
}

func (m *StatusInfo) GetIsLiked() bool {
	if m != nil {
		return m.IsLiked
	}
	return false
}

func (m *StatusInfo) GetLinkMeta() *LinkMetaInfo {
	if m != nil {
		return m.LinkMeta
	}
	return nil
}

func (m *StatusInfo) GetCreatedAt() uint64 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

type GetStatusRequest struct {
	CurrentUid uint64 `protobuf:"varint,1,opt,name=current_uid,json=currentUid,proto3" json:"current_uid,omitempty"`
	Statusid   string `protobuf:"bytes,2,opt,name=statusid,proto3" json:"statusid,omitempty"`
}

func (m *GetStatusRequest) Reset()         { *m = GetStatusRequest{} }
func (m *GetStatusRequest) String() string { return proto.CompactTextString(m) }
func (*GetStatusRequest) ProtoMessage()    {}
func (*GetStatusRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_565883138c05ff17, []int{11}
}
func (m *GetStatusRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetStatusRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetStatusRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetStatusRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetStatusRequest.Merge(m, src)
}
func (m *GetStatusRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetStatusRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetStatusRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetStatusRequest proto.InternalMessageInfo

func (m *GetStatusRequest) GetCurrentUid() uint64 {
	if m != nil {
		return m.CurrentUid
	}
	return 0
}

func (m *GetStatusRequest) GetStatusid() string {
	if m != nil {
		return m.Statusid
	}
	return ""
}

type GetStatusResponse struct {
	Code   uint64      `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Status *StatusInfo `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
}

func (m *GetStatusResponse) Reset()         { *m = GetStatusResponse{} }
func (m *GetStatusResponse) String() string { return proto.CompactTextString(m) }
func (*GetStatusResponse) ProtoMessage()    {}
func (*GetStatusResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_565883138c05ff17, []int{12}
}
func (m *GetStatusResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetStatusResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetStatusResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetStatusResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetStatusResponse.Merge(m, src)
}
func (m *GetStatusResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetStatusResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetStatusResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetStatusResponse proto.InternalMessageInfo

func (m *GetStatusResponse) GetCode() uint64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *GetStatusResponse) GetStatus() *StatusInfo {
	if m != nil {
		return m.Status
	}
	return nil
}

type PageQuick struct {
	Limit  uint64 `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	NextId string `protobuf:"bytes,2,opt,name=next_id,json=nextId,proto3" json:"next_id,omitempty"`
}

func (m *PageQuick) Reset()         { *m = PageQuick{} }
func (m *PageQuick) String() string { return proto.CompactTextString(m) }
func (*PageQuick) ProtoMessage()    {}
func (*PageQuick) Descriptor() ([]byte, []int) {
	return fileDescriptor_565883138c05ff17, []int{13}
}
func (m *PageQuick) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PageQuick) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PageQuick.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PageQuick) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PageQuick.Merge(m, src)
}
func (m *PageQuick) XXX_Size() int {
	return m.Size()
}
func (m *PageQuick) XXX_DiscardUnknown() {
	xxx_messageInfo_PageQuick.DiscardUnknown(m)
}

var xxx_messageInfo_PageQuick proto.InternalMessageInfo

func (m *PageQuick) GetLimit() uint64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *PageQuick) GetNextId() string {
	if m != nil {
		return m.NextId
	}
	return ""
}

type ListStatusRequest struct {
	CurrentUid uint64     `protobuf:"varint,1,opt,name=current_uid,json=currentUid,proto3" json:"current_uid,omitempty"`
	TargetUid  uint64     `protobuf:"varint,2,opt,name=target_uid,json=targetUid,proto3" json:"target_uid,omitempty"`
	ParrentId  string     `protobuf:"bytes,3,opt,name=parrent_id,json=parrentId,proto3" json:"parrent_id,omitempty"`
	FromTypes  []string   `protobuf:"bytes,4,rep,name=from_types,json=fromTypes,proto3" json:"from_types,omitempty"`
	Paginator  *PageQuick `protobuf:"bytes,5,opt,name=paginator,proto3" json:"paginator,omitempty"`
}

func (m *ListStatusRequest) Reset()         { *m = ListStatusRequest{} }
func (m *ListStatusRequest) String() string { return proto.CompactTextString(m) }
func (*ListStatusRequest) ProtoMessage()    {}
func (*ListStatusRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_565883138c05ff17, []int{14}
}
func (m *ListStatusRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListStatusRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListStatusRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListStatusRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListStatusRequest.Merge(m, src)
}
func (m *ListStatusRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListStatusRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListStatusRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListStatusRequest proto.InternalMessageInfo

func (m *ListStatusRequest) GetCurrentUid() uint64 {
	if m != nil {
		return m.CurrentUid
	}
	return 0
}

func (m *ListStatusRequest) GetTargetUid() uint64 {
	if m != nil {
		return m.TargetUid
	}
	return 0
}

func (m *ListStatusRequest) GetParrentId() string {
	if m != nil {
		return m.ParrentId
	}
	return ""
}

func (m *ListStatusRequest) GetFromTypes() []string {
	if m != nil {
		return m.FromTypes
	}
	return nil
}

func (m *ListStatusRequest) GetPaginator() *PageQuick {
	if m != nil {
		return m.Paginator
	}
	return nil
}

type ListStatusResponse struct {
	Code      uint64        `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Statuses  []*StatusInfo `protobuf:"bytes,2,rep,name=statuses,proto3" json:"statuses,omitempty"`
	Paginator *PageQuick    `protobuf:"bytes,3,opt,name=paginator,proto3" json:"paginator,omitempty"`
}

func (m *ListStatusResponse) Reset()         { *m = ListStatusResponse{} }
func (m *ListStatusResponse) String() string { return proto.CompactTextString(m) }
func (*ListStatusResponse) ProtoMessage()    {}
func (*ListStatusResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_565883138c05ff17, []int{15}
}
func (m *ListStatusResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListStatusResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListStatusResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListStatusResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListStatusResponse.Merge(m, src)
}
func (m *ListStatusResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListStatusResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListStatusResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListStatusResponse proto.InternalMessageInfo

func (m *ListStatusResponse) GetCode() uint64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *ListStatusResponse) GetStatuses() []*StatusInfo {
	if m != nil {
		return m.Statuses
	}
	return nil
}

func (m *ListStatusResponse) GetPaginator() *PageQuick {
	if m != nil {
		return m.Paginator
	}
	return nil
}

type CreateStatusRequest struct {
	CurrentUid uint64 `protobuf:"varint,1,opt,name=current_uid,json=currentUid,proto3" json:"current_uid,omitempty"`
	StatusType string `protobuf:"bytes,2,opt,name=status_type,json=statusType,proto3" json:"status_type,omitempty"`
	ParentId   string `protobuf:"bytes,3,opt,name=parent_id,json=parentId,proto3" json:"parent_id,omitempty"`
	Content    string `protobuf:"bytes,4,opt,name=content,proto3" json:"content,omitempty"`
	Meta       string `protobuf:"bytes,5,opt,name=meta,proto3" json:"meta,omitempty"`
	FromType   string `protobuf:"bytes,6,opt,name=from_type,json=fromType,proto3" json:"from_type,omitempty"`
}

func (m *CreateStatusRequest) Reset()         { *m = CreateStatusRequest{} }
func (m *CreateStatusRequest) String() string { return proto.CompactTextString(m) }
func (*CreateStatusRequest) ProtoMessage()    {}
func (*CreateStatusRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_565883138c05ff17, []int{16}
}
func (m *CreateStatusRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateStatusRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateStatusRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateStatusRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateStatusRequest.Merge(m, src)
}
func (m *CreateStatusRequest) XXX_Size() int {
	return m.Size()
}
func (m *CreateStatusRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateStatusRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateStatusRequest proto.InternalMessageInfo

func (m *CreateStatusRequest) GetCurrentUid() uint64 {
	if m != nil {
		return m.CurrentUid
	}
	return 0
}

func (m *CreateStatusRequest) GetStatusType() string {
	if m != nil {
		return m.StatusType
	}
	return ""
}

func (m *CreateStatusRequest) GetParentId() string {
	if m != nil {
		return m.ParentId
	}
	return ""
}

func (m *CreateStatusRequest) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *CreateStatusRequest) GetMeta() string {
	if m != nil {
		return m.Meta
	}
	return ""
}

func (m *CreateStatusRequest) GetFromType() string {
	if m != nil {
		return m.FromType
	}
	return ""
}

type CreateStatusResponse struct {
	Code   uint64      `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Status *StatusInfo `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
}

func (m *CreateStatusResponse) Reset()         { *m = CreateStatusResponse{} }
func (m *CreateStatusResponse) String() string { return proto.CompactTextString(m) }
func (*CreateStatusResponse) ProtoMessage()    {}
func (*CreateStatusResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_565883138c05ff17, []int{17}
}
func (m *CreateStatusResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateStatusResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateStatusResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateStatusResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateStatusResponse.Merge(m, src)
}
func (m *CreateStatusResponse) XXX_Size() int {
	return m.Size()
}
func (m *CreateStatusResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateStatusResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CreateStatusResponse proto.InternalMessageInfo

func (m *CreateStatusResponse) GetCode() uint64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *CreateStatusResponse) GetStatus() *StatusInfo {
	if m != nil {
		return m.Status
	}
	return nil
}

type DeleteStatusRequest struct {
	CurrentUid uint64 `protobuf:"varint,1,opt,name=current_uid,json=currentUid,proto3" json:"current_uid,omitempty"`
	Statusid   string `protobuf:"bytes,2,opt,name=statusid,proto3" json:"statusid,omitempty"`
}

func (m *DeleteStatusRequest) Reset()         { *m = DeleteStatusRequest{} }
func (m *DeleteStatusRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteStatusRequest) ProtoMessage()    {}
func (*DeleteStatusRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_565883138c05ff17, []int{18}
}
func (m *DeleteStatusRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteStatusRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteStatusRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteStatusRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteStatusRequest.Merge(m, src)
}
func (m *DeleteStatusRequest) XXX_Size() int {
	return m.Size()
}
func (m *DeleteStatusRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteStatusRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteStatusRequest proto.InternalMessageInfo

func (m *DeleteStatusRequest) GetCurrentUid() uint64 {
	if m != nil {
		return m.CurrentUid
	}
	return 0
}

func (m *DeleteStatusRequest) GetStatusid() string {
	if m != nil {
		return m.Statusid
	}
	return ""
}

type SimpleResponse struct {
	Code uint64 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
}

func (m *SimpleResponse) Reset()         { *m = SimpleResponse{} }
func (m *SimpleResponse) String() string { return proto.CompactTextString(m) }
func (*SimpleResponse) ProtoMessage()    {}
func (*SimpleResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_565883138c05ff17, []int{19}
}
func (m *SimpleResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SimpleResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SimpleResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SimpleResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SimpleResponse.Merge(m, src)
}
func (m *SimpleResponse) XXX_Size() int {
	return m.Size()
}
func (m *SimpleResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SimpleResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SimpleResponse proto.InternalMessageInfo

func (m *SimpleResponse) GetCode() uint64 {
	if m != nil {
		return m.Code
	}
	return 0
}

type LikeStatusRequest struct {
	CurrentUid uint64 `protobuf:"varint,1,opt,name=current_uid,json=currentUid,proto3" json:"current_uid,omitempty"`
	Statusid   string `protobuf:"bytes,2,opt,name=statusid,proto3" json:"statusid,omitempty"`
}

func (m *LikeStatusRequest) Reset()         { *m = LikeStatusRequest{} }
func (m *LikeStatusRequest) String() string { return proto.CompactTextString(m) }
func (*LikeStatusRequest) ProtoMessage()    {}
func (*LikeStatusRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_565883138c05ff17, []int{20}
}
func (m *LikeStatusRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LikeStatusRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LikeStatusRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LikeStatusRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LikeStatusRequest.Merge(m, src)
}
func (m *LikeStatusRequest) XXX_Size() int {
	return m.Size()
}
func (m *LikeStatusRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_LikeStatusRequest.DiscardUnknown(m)
}

var xxx_messageInfo_LikeStatusRequest proto.InternalMessageInfo

func (m *LikeStatusRequest) GetCurrentUid() uint64 {
	if m != nil {
		return m.CurrentUid
	}
	return 0
}

func (m *LikeStatusRequest) GetStatusid() string {
	if m != nil {
		return m.Statusid
	}
	return ""
}

type UnLikeStatusRequest struct {
	CurrentUid uint64 `protobuf:"varint,1,opt,name=current_uid,json=currentUid,proto3" json:"current_uid,omitempty"`
	Statusid   string `protobuf:"bytes,2,opt,name=statusid,proto3" json:"statusid,omitempty"`
}

func (m *UnLikeStatusRequest) Reset()         { *m = UnLikeStatusRequest{} }
func (m *UnLikeStatusRequest) String() string { return proto.CompactTextString(m) }
func (*UnLikeStatusRequest) ProtoMessage()    {}
func (*UnLikeStatusRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_565883138c05ff17, []int{21}
}
func (m *UnLikeStatusRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UnLikeStatusRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UnLikeStatusRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UnLikeStatusRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UnLikeStatusRequest.Merge(m, src)
}
func (m *UnLikeStatusRequest) XXX_Size() int {
	return m.Size()
}
func (m *UnLikeStatusRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UnLikeStatusRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UnLikeStatusRequest proto.InternalMessageInfo

func (m *UnLikeStatusRequest) GetCurrentUid() uint64 {
	if m != nil {
		return m.CurrentUid
	}
	return 0
}

func (m *UnLikeStatusRequest) GetStatusid() string {
	if m != nil {
		return m.Statusid
	}
	return ""
}

type FollowRequest struct {
	CurrentUid uint64 `protobuf:"varint,1,opt,name=current_uid,json=currentUid,proto3" json:"current_uid,omitempty"`
	TargetUid  uint64 `protobuf:"varint,2,opt,name=target_uid,json=targetUid,proto3" json:"target_uid,omitempty"`
}

func (m *FollowRequest) Reset()         { *m = FollowRequest{} }
func (m *FollowRequest) String() string { return proto.CompactTextString(m) }
func (*FollowRequest) ProtoMessage()    {}
func (*FollowRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_565883138c05ff17, []int{22}
}
func (m *FollowRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FollowRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FollowRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FollowRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FollowRequest.Merge(m, src)
}
func (m *FollowRequest) XXX_Size() int {
	return m.Size()
}
func (m *FollowRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_FollowRequest.DiscardUnknown(m)
}

var xxx_messageInfo_FollowRequest proto.InternalMessageInfo

func (m *FollowRequest) GetCurrentUid() uint64 {
	if m != nil {
		return m.CurrentUid
	}
	return 0
}

func (m *FollowRequest) GetTargetUid() uint64 {
	if m != nil {
		return m.TargetUid
	}
	return 0
}

type UnFollowRequest struct {
	CurrentUid uint64 `protobuf:"varint,1,opt,name=current_uid,json=currentUid,proto3" json:"current_uid,omitempty"`
	TargetUid  uint64 `protobuf:"varint,2,opt,name=target_uid,json=targetUid,proto3" json:"target_uid,omitempty"`
}

func (m *UnFollowRequest) Reset()         { *m = UnFollowRequest{} }
func (m *UnFollowRequest) String() string { return proto.CompactTextString(m) }
func (*UnFollowRequest) ProtoMessage()    {}
func (*UnFollowRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_565883138c05ff17, []int{23}
}
func (m *UnFollowRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UnFollowRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UnFollowRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UnFollowRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UnFollowRequest.Merge(m, src)
}
func (m *UnFollowRequest) XXX_Size() int {
	return m.Size()
}
func (m *UnFollowRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UnFollowRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UnFollowRequest proto.InternalMessageInfo

func (m *UnFollowRequest) GetCurrentUid() uint64 {
	if m != nil {
		return m.CurrentUid
	}
	return 0
}

func (m *UnFollowRequest) GetTargetUid() uint64 {
	if m != nil {
		return m.TargetUid
	}
	return 0
}

type RelationInfo struct {
	User         *UserInfo `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	RelationType string    `protobuf:"bytes,2,opt,name=relation_type,json=relationType,proto3" json:"relation_type,omitempty"`
	CreatedAt    uint64    `protobuf:"varint,3,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
}

func (m *RelationInfo) Reset()         { *m = RelationInfo{} }
func (m *RelationInfo) String() string { return proto.CompactTextString(m) }
func (*RelationInfo) ProtoMessage()    {}
func (*RelationInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_565883138c05ff17, []int{24}
}
func (m *RelationInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RelationInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RelationInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RelationInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RelationInfo.Merge(m, src)
}
func (m *RelationInfo) XXX_Size() int {
	return m.Size()
}
func (m *RelationInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_RelationInfo.DiscardUnknown(m)
}

var xxx_messageInfo_RelationInfo proto.InternalMessageInfo

func (m *RelationInfo) GetUser() *UserInfo {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *RelationInfo) GetRelationType() string {
	if m != nil {
		return m.RelationType
	}
	return ""
}

func (m *RelationInfo) GetCreatedAt() uint64 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

type ListRelationshipRequest struct {
	CurrentUid   uint64     `protobuf:"varint,1,opt,name=current_uid,json=currentUid,proto3" json:"current_uid,omitempty"`
	RelationType string     `protobuf:"bytes,2,opt,name=relation_type,json=relationType,proto3" json:"relation_type,omitempty"`
	Paginator    *PageQuick `protobuf:"bytes,3,opt,name=paginator,proto3" json:"paginator,omitempty"`
}

func (m *ListRelationshipRequest) Reset()         { *m = ListRelationshipRequest{} }
func (m *ListRelationshipRequest) String() string { return proto.CompactTextString(m) }
func (*ListRelationshipRequest) ProtoMessage()    {}
func (*ListRelationshipRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_565883138c05ff17, []int{25}
}
func (m *ListRelationshipRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListRelationshipRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListRelationshipRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListRelationshipRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListRelationshipRequest.Merge(m, src)
}
func (m *ListRelationshipRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListRelationshipRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListRelationshipRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListRelationshipRequest proto.InternalMessageInfo

func (m *ListRelationshipRequest) GetCurrentUid() uint64 {
	if m != nil {
		return m.CurrentUid
	}
	return 0
}

func (m *ListRelationshipRequest) GetRelationType() string {
	if m != nil {
		return m.RelationType
	}
	return ""
}

func (m *ListRelationshipRequest) GetPaginator() *PageQuick {
	if m != nil {
		return m.Paginator
	}
	return nil
}

type ListRelationshipResponse struct {
	Code      uint64          `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Relations []*RelationInfo `protobuf:"bytes,2,rep,name=relations,proto3" json:"relations,omitempty"`
	Paginator *PageQuick      `protobuf:"bytes,3,opt,name=paginator,proto3" json:"paginator,omitempty"`
}

func (m *ListRelationshipResponse) Reset()         { *m = ListRelationshipResponse{} }
func (m *ListRelationshipResponse) String() string { return proto.CompactTextString(m) }
func (*ListRelationshipResponse) ProtoMessage()    {}
func (*ListRelationshipResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_565883138c05ff17, []int{26}
}
func (m *ListRelationshipResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListRelationshipResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListRelationshipResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListRelationshipResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListRelationshipResponse.Merge(m, src)
}
func (m *ListRelationshipResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListRelationshipResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListRelationshipResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListRelationshipResponse proto.InternalMessageInfo

func (m *ListRelationshipResponse) GetCode() uint64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *ListRelationshipResponse) GetRelations() []*RelationInfo {
	if m != nil {
		return m.Relations
	}
	return nil
}

func (m *ListRelationshipResponse) GetPaginator() *PageQuick {
	if m != nil {
		return m.Paginator
	}
	return nil
}

func init() {
	proto.RegisterType((*SignInRequest)(nil), "socialsvc.SignInRequest")
	proto.RegisterType((*SignInResponse)(nil), "socialsvc.SignInResponse")
	proto.RegisterType((*UserInfo)(nil), "socialsvc.UserInfo")
	proto.RegisterType((*FindUserRequest)(nil), "socialsvc.FindUserRequest")
	proto.RegisterType((*FindUserResponse)(nil), "socialsvc.FindUserResponse")
	proto.RegisterType((*UpdateUserProfileRequest)(nil), "socialsvc.UpdateUserProfileRequest")
	proto.RegisterType((*UpdateUserAvatarRequest)(nil), "socialsvc.UpdateUserAvatarRequest")
	proto.RegisterType((*UpdateUserNameRequest)(nil), "socialsvc.UpdateUserNameRequest")
	proto.RegisterType((*UpdateUserResponse)(nil), "socialsvc.UpdateUserResponse")
	proto.RegisterType((*LinkMetaInfo)(nil), "socialsvc.LinkMetaInfo")
	proto.RegisterType((*StatusInfo)(nil), "socialsvc.StatusInfo")
	proto.RegisterType((*GetStatusRequest)(nil), "socialsvc.GetStatusRequest")
	proto.RegisterType((*GetStatusResponse)(nil), "socialsvc.GetStatusResponse")
	proto.RegisterType((*PageQuick)(nil), "socialsvc.PageQuick")
	proto.RegisterType((*ListStatusRequest)(nil), "socialsvc.ListStatusRequest")
	proto.RegisterType((*ListStatusResponse)(nil), "socialsvc.ListStatusResponse")
	proto.RegisterType((*CreateStatusRequest)(nil), "socialsvc.CreateStatusRequest")
	proto.RegisterType((*CreateStatusResponse)(nil), "socialsvc.CreateStatusResponse")
	proto.RegisterType((*DeleteStatusRequest)(nil), "socialsvc.DeleteStatusRequest")
	proto.RegisterType((*SimpleResponse)(nil), "socialsvc.SimpleResponse")
	proto.RegisterType((*LikeStatusRequest)(nil), "socialsvc.LikeStatusRequest")
	proto.RegisterType((*UnLikeStatusRequest)(nil), "socialsvc.UnLikeStatusRequest")
	proto.RegisterType((*FollowRequest)(nil), "socialsvc.FollowRequest")
	proto.RegisterType((*UnFollowRequest)(nil), "socialsvc.UnFollowRequest")
	proto.RegisterType((*RelationInfo)(nil), "socialsvc.RelationInfo")
	proto.RegisterType((*ListRelationshipRequest)(nil), "socialsvc.ListRelationshipRequest")
	proto.RegisterType((*ListRelationshipResponse)(nil), "socialsvc.ListRelationshipResponse")
}

func init() { proto.RegisterFile("socialsvc.proto", fileDescriptor_565883138c05ff17) }

var fileDescriptor_565883138c05ff17 = []byte{
	// 1595 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x58, 0xdd, 0x6f, 0x1b, 0x45,
	0x10, 0xef, 0xc5, 0x8e, 0xe3, 0x9b, 0xd8, 0xb1, 0xb3, 0x4e, 0x9b, 0xab, 0xd3, 0x26, 0xd5, 0x9a,
	0xaa, 0xb4, 0x28, 0x3d, 0x35, 0xe5, 0x43, 0xea, 0x5b, 0x29, 0x2d, 0x8a, 0x54, 0x68, 0x7a, 0x6d,
	0x90, 0x88, 0x90, 0xa2, 0xab, 0x6f, 0xe3, 0x2c, 0x39, 0xdf, 0x99, 0xbb, 0x75, 0x4b, 0x41, 0x42,
	0xa8, 0x48, 0x3c, 0x21, 0x81, 0xd4, 0x17, 0xe0, 0x9f, 0xe1, 0x09, 0x09, 0xf1, 0x54, 0x09, 0x1e,
	0x78, 0x44, 0x2d, 0x7f, 0x08, 0xda, 0x2f, 0xdf, 0x9e, 0xbf, 0x9a, 0xb4, 0x79, 0xbb, 0x9d, 0x99,
	0x9d, 0xf9, 0xcd, 0xec, 0x7c, 0xd9, 0x50, 0x4b, 0xe3, 0x36, 0xf5, 0xc3, 0xf4, 0x61, 0xfb, 0x72,
	0x2f, 0x89, 0x59, 0x8c, 0xec, 0x01, 0xa1, 0x79, 0xb3, 0x43, 0xd9, 0x7e, 0xff, 0xc1, 0xe5, 0x76,
	0xdc, 0x75, 0xbb, 0x84, 0xf9, 0x0f, 0x49, 0x92, 0x12, 0x97, 0x25, 0xfd, 0x34, 0x75, 0x03, 0xb2,
	0xc7, 0x12, 0x42, 0xdc, 0x4e, 0x1c, 0x77, 0x42, 0xc2, 0xf6, 0x69, 0x12, 0xf4, 0xfc, 0x84, 0x3d,
	0x76, 0xfd, 0x28, 0x8a, 0x99, 0xcf, 0x68, 0x1c, 0xa5, 0x52, 0x23, 0x6e, 0x41, 0xf5, 0x1e, 0xed,
	0x44, 0x9b, 0x91, 0x47, 0xbe, 0xe8, 0x93, 0x94, 0x21, 0x04, 0x45, 0xbf, 0xcf, 0xf6, 0x1d, 0xeb,
	0x9c, 0xf5, 0xa6, 0xed, 0x89, 0x6f, 0xfc, 0x2e, 0x2c, 0x68, 0xa1, 0xb4, 0x17, 0x47, 0x29, 0xe1,
	0x52, 0xed, 0x38, 0x20, 0x42, 0xaa, 0xe8, 0x89, 0x6f, 0x54, 0x87, 0xc2, 0xe7, 0x8f, 0x98, 0x33,
	0x23, 0x2e, 0xf2, 0x4f, 0xfc, 0xa7, 0x05, 0xe5, 0xed, 0x94, 0x24, 0x9b, 0xd1, 0x5e, 0xcc, 0xd9,
	0x7d, 0x1a, 0xa8, 0x1b, 0xfc, 0x13, 0x35, 0xa1, 0xdc, 0x4f, 0x49, 0x12, 0xf9, 0x5d, 0xa2, 0x6e,
	0x0d, 0xce, 0xc8, 0x81, 0xb9, 0x2e, 0x4d, 0x49, 0x4a, 0x03, 0xa7, 0x20, 0x58, 0xfa, 0x88, 0x4e,
	0x41, 0xa9, 0x43, 0xa2, 0x80, 0x24, 0x4e, 0x51, 0x30, 0xd4, 0x89, 0xd3, 0xbb, 0xf1, 0x03, 0x1a,
	0x12, 0x67, 0x56, 0xd2, 0xe5, 0x09, 0x2d, 0xc1, 0x2c, 0xe9, 0xfa, 0x34, 0x74, 0x4a, 0x82, 0x2c,
	0x0f, 0x5c, 0xbf, 0x1f, 0x04, 0x09, 0x49, 0x53, 0x67, 0x4e, 0xea, 0x57, 0x47, 0xae, 0xc7, 0x7f,
	0xe8, 0x33, 0x3f, 0x71, 0xca, 0x52, 0x8f, 0x3c, 0xe1, 0x16, 0xd4, 0x6e, 0xd1, 0x28, 0xe0, 0xfe,
	0xe8, 0x58, 0x8d, 0xb8, 0x84, 0x7b, 0x50, 0xcf, 0x84, 0xa6, 0xc4, 0xea, 0x02, 0x14, 0xb9, 0xab,
	0xc2, 0xed, 0xf9, 0x8d, 0xc6, 0xe5, 0xec, 0xa1, 0x75, 0xbc, 0x3c, 0x21, 0x80, 0xd6, 0x60, 0x9e,
	0xa6, 0xbb, 0x7b, 0x71, 0x18, 0xc6, 0x8f, 0x88, 0x8c, 0x45, 0xd9, 0x03, 0x9a, 0xde, 0x52, 0x14,
	0xfc, 0x83, 0x05, 0xce, 0x76, 0x2f, 0xf0, 0x19, 0xe1, 0x37, 0xb7, 0x92, 0x78, 0x8f, 0x86, 0x64,
	0x22, 0x40, 0x23, 0x7a, 0x33, 0x13, 0xa2, 0x57, 0x18, 0x1f, 0xbd, 0xe2, 0x84, 0xe8, 0xcd, 0xe6,
	0xa2, 0x87, 0xb7, 0x60, 0x39, 0x43, 0x73, 0x5d, 0x44, 0x6e, 0x32, 0x98, 0x16, 0x54, 0x7d, 0xc6,
	0xfc, 0xf6, 0x7e, 0x97, 0x44, 0x6c, 0x97, 0x06, 0x02, 0x53, 0xd1, 0xab, 0x64, 0xc4, 0xcd, 0x00,
	0xdf, 0x84, 0x93, 0x99, 0xc6, 0x8f, 0xfd, 0xee, 0x14, 0xe7, 0xa6, 0x24, 0x14, 0xbe, 0x0b, 0x28,
	0x53, 0x73, 0x2c, 0x6f, 0x83, 0x7f, 0xb6, 0xa0, 0x72, 0x9b, 0x46, 0x07, 0x1f, 0x11, 0xe6, 0x8b,
	0x14, 0x5f, 0x82, 0x59, 0x46, 0x59, 0x48, 0x54, 0xf1, 0xc8, 0x03, 0xb7, 0xb1, 0x1f, 0xa7, 0xba,
	0x30, 0xc4, 0x37, 0xa7, 0x85, 0x34, 0x3a, 0x50, 0xc1, 0x16, 0xdf, 0xa3, 0xd1, 0x28, 0x8e, 0x46,
	0x03, 0x9d, 0x87, 0x05, 0x43, 0xa8, 0x9f, 0x84, 0xea, 0x01, 0x8c, 0xab, 0xdb, 0x49, 0x88, 0xff,
	0x2e, 0x00, 0xdc, 0x63, 0x3e, 0xeb, 0xa7, 0x02, 0xd8, 0x02, 0xcc, 0xa8, 0x48, 0xd9, 0xde, 0x0c,
	0x0d, 0x0e, 0x9f, 0x7e, 0x0e, 0xcc, 0xb5, 0xe3, 0x88, 0x91, 0x88, 0xe9, 0x32, 0x54, 0x47, 0xb4,
	0x02, 0xf6, 0x5e, 0x12, 0x77, 0x77, 0xd9, 0xe3, 0x1e, 0x51, 0xc9, 0x51, 0xe6, 0x84, 0xfb, 0x8f,
	0x7b, 0x84, 0x67, 0x6d, 0x2a, 0xac, 0x4b, 0xb6, 0x84, 0x08, 0x92, 0x24, 0x04, 0xd6, 0xa1, 0xd4,
	0xf3, 0x13, 0xae, 0xb6, 0x24, 0x20, 0x9c, 0x34, 0x20, 0x64, 0xb8, 0x3d, 0x25, 0xc4, 0xc5, 0xe3,
	0x84, 0x76, 0x68, 0x24, 0x8a, 0x75, 0xb2, 0xb8, 0x14, 0xe2, 0x91, 0x6c, 0xc7, 0x5d, 0x11, 0xa1,
	0x76, 0xdc, 0x8f, 0x98, 0xa8, 0xe4, 0xa2, 0x57, 0x51, 0xc4, 0x1b, 0x9c, 0x86, 0xce, 0x02, 0x84,
	0xf4, 0x80, 0x28, 0x09, 0x5b, 0x48, 0xd8, 0x9c, 0x22, 0xd9, 0x2d, 0xa8, 0xee, 0xc5, 0xc9, 0x23,
	0x3f, 0x09, 0x94, 0x04, 0x48, 0x1d, 0x8a, 0x28, 0x85, 0x4e, 0x43, 0x99, 0xa6, 0xbb, 0xfc, 0x52,
	0xe0, 0xcc, 0x8b, 0xd2, 0x9c, 0xa3, 0xe9, 0x6d, 0x7e, 0x44, 0x6f, 0x83, 0xcd, 0x5f, 0x75, 0x97,
	0xf7, 0x66, 0xa7, 0x22, 0x50, 0x2f, 0x1b, 0xa8, 0xcd, 0xbc, 0xf1, 0xca, 0xa1, 0x3a, 0x71, 0x50,
	0xed, 0x84, 0xf8, 0x8c, 0x04, 0xbb, 0x3e, 0x73, 0xaa, 0x12, 0x94, 0xa2, 0x5c, 0x67, 0xf8, 0x0e,
	0xd4, 0x3f, 0x24, 0x4c, 0x7a, 0xac, 0xcb, 0x60, 0x0d, 0xe6, 0xdb, 0xfd, 0x24, 0x11, 0xe9, 0x30,
	0x28, 0x07, 0x50, 0xa4, 0x6d, 0x59, 0x15, 0x32, 0xf2, 0xaa, 0xc0, 0x6c, 0x6f, 0x70, 0xc6, 0x9f,
	0xc0, 0xa2, 0xa1, 0x70, 0x4a, 0x51, 0xac, 0x43, 0x49, 0x5e, 0x52, 0x39, 0x33, 0xe9, 0x05, 0xa4,
	0x10, 0xbe, 0x06, 0xf6, 0x96, 0xdf, 0x21, 0x77, 0xfb, 0xb4, 0x7d, 0xc0, 0xcb, 0x22, 0xa4, 0x5d,
	0xca, 0x94, 0x42, 0x79, 0x40, 0xcb, 0x30, 0x17, 0x91, 0x2f, 0x07, 0x65, 0x6f, 0x7b, 0x25, 0x7e,
	0xdc, 0x0c, 0xf0, 0xef, 0x16, 0x2c, 0xde, 0xa6, 0xe9, 0x51, 0xdd, 0x3c, 0x0b, 0xc0, 0xfc, 0xa4,
	0x43, 0x24, 0x5f, 0x76, 0x12, 0x5b, 0x52, 0x14, 0xbb, 0xe7, 0xcb, 0xfb, 0x83, 0x99, 0x62, 0x2b,
	0xca, 0xa6, 0x60, 0x0f, 0xd2, 0x39, 0x75, 0x8a, 0xe7, 0x0a, 0x9c, 0xad, 0xf3, 0x39, 0x45, 0x1b,
	0x60, 0xf7, 0xfc, 0x0e, 0x8d, 0x7c, 0x16, 0x27, 0x22, 0x9d, 0xe7, 0x37, 0x96, 0x8c, 0x08, 0x0c,
	0x7c, 0xf5, 0x32, 0x31, 0xfc, 0xa3, 0x05, 0xc8, 0xf4, 0x63, 0x4a, 0x74, 0xaf, 0xe8, 0x27, 0x22,
	0x3c, 0xbe, 0x85, 0xc9, 0xf1, 0x1d, 0x88, 0xe5, 0x11, 0x15, 0x0e, 0x87, 0xe8, 0x37, 0x0b, 0x1a,
	0x37, 0x44, 0x32, 0x1d, 0x31, 0xb6, 0x43, 0xf5, 0x3c, 0x33, 0x52, 0xcf, 0x2b, 0x1c, 0x4d, 0x3e,
	0xb8, 0x65, 0x49, 0xd8, 0x0c, 0xcc, 0x26, 0x52, 0xcc, 0x37, 0x11, 0x04, 0x45, 0x51, 0x1f, 0xb2,
	0x41, 0x88, 0xef, 0x7c, 0x63, 0x29, 0xe5, 0x1b, 0x0b, 0xfe, 0x14, 0x96, 0xf2, 0x0e, 0x1c, 0x5f,
	0xca, 0x7a, 0xd0, 0xf8, 0x80, 0x84, 0xe4, 0xc8, 0xb1, 0x99, 0x56, 0x5e, 0x6f, 0xf0, 0xc5, 0xa9,
	0xdb, 0xe3, 0x03, 0x79, 0x32, 0x50, 0xbc, 0xc5, 0xf3, 0xfd, 0xe0, 0x38, 0xed, 0x7a, 0xd0, 0xd8,
	0x8e, 0x8e, 0x59, 0xe7, 0x1d, 0xa8, 0xca, 0xa5, 0xe3, 0x98, 0x2a, 0x12, 0xdf, 0x85, 0xda, 0x76,
	0x74, 0xbc, 0x2a, 0xbf, 0x86, 0x8a, 0x47, 0x42, 0xb1, 0xe0, 0x8a, 0xb9, 0xa7, 0xe7, 0x9c, 0xf5,
	0xb2, 0x39, 0xd7, 0x82, 0x6a, 0xa2, 0x2e, 0x9a, 0x29, 0x5e, 0xd1, 0x44, 0x91, 0xe4, 0xf9, 0xe6,
	0x5c, 0x18, 0x6e, 0xce, 0x4f, 0x2d, 0x58, 0xe6, 0xf5, 0xae, 0x11, 0xa4, 0xfb, 0xb4, 0x77, 0x68,
	0xc7, 0x0e, 0x05, 0xe0, 0x55, 0x6a, 0xfe, 0x17, 0x0b, 0x9c, 0x51, 0x54, 0x53, 0xca, 0xe6, 0x1d,
	0xb0, 0xb5, 0x51, 0xdd, 0x8c, 0xcc, 0xc1, 0x65, 0xc6, 0xd7, 0xcb, 0x24, 0x5f, 0x05, 0xdb, 0xc6,
	0xaf, 0x35, 0x28, 0xdd, 0x13, 0x22, 0x68, 0x07, 0x4a, 0xf2, 0x27, 0x06, 0x72, 0xcc, 0x32, 0x35,
	0x7f, 0x9a, 0x34, 0x4f, 0x8f, 0xe1, 0x48, 0x47, 0xf0, 0xca, 0x93, 0xbf, 0xfe, 0x7b, 0x3a, 0x73,
	0x12, 0xcd, 0xb9, 0x29, 0xed, 0x44, 0x34, 0xda, 0x01, 0x54, 0x56, 0x9f, 0x2e, 0xfa, 0x0c, 0xca,
	0x7a, 0x29, 0x47, 0x4d, 0x43, 0xc7, 0xd0, 0x3a, 0xdf, 0x5c, 0x19, 0xcb, 0x53, 0x16, 0x96, 0x85,
	0x85, 0x45, 0x34, 0xeb, 0xf2, 0x84, 0xd9, 0x29, 0xa3, 0x92, 0xf8, 0x70, 0xd1, 0xf7, 0x16, 0x2c,
	0x8e, 0x2c, 0xe0, 0xa8, 0x65, 0xe6, 0xda, 0x84, 0xf5, 0xbc, 0x79, 0x76, 0xac, 0xd0, 0xc0, 0xe4,
	0xba, 0x30, 0x79, 0x01, 0x57, 0xa5, 0xa5, 0x9e, 0xbc, 0x7c, 0xcd, 0xba, 0xb4, 0xd3, 0xc0, 0x0b,
	0x39, 0x9a, 0x7b, 0xcd, 0xba, 0x84, 0x9e, 0x58, 0x50, 0x1f, 0xde, 0xbd, 0x11, 0x1e, 0x6b, 0x22,
	0xb7, 0x98, 0xbf, 0x0c, 0xc6, 0x5b, 0x02, 0xc6, 0x79, 0x5c, 0x91, 0x26, 0xe5, 0xcf, 0x21, 0x8e,
	0x02, 0x69, 0x64, 0x92, 0xa4, 0x41, 0x2c, 0xe4, 0xd7, 0x75, 0x74, 0x6e, 0xac, 0x7a, 0x63, 0x93,
	0x7f, 0x19, 0x00, 0x57, 0x00, 0xb8, 0xa8, 0x7d, 0xd6, 0x2b, 0x3d, 0x87, 0xb0, 0x84, 0x6b, 0x79,
	0xa2, 0x00, 0xf1, 0xad, 0x05, 0x15, 0x73, 0x4c, 0xa0, 0x55, 0xc3, 0xc0, 0x98, 0x01, 0xd8, 0x5c,
	0x9b, 0xc8, 0x1f, 0x81, 0x20, 0xfb, 0xa1, 0x2b, 0xcb, 0x5e, 0x43, 0xc8, 0x11, 0x05, 0x84, 0xaf,
	0xa0, 0x62, 0x4e, 0x93, 0x1c, 0x82, 0x31, 0x63, 0x66, 0x28, 0xb7, 0xcd, 0x91, 0x31, 0x6a, 0x3b,
	0x10, 0xf7, 0x87, 0x6c, 0x4b, 0xa2, 0xb0, 0x9d, 0x00, 0x64, 0xbd, 0x1f, 0x9d, 0xc9, 0x6d, 0x9d,
	0x07, 0x87, 0xb7, 0x9b, 0xbd, 0xbb, 0x32, 0xc1, 0xf7, 0x5c, 0xfd, 0xee, 0x06, 0x49, 0xfb, 0x6b,
	0x4e, 0x9c, 0x9c, 0xbf, 0x63, 0x46, 0xd1, 0x91, 0xfc, 0xed, 0x47, 0xda, 0xb2, 0xe1, 0xaf, 0x24,
	0x0a, 0xdb, 0x6d, 0xb0, 0x07, 0x4b, 0x2c, 0x32, 0x8b, 0x78, 0x78, 0x57, 0x6e, 0x9e, 0x19, 0xcf,
	0x1c, 0x6d, 0x22, 0x82, 0x21, 0x9b, 0x88, 0x34, 0x87, 0x7a, 0x3c, 0xa8, 0x7a, 0x99, 0x1b, 0x0a,
	0xea, 0xd0, 0xae, 0x9a, 0xcb, 0xe7, 0xd1, 0x0d, 0x10, 0x9f, 0x17, 0x76, 0xd6, 0x90, 0x11, 0xd8,
	0x94, 0xed, 0xd4, 0x50, 0xd5, 0x3c, 0xbb, 0xe8, 0x3b, 0x0b, 0x6a, 0xb2, 0x73, 0xcb, 0xdf, 0x2d,
	0x01, 0x09, 0x5e, 0xcf, 0xee, 0x55, 0x61, 0x77, 0x1d, 0x35, 0xb4, 0x9d, 0x24, 0xd3, 0xbc, 0x73,
	0x0a, 0x2d, 0x8d, 0x21, 0xbb, 0xe8, 0x1b, 0xa8, 0x73, 0x55, 0xbc, 0x20, 0xef, 0xd3, 0x2e, 0x09,
	0x69, 0x44, 0x5e, 0x0f, 0x85, 0xea, 0x6a, 0xa8, 0xae, 0xcd, 0x31, 0xa5, 0x76, 0xa7, 0x81, 0x16,
	0x87, 0x69, 0xa2, 0xbd, 0xd6, 0x87, 0xe7, 0x57, 0xae, 0xab, 0x4d, 0x18, 0xb9, 0xcd, 0xd6, 0x54,
	0x19, 0x05, 0xe6, 0xa2, 0x00, 0xd3, 0x42, 0x0b, 0xae, 0x9e, 0x64, 0xf2, 0x31, 0x16, 0x51, 0x2d,
	0x4f, 0x71, 0x51, 0x02, 0x25, 0xb9, 0xac, 0xe4, 0x26, 0x54, 0x6e, 0x7f, 0x99, 0x96, 0xd5, 0x2a,
	0xf8, 0xb8, 0x9e, 0xe9, 0x95, 0xff, 0xea, 0xf0, 0xbc, 0x3e, 0x85, 0x17, 0x87, 0xc9, 0xaa, 0xaa,
	0xca, 0x7a, 0x45, 0xca, 0x4d, 0xae, 0xa1, 0xbd, 0x69, 0x9a, 0xdd, 0xf7, 0x84, 0xdd, 0x2b, 0x18,
	0x65, 0x06, 0xfa, 0x51, 0x66, 0xd9, 0xc1, 0x8d, 0x51, 0x06, 0xb7, 0xfd, 0xbe, 0xf3, 0xc7, 0xf3,
	0x55, 0xeb, 0xd9, 0xf3, 0x55, 0xeb, 0xdf, 0xe7, 0xab, 0xd6, 0x4f, 0x2f, 0x56, 0x4f, 0x3c, 0x7b,
	0xb1, 0x7a, 0xe2, 0x9f, 0x17, 0xab, 0x27, 0x1e, 0x94, 0xc4, 0x5f, 0x87, 0x57, 0xff, 0x0f, 0x00,
	0x00, 0xff, 0xff, 0x4c, 0x66, 0xa6, 0x5a, 0x9f, 0x14, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// SocialClient is the client API for Social service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SocialClient interface {
	// SignIn verify the user auth and return a jwt
	SignIn(ctx context.Context, in *SignInRequest, opts ...grpc.CallOption) (*SignInResponse, error)
	//Find a user info by uid
	FindUser(ctx context.Context, in *FindUserRequest, opts ...grpc.CallOption) (*FindUserResponse, error)
	//update user info
	UpdateUserProfile(ctx context.Context, in *UpdateUserProfileRequest, opts ...grpc.CallOption) (*UpdateUserResponse, error)
	//update user avatar
	UpdateUserAvatar(ctx context.Context, in *UpdateUserAvatarRequest, opts ...grpc.CallOption) (*UpdateUserResponse, error)
	//update user username
	UpdateUserName(ctx context.Context, in *UpdateUserNameRequest, opts ...grpc.CallOption) (*UpdateUserResponse, error)
	//create new status
	CreateStatus(ctx context.Context, in *CreateStatusRequest, opts ...grpc.CallOption) (*CreateStatusResponse, error)
	//delete a status
	DeleteStatus(ctx context.Context, in *DeleteStatusRequest, opts ...grpc.CallOption) (*SimpleResponse, error)
	//like a status
	LikeStatus(ctx context.Context, in *LikeStatusRequest, opts ...grpc.CallOption) (*SimpleResponse, error)
	//unlike a status
	UnLikeStatus(ctx context.Context, in *UnLikeStatusRequest, opts ...grpc.CallOption) (*SimpleResponse, error)
	//query single status
	GetStatus(ctx context.Context, in *GetStatusRequest, opts ...grpc.CallOption) (*GetStatusResponse, error)
	//query batch status
	ListStatus(ctx context.Context, in *ListStatusRequest, opts ...grpc.CallOption) (*ListStatusResponse, error)
	//query recommended status
	ListRecommended(ctx context.Context, in *ListStatusRequest, opts ...grpc.CallOption) (*ListStatusResponse, error)
	//query time line
	ListUserTimeline(ctx context.Context, in *ListStatusRequest, opts ...grpc.CallOption) (*ListStatusResponse, error)
	//query related users
	ListRelationship(ctx context.Context, in *ListRelationshipRequest, opts ...grpc.CallOption) (*ListRelationshipResponse, error)
	//like a status
	Follow(ctx context.Context, in *FollowRequest, opts ...grpc.CallOption) (*SimpleResponse, error)
	//unlike a status
	UnFollow(ctx context.Context, in *UnFollowRequest, opts ...grpc.CallOption) (*SimpleResponse, error)
}

type socialClient struct {
	cc *grpc.ClientConn
}

func NewSocialClient(cc *grpc.ClientConn) SocialClient {
	return &socialClient{cc}
}

func (c *socialClient) SignIn(ctx context.Context, in *SignInRequest, opts ...grpc.CallOption) (*SignInResponse, error) {
	out := new(SignInResponse)
	err := c.cc.Invoke(ctx, "/socialsvc.Social/SignIn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialClient) FindUser(ctx context.Context, in *FindUserRequest, opts ...grpc.CallOption) (*FindUserResponse, error) {
	out := new(FindUserResponse)
	err := c.cc.Invoke(ctx, "/socialsvc.Social/FindUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialClient) UpdateUserProfile(ctx context.Context, in *UpdateUserProfileRequest, opts ...grpc.CallOption) (*UpdateUserResponse, error) {
	out := new(UpdateUserResponse)
	err := c.cc.Invoke(ctx, "/socialsvc.Social/UpdateUserProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialClient) UpdateUserAvatar(ctx context.Context, in *UpdateUserAvatarRequest, opts ...grpc.CallOption) (*UpdateUserResponse, error) {
	out := new(UpdateUserResponse)
	err := c.cc.Invoke(ctx, "/socialsvc.Social/UpdateUserAvatar", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialClient) UpdateUserName(ctx context.Context, in *UpdateUserNameRequest, opts ...grpc.CallOption) (*UpdateUserResponse, error) {
	out := new(UpdateUserResponse)
	err := c.cc.Invoke(ctx, "/socialsvc.Social/UpdateUserName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialClient) CreateStatus(ctx context.Context, in *CreateStatusRequest, opts ...grpc.CallOption) (*CreateStatusResponse, error) {
	out := new(CreateStatusResponse)
	err := c.cc.Invoke(ctx, "/socialsvc.Social/CreateStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialClient) DeleteStatus(ctx context.Context, in *DeleteStatusRequest, opts ...grpc.CallOption) (*SimpleResponse, error) {
	out := new(SimpleResponse)
	err := c.cc.Invoke(ctx, "/socialsvc.Social/DeleteStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialClient) LikeStatus(ctx context.Context, in *LikeStatusRequest, opts ...grpc.CallOption) (*SimpleResponse, error) {
	out := new(SimpleResponse)
	err := c.cc.Invoke(ctx, "/socialsvc.Social/LikeStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialClient) UnLikeStatus(ctx context.Context, in *UnLikeStatusRequest, opts ...grpc.CallOption) (*SimpleResponse, error) {
	out := new(SimpleResponse)
	err := c.cc.Invoke(ctx, "/socialsvc.Social/UnLikeStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialClient) GetStatus(ctx context.Context, in *GetStatusRequest, opts ...grpc.CallOption) (*GetStatusResponse, error) {
	out := new(GetStatusResponse)
	err := c.cc.Invoke(ctx, "/socialsvc.Social/GetStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialClient) ListStatus(ctx context.Context, in *ListStatusRequest, opts ...grpc.CallOption) (*ListStatusResponse, error) {
	out := new(ListStatusResponse)
	err := c.cc.Invoke(ctx, "/socialsvc.Social/ListStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialClient) ListRecommended(ctx context.Context, in *ListStatusRequest, opts ...grpc.CallOption) (*ListStatusResponse, error) {
	out := new(ListStatusResponse)
	err := c.cc.Invoke(ctx, "/socialsvc.Social/ListRecommended", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialClient) ListUserTimeline(ctx context.Context, in *ListStatusRequest, opts ...grpc.CallOption) (*ListStatusResponse, error) {
	out := new(ListStatusResponse)
	err := c.cc.Invoke(ctx, "/socialsvc.Social/ListUserTimeline", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialClient) ListRelationship(ctx context.Context, in *ListRelationshipRequest, opts ...grpc.CallOption) (*ListRelationshipResponse, error) {
	out := new(ListRelationshipResponse)
	err := c.cc.Invoke(ctx, "/socialsvc.Social/ListRelationship", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialClient) Follow(ctx context.Context, in *FollowRequest, opts ...grpc.CallOption) (*SimpleResponse, error) {
	out := new(SimpleResponse)
	err := c.cc.Invoke(ctx, "/socialsvc.Social/Follow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialClient) UnFollow(ctx context.Context, in *UnFollowRequest, opts ...grpc.CallOption) (*SimpleResponse, error) {
	out := new(SimpleResponse)
	err := c.cc.Invoke(ctx, "/socialsvc.Social/UnFollow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SocialServer is the server API for Social service.
type SocialServer interface {
	// SignIn verify the user auth and return a jwt
	SignIn(context.Context, *SignInRequest) (*SignInResponse, error)
	//Find a user info by uid
	FindUser(context.Context, *FindUserRequest) (*FindUserResponse, error)
	//update user info
	UpdateUserProfile(context.Context, *UpdateUserProfileRequest) (*UpdateUserResponse, error)
	//update user avatar
	UpdateUserAvatar(context.Context, *UpdateUserAvatarRequest) (*UpdateUserResponse, error)
	//update user username
	UpdateUserName(context.Context, *UpdateUserNameRequest) (*UpdateUserResponse, error)
	//create new status
	CreateStatus(context.Context, *CreateStatusRequest) (*CreateStatusResponse, error)
	//delete a status
	DeleteStatus(context.Context, *DeleteStatusRequest) (*SimpleResponse, error)
	//like a status
	LikeStatus(context.Context, *LikeStatusRequest) (*SimpleResponse, error)
	//unlike a status
	UnLikeStatus(context.Context, *UnLikeStatusRequest) (*SimpleResponse, error)
	//query single status
	GetStatus(context.Context, *GetStatusRequest) (*GetStatusResponse, error)
	//query batch status
	ListStatus(context.Context, *ListStatusRequest) (*ListStatusResponse, error)
	//query recommended status
	ListRecommended(context.Context, *ListStatusRequest) (*ListStatusResponse, error)
	//query time line
	ListUserTimeline(context.Context, *ListStatusRequest) (*ListStatusResponse, error)
	//query related users
	ListRelationship(context.Context, *ListRelationshipRequest) (*ListRelationshipResponse, error)
	//like a status
	Follow(context.Context, *FollowRequest) (*SimpleResponse, error)
	//unlike a status
	UnFollow(context.Context, *UnFollowRequest) (*SimpleResponse, error)
}

// UnimplementedSocialServer can be embedded to have forward compatible implementations.
type UnimplementedSocialServer struct {
}

func (*UnimplementedSocialServer) SignIn(ctx context.Context, req *SignInRequest) (*SignInResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignIn not implemented")
}
func (*UnimplementedSocialServer) FindUser(ctx context.Context, req *FindUserRequest) (*FindUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindUser not implemented")
}
func (*UnimplementedSocialServer) UpdateUserProfile(ctx context.Context, req *UpdateUserProfileRequest) (*UpdateUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserProfile not implemented")
}
func (*UnimplementedSocialServer) UpdateUserAvatar(ctx context.Context, req *UpdateUserAvatarRequest) (*UpdateUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserAvatar not implemented")
}
func (*UnimplementedSocialServer) UpdateUserName(ctx context.Context, req *UpdateUserNameRequest) (*UpdateUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserName not implemented")
}
func (*UnimplementedSocialServer) CreateStatus(ctx context.Context, req *CreateStatusRequest) (*CreateStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateStatus not implemented")
}
func (*UnimplementedSocialServer) DeleteStatus(ctx context.Context, req *DeleteStatusRequest) (*SimpleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteStatus not implemented")
}
func (*UnimplementedSocialServer) LikeStatus(ctx context.Context, req *LikeStatusRequest) (*SimpleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LikeStatus not implemented")
}
func (*UnimplementedSocialServer) UnLikeStatus(ctx context.Context, req *UnLikeStatusRequest) (*SimpleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnLikeStatus not implemented")
}
func (*UnimplementedSocialServer) GetStatus(ctx context.Context, req *GetStatusRequest) (*GetStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStatus not implemented")
}
func (*UnimplementedSocialServer) ListStatus(ctx context.Context, req *ListStatusRequest) (*ListStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListStatus not implemented")
}
func (*UnimplementedSocialServer) ListRecommended(ctx context.Context, req *ListStatusRequest) (*ListStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRecommended not implemented")
}
func (*UnimplementedSocialServer) ListUserTimeline(ctx context.Context, req *ListStatusRequest) (*ListStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUserTimeline not implemented")
}
func (*UnimplementedSocialServer) ListRelationship(ctx context.Context, req *ListRelationshipRequest) (*ListRelationshipResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRelationship not implemented")
}
func (*UnimplementedSocialServer) Follow(ctx context.Context, req *FollowRequest) (*SimpleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Follow not implemented")
}
func (*UnimplementedSocialServer) UnFollow(ctx context.Context, req *UnFollowRequest) (*SimpleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnFollow not implemented")
}

func RegisterSocialServer(s *grpc.Server, srv SocialServer) {
	s.RegisterService(&_Social_serviceDesc, srv)
}

func _Social_SignIn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignInRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServer).SignIn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/socialsvc.Social/SignIn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServer).SignIn(ctx, req.(*SignInRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Social_FindUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServer).FindUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/socialsvc.Social/FindUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServer).FindUser(ctx, req.(*FindUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Social_UpdateUserProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServer).UpdateUserProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/socialsvc.Social/UpdateUserProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServer).UpdateUserProfile(ctx, req.(*UpdateUserProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Social_UpdateUserAvatar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserAvatarRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServer).UpdateUserAvatar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/socialsvc.Social/UpdateUserAvatar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServer).UpdateUserAvatar(ctx, req.(*UpdateUserAvatarRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Social_UpdateUserName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServer).UpdateUserName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/socialsvc.Social/UpdateUserName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServer).UpdateUserName(ctx, req.(*UpdateUserNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Social_CreateStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServer).CreateStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/socialsvc.Social/CreateStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServer).CreateStatus(ctx, req.(*CreateStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Social_DeleteStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServer).DeleteStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/socialsvc.Social/DeleteStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServer).DeleteStatus(ctx, req.(*DeleteStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Social_LikeStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LikeStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServer).LikeStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/socialsvc.Social/LikeStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServer).LikeStatus(ctx, req.(*LikeStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Social_UnLikeStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnLikeStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServer).UnLikeStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/socialsvc.Social/UnLikeStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServer).UnLikeStatus(ctx, req.(*UnLikeStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Social_GetStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServer).GetStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/socialsvc.Social/GetStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServer).GetStatus(ctx, req.(*GetStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Social_ListStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServer).ListStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/socialsvc.Social/ListStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServer).ListStatus(ctx, req.(*ListStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Social_ListRecommended_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServer).ListRecommended(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/socialsvc.Social/ListRecommended",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServer).ListRecommended(ctx, req.(*ListStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Social_ListUserTimeline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServer).ListUserTimeline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/socialsvc.Social/ListUserTimeline",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServer).ListUserTimeline(ctx, req.(*ListStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Social_ListRelationship_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRelationshipRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServer).ListRelationship(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/socialsvc.Social/ListRelationship",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServer).ListRelationship(ctx, req.(*ListRelationshipRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Social_Follow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FollowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServer).Follow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/socialsvc.Social/Follow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServer).Follow(ctx, req.(*FollowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Social_UnFollow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnFollowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServer).UnFollow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/socialsvc.Social/UnFollow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServer).UnFollow(ctx, req.(*UnFollowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Social_serviceDesc = grpc.ServiceDesc{
	ServiceName: "socialsvc.Social",
	HandlerType: (*SocialServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SignIn",
			Handler:    _Social_SignIn_Handler,
		},
		{
			MethodName: "FindUser",
			Handler:    _Social_FindUser_Handler,
		},
		{
			MethodName: "UpdateUserProfile",
			Handler:    _Social_UpdateUserProfile_Handler,
		},
		{
			MethodName: "UpdateUserAvatar",
			Handler:    _Social_UpdateUserAvatar_Handler,
		},
		{
			MethodName: "UpdateUserName",
			Handler:    _Social_UpdateUserName_Handler,
		},
		{
			MethodName: "CreateStatus",
			Handler:    _Social_CreateStatus_Handler,
		},
		{
			MethodName: "DeleteStatus",
			Handler:    _Social_DeleteStatus_Handler,
		},
		{
			MethodName: "LikeStatus",
			Handler:    _Social_LikeStatus_Handler,
		},
		{
			MethodName: "UnLikeStatus",
			Handler:    _Social_UnLikeStatus_Handler,
		},
		{
			MethodName: "GetStatus",
			Handler:    _Social_GetStatus_Handler,
		},
		{
			MethodName: "ListStatus",
			Handler:    _Social_ListStatus_Handler,
		},
		{
			MethodName: "ListRecommended",
			Handler:    _Social_ListRecommended_Handler,
		},
		{
			MethodName: "ListUserTimeline",
			Handler:    _Social_ListUserTimeline_Handler,
		},
		{
			MethodName: "ListRelationship",
			Handler:    _Social_ListRelationship_Handler,
		},
		{
			MethodName: "Follow",
			Handler:    _Social_Follow_Handler,
		},
		{
			MethodName: "UnFollow",
			Handler:    _Social_UnFollow_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "socialsvc.proto",
}

func (m *SignInRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SignInRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Auth) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(len(m.Auth)))
		i += copy(dAtA[i:], m.Auth)
	}
	return i, nil
}

func (m *SignInResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SignInResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.Code))
	}
	if len(m.Jwt) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(len(m.Jwt)))
		i += copy(dAtA[i:], m.Jwt)
	}
	return i, nil
}

func (m *UserInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Uid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.Uid))
	}
	if len(m.Username) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(len(m.Username)))
		i += copy(dAtA[i:], m.Username)
	}
	if len(m.Misesid) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(len(m.Misesid)))
		i += copy(dAtA[i:], m.Misesid)
	}
	if len(m.Gender) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(len(m.Gender)))
		i += copy(dAtA[i:], m.Gender)
	}
	if len(m.Mobile) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(len(m.Mobile)))
		i += copy(dAtA[i:], m.Mobile)
	}
	if len(m.Email) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(len(m.Email)))
		i += copy(dAtA[i:], m.Email)
	}
	if len(m.Address) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(len(m.Address)))
		i += copy(dAtA[i:], m.Address)
	}
	if len(m.Avatar) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(len(m.Avatar)))
		i += copy(dAtA[i:], m.Avatar)
	}
	return i, nil
}

func (m *FindUserRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FindUserRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Uid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.Uid))
	}
	return i, nil
}

func (m *FindUserResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FindUserResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.Code))
	}
	if m.User != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.User.Size()))
		n1, err1 := m.User.MarshalTo(dAtA[i:])
		if err1 != nil {
			return 0, err1
		}
		i += n1
	}
	if m.IsFollowed {
		dAtA[i] = 0x18
		i++
		if m.IsFollowed {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *UpdateUserProfileRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateUserProfileRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Uid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.Uid))
	}
	if len(m.Gender) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(len(m.Gender)))
		i += copy(dAtA[i:], m.Gender)
	}
	if len(m.Mobile) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(len(m.Mobile)))
		i += copy(dAtA[i:], m.Mobile)
	}
	if len(m.Email) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(len(m.Email)))
		i += copy(dAtA[i:], m.Email)
	}
	if len(m.Address) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(len(m.Address)))
		i += copy(dAtA[i:], m.Address)
	}
	return i, nil
}

func (m *UpdateUserAvatarRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateUserAvatarRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Uid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.Uid))
	}
	if m.AttachmentId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.AttachmentId))
	}
	return i, nil
}

func (m *UpdateUserNameRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateUserNameRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Uid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.Uid))
	}
	if len(m.Username) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(len(m.Username)))
		i += copy(dAtA[i:], m.Username)
	}
	return i, nil
}

func (m *UpdateUserResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateUserResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.Code))
	}
	if m.User != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.User.Size()))
		n2, err2 := m.User.MarshalTo(dAtA[i:])
		if err2 != nil {
			return 0, err2
		}
		i += n2
	}
	return i, nil
}

func (m *LinkMetaInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LinkMetaInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Title) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(len(m.Title)))
		i += copy(dAtA[i:], m.Title)
	}
	if len(m.Host) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(len(m.Host)))
		i += copy(dAtA[i:], m.Host)
	}
	if len(m.Link) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(len(m.Link)))
		i += copy(dAtA[i:], m.Link)
	}
	if m.AttachmentId != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.AttachmentId))
	}
	if len(m.AttachmentUrl) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(len(m.AttachmentUrl)))
		i += copy(dAtA[i:], m.AttachmentUrl)
	}
	return i, nil
}

func (m *StatusInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StatusInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if m.User != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.User.Size()))
		n3, err3 := m.User.MarshalTo(dAtA[i:])
		if err3 != nil {
			return 0, err3
		}
		i += n3
	}
	if len(m.Content) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(len(m.Content)))
		i += copy(dAtA[i:], m.Content)
	}
	if len(m.FromType) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(len(m.FromType)))
		i += copy(dAtA[i:], m.FromType)
	}
	if len(m.StatusType) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(len(m.StatusType)))
		i += copy(dAtA[i:], m.StatusType)
	}
	if m.Parent != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.Parent.Size()))
		n4, err4 := m.Parent.MarshalTo(dAtA[i:])
		if err4 != nil {
			return 0, err4
		}
		i += n4
	}
	if m.Origin != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.Origin.Size()))
		n5, err5 := m.Origin.MarshalTo(dAtA[i:])
		if err5 != nil {
			return 0, err5
		}
		i += n5
	}
	if m.CommentCount != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.CommentCount))
	}
	if m.LikeCount != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.LikeCount))
	}
	if m.ForwardCount != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.ForwardCount))
	}
	if m.IsLiked {
		dAtA[i] = 0x58
		i++
		if m.IsLiked {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.LinkMeta != nil {
		dAtA[i] = 0x62
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.LinkMeta.Size()))
		n6, err6 := m.LinkMeta.MarshalTo(dAtA[i:])
		if err6 != nil {
			return 0, err6
		}
		i += n6
	}
	if m.CreatedAt != 0 {
		dAtA[i] = 0x68
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.CreatedAt))
	}
	return i, nil
}

func (m *GetStatusRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetStatusRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CurrentUid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.CurrentUid))
	}
	if len(m.Statusid) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(len(m.Statusid)))
		i += copy(dAtA[i:], m.Statusid)
	}
	return i, nil
}

func (m *GetStatusResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetStatusResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.Code))
	}
	if m.Status != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.Status.Size()))
		n7, err7 := m.Status.MarshalTo(dAtA[i:])
		if err7 != nil {
			return 0, err7
		}
		i += n7
	}
	return i, nil
}

func (m *PageQuick) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PageQuick) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Limit != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.Limit))
	}
	if len(m.NextId) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(len(m.NextId)))
		i += copy(dAtA[i:], m.NextId)
	}
	return i, nil
}

func (m *ListStatusRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListStatusRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CurrentUid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.CurrentUid))
	}
	if m.TargetUid != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.TargetUid))
	}
	if len(m.ParrentId) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(len(m.ParrentId)))
		i += copy(dAtA[i:], m.ParrentId)
	}
	if len(m.FromTypes) > 0 {
		for _, s := range m.FromTypes {
			dAtA[i] = 0x22
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.Paginator != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.Paginator.Size()))
		n8, err8 := m.Paginator.MarshalTo(dAtA[i:])
		if err8 != nil {
			return 0, err8
		}
		i += n8
	}
	return i, nil
}

func (m *ListStatusResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListStatusResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.Code))
	}
	if len(m.Statuses) > 0 {
		for _, msg := range m.Statuses {
			dAtA[i] = 0x12
			i++
			i = encodeVarintSocialsvc(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Paginator != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.Paginator.Size()))
		n9, err9 := m.Paginator.MarshalTo(dAtA[i:])
		if err9 != nil {
			return 0, err9
		}
		i += n9
	}
	return i, nil
}

func (m *CreateStatusRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateStatusRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CurrentUid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.CurrentUid))
	}
	if len(m.StatusType) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(len(m.StatusType)))
		i += copy(dAtA[i:], m.StatusType)
	}
	if len(m.ParentId) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(len(m.ParentId)))
		i += copy(dAtA[i:], m.ParentId)
	}
	if len(m.Content) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(len(m.Content)))
		i += copy(dAtA[i:], m.Content)
	}
	if len(m.Meta) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(len(m.Meta)))
		i += copy(dAtA[i:], m.Meta)
	}
	if len(m.FromType) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(len(m.FromType)))
		i += copy(dAtA[i:], m.FromType)
	}
	return i, nil
}

func (m *CreateStatusResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateStatusResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.Code))
	}
	if m.Status != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.Status.Size()))
		n10, err10 := m.Status.MarshalTo(dAtA[i:])
		if err10 != nil {
			return 0, err10
		}
		i += n10
	}
	return i, nil
}

func (m *DeleteStatusRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteStatusRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CurrentUid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.CurrentUid))
	}
	if len(m.Statusid) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(len(m.Statusid)))
		i += copy(dAtA[i:], m.Statusid)
	}
	return i, nil
}

func (m *SimpleResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SimpleResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.Code))
	}
	return i, nil
}

func (m *LikeStatusRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LikeStatusRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CurrentUid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.CurrentUid))
	}
	if len(m.Statusid) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(len(m.Statusid)))
		i += copy(dAtA[i:], m.Statusid)
	}
	return i, nil
}

func (m *UnLikeStatusRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UnLikeStatusRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CurrentUid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.CurrentUid))
	}
	if len(m.Statusid) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(len(m.Statusid)))
		i += copy(dAtA[i:], m.Statusid)
	}
	return i, nil
}

func (m *FollowRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FollowRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CurrentUid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.CurrentUid))
	}
	if m.TargetUid != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.TargetUid))
	}
	return i, nil
}

func (m *UnFollowRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UnFollowRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CurrentUid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.CurrentUid))
	}
	if m.TargetUid != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.TargetUid))
	}
	return i, nil
}

func (m *RelationInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RelationInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.User != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.User.Size()))
		n11, err11 := m.User.MarshalTo(dAtA[i:])
		if err11 != nil {
			return 0, err11
		}
		i += n11
	}
	if len(m.RelationType) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(len(m.RelationType)))
		i += copy(dAtA[i:], m.RelationType)
	}
	if m.CreatedAt != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.CreatedAt))
	}
	return i, nil
}

func (m *ListRelationshipRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListRelationshipRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CurrentUid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.CurrentUid))
	}
	if len(m.RelationType) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(len(m.RelationType)))
		i += copy(dAtA[i:], m.RelationType)
	}
	if m.Paginator != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.Paginator.Size()))
		n12, err12 := m.Paginator.MarshalTo(dAtA[i:])
		if err12 != nil {
			return 0, err12
		}
		i += n12
	}
	return i, nil
}

func (m *ListRelationshipResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListRelationshipResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.Code))
	}
	if len(m.Relations) > 0 {
		for _, msg := range m.Relations {
			dAtA[i] = 0x12
			i++
			i = encodeVarintSocialsvc(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Paginator != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.Paginator.Size()))
		n13, err13 := m.Paginator.MarshalTo(dAtA[i:])
		if err13 != nil {
			return 0, err13
		}
		i += n13
	}
	return i, nil
}

func encodeVarintSocialsvc(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *SignInRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Auth)
	if l > 0 {
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	return n
}

func (m *SignInResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovSocialsvc(uint64(m.Code))
	}
	l = len(m.Jwt)
	if l > 0 {
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	return n
}

func (m *UserInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Uid != 0 {
		n += 1 + sovSocialsvc(uint64(m.Uid))
	}
	l = len(m.Username)
	if l > 0 {
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	l = len(m.Misesid)
	if l > 0 {
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	l = len(m.Gender)
	if l > 0 {
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	l = len(m.Mobile)
	if l > 0 {
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	l = len(m.Email)
	if l > 0 {
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	l = len(m.Avatar)
	if l > 0 {
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	return n
}

func (m *FindUserRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Uid != 0 {
		n += 1 + sovSocialsvc(uint64(m.Uid))
	}
	return n
}

func (m *FindUserResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovSocialsvc(uint64(m.Code))
	}
	if m.User != nil {
		l = m.User.Size()
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	if m.IsFollowed {
		n += 2
	}
	return n
}

func (m *UpdateUserProfileRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Uid != 0 {
		n += 1 + sovSocialsvc(uint64(m.Uid))
	}
	l = len(m.Gender)
	if l > 0 {
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	l = len(m.Mobile)
	if l > 0 {
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	l = len(m.Email)
	if l > 0 {
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	return n
}

func (m *UpdateUserAvatarRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Uid != 0 {
		n += 1 + sovSocialsvc(uint64(m.Uid))
	}
	if m.AttachmentId != 0 {
		n += 1 + sovSocialsvc(uint64(m.AttachmentId))
	}
	return n
}

func (m *UpdateUserNameRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Uid != 0 {
		n += 1 + sovSocialsvc(uint64(m.Uid))
	}
	l = len(m.Username)
	if l > 0 {
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	return n
}

func (m *UpdateUserResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovSocialsvc(uint64(m.Code))
	}
	if m.User != nil {
		l = m.User.Size()
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	return n
}

func (m *LinkMetaInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	l = len(m.Host)
	if l > 0 {
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	l = len(m.Link)
	if l > 0 {
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	if m.AttachmentId != 0 {
		n += 1 + sovSocialsvc(uint64(m.AttachmentId))
	}
	l = len(m.AttachmentUrl)
	if l > 0 {
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	return n
}

func (m *StatusInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	if m.User != nil {
		l = m.User.Size()
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	l = len(m.FromType)
	if l > 0 {
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	l = len(m.StatusType)
	if l > 0 {
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	if m.Parent != nil {
		l = m.Parent.Size()
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	if m.Origin != nil {
		l = m.Origin.Size()
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	if m.CommentCount != 0 {
		n += 1 + sovSocialsvc(uint64(m.CommentCount))
	}
	if m.LikeCount != 0 {
		n += 1 + sovSocialsvc(uint64(m.LikeCount))
	}
	if m.ForwardCount != 0 {
		n += 1 + sovSocialsvc(uint64(m.ForwardCount))
	}
	if m.IsLiked {
		n += 2
	}
	if m.LinkMeta != nil {
		l = m.LinkMeta.Size()
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	if m.CreatedAt != 0 {
		n += 1 + sovSocialsvc(uint64(m.CreatedAt))
	}
	return n
}

func (m *GetStatusRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CurrentUid != 0 {
		n += 1 + sovSocialsvc(uint64(m.CurrentUid))
	}
	l = len(m.Statusid)
	if l > 0 {
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	return n
}

func (m *GetStatusResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovSocialsvc(uint64(m.Code))
	}
	if m.Status != nil {
		l = m.Status.Size()
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	return n
}

func (m *PageQuick) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Limit != 0 {
		n += 1 + sovSocialsvc(uint64(m.Limit))
	}
	l = len(m.NextId)
	if l > 0 {
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	return n
}

func (m *ListStatusRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CurrentUid != 0 {
		n += 1 + sovSocialsvc(uint64(m.CurrentUid))
	}
	if m.TargetUid != 0 {
		n += 1 + sovSocialsvc(uint64(m.TargetUid))
	}
	l = len(m.ParrentId)
	if l > 0 {
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	if len(m.FromTypes) > 0 {
		for _, s := range m.FromTypes {
			l = len(s)
			n += 1 + l + sovSocialsvc(uint64(l))
		}
	}
	if m.Paginator != nil {
		l = m.Paginator.Size()
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	return n
}

func (m *ListStatusResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovSocialsvc(uint64(m.Code))
	}
	if len(m.Statuses) > 0 {
		for _, e := range m.Statuses {
			l = e.Size()
			n += 1 + l + sovSocialsvc(uint64(l))
		}
	}
	if m.Paginator != nil {
		l = m.Paginator.Size()
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	return n
}

func (m *CreateStatusRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CurrentUid != 0 {
		n += 1 + sovSocialsvc(uint64(m.CurrentUid))
	}
	l = len(m.StatusType)
	if l > 0 {
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	l = len(m.ParentId)
	if l > 0 {
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	l = len(m.Meta)
	if l > 0 {
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	l = len(m.FromType)
	if l > 0 {
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	return n
}

func (m *CreateStatusResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovSocialsvc(uint64(m.Code))
	}
	if m.Status != nil {
		l = m.Status.Size()
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	return n
}

func (m *DeleteStatusRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CurrentUid != 0 {
		n += 1 + sovSocialsvc(uint64(m.CurrentUid))
	}
	l = len(m.Statusid)
	if l > 0 {
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	return n
}

func (m *SimpleResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovSocialsvc(uint64(m.Code))
	}
	return n
}

func (m *LikeStatusRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CurrentUid != 0 {
		n += 1 + sovSocialsvc(uint64(m.CurrentUid))
	}
	l = len(m.Statusid)
	if l > 0 {
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	return n
}

func (m *UnLikeStatusRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CurrentUid != 0 {
		n += 1 + sovSocialsvc(uint64(m.CurrentUid))
	}
	l = len(m.Statusid)
	if l > 0 {
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	return n
}

func (m *FollowRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CurrentUid != 0 {
		n += 1 + sovSocialsvc(uint64(m.CurrentUid))
	}
	if m.TargetUid != 0 {
		n += 1 + sovSocialsvc(uint64(m.TargetUid))
	}
	return n
}

func (m *UnFollowRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CurrentUid != 0 {
		n += 1 + sovSocialsvc(uint64(m.CurrentUid))
	}
	if m.TargetUid != 0 {
		n += 1 + sovSocialsvc(uint64(m.TargetUid))
	}
	return n
}

func (m *RelationInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.User != nil {
		l = m.User.Size()
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	l = len(m.RelationType)
	if l > 0 {
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	if m.CreatedAt != 0 {
		n += 1 + sovSocialsvc(uint64(m.CreatedAt))
	}
	return n
}

func (m *ListRelationshipRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CurrentUid != 0 {
		n += 1 + sovSocialsvc(uint64(m.CurrentUid))
	}
	l = len(m.RelationType)
	if l > 0 {
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	if m.Paginator != nil {
		l = m.Paginator.Size()
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	return n
}

func (m *ListRelationshipResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovSocialsvc(uint64(m.Code))
	}
	if len(m.Relations) > 0 {
		for _, e := range m.Relations {
			l = e.Size()
			n += 1 + l + sovSocialsvc(uint64(l))
		}
	}
	if m.Paginator != nil {
		l = m.Paginator.Size()
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	return n
}

func sovSocialsvc(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozSocialsvc(x uint64) (n int) {
	return sovSocialsvc(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SignInRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSocialsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SignInRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SignInRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Auth", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Auth = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSocialsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SignInResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSocialsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SignInResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SignInResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Jwt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Jwt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSocialsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSocialsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Username", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Username = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Misesid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Misesid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Gender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mobile", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Mobile = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Email", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Email = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Avatar", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Avatar = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSocialsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FindUserRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSocialsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FindUserRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FindUserRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSocialsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FindUserResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSocialsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FindUserResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FindUserResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.User == nil {
				m.User = &UserInfo{}
			}
			if err := m.User.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsFollowed", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsFollowed = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipSocialsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateUserProfileRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSocialsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateUserProfileRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateUserProfileRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Gender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mobile", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Mobile = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Email", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Email = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSocialsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateUserAvatarRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSocialsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateUserAvatarRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateUserAvatarRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttachmentId", wireType)
			}
			m.AttachmentId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AttachmentId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSocialsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateUserNameRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSocialsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateUserNameRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateUserNameRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Username", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Username = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSocialsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateUserResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSocialsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateUserResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateUserResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.User == nil {
				m.User = &UserInfo{}
			}
			if err := m.User.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSocialsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LinkMetaInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSocialsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LinkMetaInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LinkMetaInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Host", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Host = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Link", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Link = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttachmentId", wireType)
			}
			m.AttachmentId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AttachmentId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttachmentUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AttachmentUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSocialsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StatusInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSocialsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StatusInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StatusInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.User == nil {
				m.User = &UserInfo{}
			}
			if err := m.User.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FromType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatusType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StatusType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Parent", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Parent == nil {
				m.Parent = &StatusInfo{}
			}
			if err := m.Parent.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Origin", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Origin == nil {
				m.Origin = &StatusInfo{}
			}
			if err := m.Origin.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommentCount", wireType)
			}
			m.CommentCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CommentCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LikeCount", wireType)
			}
			m.LikeCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LikeCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForwardCount", wireType)
			}
			m.ForwardCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ForwardCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsLiked", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsLiked = bool(v != 0)
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LinkMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LinkMeta == nil {
				m.LinkMeta = &LinkMetaInfo{}
			}
			if err := m.LinkMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			m.CreatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatedAt |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSocialsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetStatusRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSocialsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetStatusRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetStatusRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentUid", wireType)
			}
			m.CurrentUid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentUid |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Statusid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Statusid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSocialsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetStatusResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSocialsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetStatusResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetStatusResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Status == nil {
				m.Status = &StatusInfo{}
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSocialsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PageQuick) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSocialsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PageQuick: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PageQuick: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NextId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSocialsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListStatusRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSocialsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListStatusRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListStatusRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentUid", wireType)
			}
			m.CurrentUid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentUid |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetUid", wireType)
			}
			m.TargetUid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TargetUid |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParrentId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ParrentId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromTypes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FromTypes = append(m.FromTypes, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Paginator", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Paginator == nil {
				m.Paginator = &PageQuick{}
			}
			if err := m.Paginator.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSocialsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListStatusResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSocialsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListStatusResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListStatusResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Statuses", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Statuses = append(m.Statuses, &StatusInfo{})
			if err := m.Statuses[len(m.Statuses)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Paginator", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Paginator == nil {
				m.Paginator = &PageQuick{}
			}
			if err := m.Paginator.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSocialsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateStatusRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSocialsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateStatusRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateStatusRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentUid", wireType)
			}
			m.CurrentUid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentUid |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatusType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StatusType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParentId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ParentId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Meta", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Meta = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FromType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSocialsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateStatusResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSocialsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateStatusResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateStatusResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Status == nil {
				m.Status = &StatusInfo{}
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSocialsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteStatusRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSocialsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteStatusRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteStatusRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentUid", wireType)
			}
			m.CurrentUid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentUid |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Statusid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Statusid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSocialsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SimpleResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSocialsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SimpleResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SimpleResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSocialsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LikeStatusRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSocialsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LikeStatusRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LikeStatusRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentUid", wireType)
			}
			m.CurrentUid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentUid |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Statusid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Statusid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSocialsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UnLikeStatusRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSocialsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UnLikeStatusRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UnLikeStatusRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentUid", wireType)
			}
			m.CurrentUid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentUid |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Statusid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Statusid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSocialsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FollowRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSocialsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FollowRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FollowRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentUid", wireType)
			}
			m.CurrentUid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentUid |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetUid", wireType)
			}
			m.TargetUid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TargetUid |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSocialsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UnFollowRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSocialsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UnFollowRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UnFollowRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentUid", wireType)
			}
			m.CurrentUid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentUid |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetUid", wireType)
			}
			m.TargetUid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TargetUid |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSocialsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RelationInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSocialsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RelationInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RelationInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.User == nil {
				m.User = &UserInfo{}
			}
			if err := m.User.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RelationType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RelationType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			m.CreatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatedAt |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSocialsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListRelationshipRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSocialsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListRelationshipRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListRelationshipRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentUid", wireType)
			}
			m.CurrentUid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentUid |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RelationType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RelationType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Paginator", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Paginator == nil {
				m.Paginator = &PageQuick{}
			}
			if err := m.Paginator.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSocialsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListRelationshipResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSocialsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListRelationshipResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListRelationshipResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Relations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Relations = append(m.Relations, &RelationInfo{})
			if err := m.Relations[len(m.Relations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Paginator", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Paginator == nil {
				m.Paginator = &PageQuick{}
			}
			if err := m.Paginator.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSocialsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSocialsvc(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSocialsvc
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSocialsvc
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthSocialsvc
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowSocialsvc
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipSocialsvc(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthSocialsvc
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthSocialsvc = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSocialsvc   = fmt.Errorf("proto: integer overflow")
)
