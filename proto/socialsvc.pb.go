// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: socialsvc.proto

// The package name determines the name of the directories that truss creates
// for `package echo;` truss will create the directory "echo-service".

package socialsvc

import (
	context "context"
	encoding_binary "encoding/binary"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type SignInRequest struct {
	Auth     string `protobuf:"bytes,1,opt,name=auth,proto3" json:"auth,omitempty"`
	Referrer string `protobuf:"bytes,2,opt,name=referrer,proto3" json:"referrer,omitempty"`
}

func (m *SignInRequest) Reset()         { *m = SignInRequest{} }
func (m *SignInRequest) String() string { return proto.CompactTextString(m) }
func (*SignInRequest) ProtoMessage()    {}
func (*SignInRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_565883138c05ff17, []int{0}
}
func (m *SignInRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SignInRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SignInRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SignInRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignInRequest.Merge(m, src)
}
func (m *SignInRequest) XXX_Size() int {
	return m.Size()
}
func (m *SignInRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SignInRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SignInRequest proto.InternalMessageInfo

func (m *SignInRequest) GetAuth() string {
	if m != nil {
		return m.Auth
	}
	return ""
}

func (m *SignInRequest) GetReferrer() string {
	if m != nil {
		return m.Referrer
	}
	return ""
}

type SignInResponse struct {
	Code      uint64 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Jwt       string `protobuf:"bytes,2,opt,name=jwt,proto3" json:"jwt,omitempty"`
	IsCreated bool   `protobuf:"varint,3,opt,name=is_created,json=isCreated,proto3" json:"is_created,omitempty"`
}

func (m *SignInResponse) Reset()         { *m = SignInResponse{} }
func (m *SignInResponse) String() string { return proto.CompactTextString(m) }
func (*SignInResponse) ProtoMessage()    {}
func (*SignInResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_565883138c05ff17, []int{1}
}
func (m *SignInResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SignInResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SignInResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SignInResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignInResponse.Merge(m, src)
}
func (m *SignInResponse) XXX_Size() int {
	return m.Size()
}
func (m *SignInResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SignInResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SignInResponse proto.InternalMessageInfo

func (m *SignInResponse) GetCode() uint64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *SignInResponse) GetJwt() string {
	if m != nil {
		return m.Jwt
	}
	return ""
}

func (m *SignInResponse) GetIsCreated() bool {
	if m != nil {
		return m.IsCreated
	}
	return false
}

type ComplaintRequest struct {
	CurrentUid uint64 `protobuf:"varint,1,opt,name=current_uid,json=currentUid,proto3" json:"current_uid,omitempty"`
	TargetType string `protobuf:"bytes,2,opt,name=target_type,json=targetType,proto3" json:"target_type,omitempty"`
	TargetId   string `protobuf:"bytes,3,opt,name=target_id,json=targetId,proto3" json:"target_id,omitempty"`
	Reason     string `protobuf:"bytes,4,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (m *ComplaintRequest) Reset()         { *m = ComplaintRequest{} }
func (m *ComplaintRequest) String() string { return proto.CompactTextString(m) }
func (*ComplaintRequest) ProtoMessage()    {}
func (*ComplaintRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_565883138c05ff17, []int{2}
}
func (m *ComplaintRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ComplaintRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ComplaintRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ComplaintRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ComplaintRequest.Merge(m, src)
}
func (m *ComplaintRequest) XXX_Size() int {
	return m.Size()
}
func (m *ComplaintRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ComplaintRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ComplaintRequest proto.InternalMessageInfo

func (m *ComplaintRequest) GetCurrentUid() uint64 {
	if m != nil {
		return m.CurrentUid
	}
	return 0
}

func (m *ComplaintRequest) GetTargetType() string {
	if m != nil {
		return m.TargetType
	}
	return ""
}

func (m *ComplaintRequest) GetTargetId() string {
	if m != nil {
		return m.TargetId
	}
	return ""
}

func (m *ComplaintRequest) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

type ComplaintResponse struct {
	Code uint64 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
}

func (m *ComplaintResponse) Reset()         { *m = ComplaintResponse{} }
func (m *ComplaintResponse) String() string { return proto.CompactTextString(m) }
func (*ComplaintResponse) ProtoMessage()    {}
func (*ComplaintResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_565883138c05ff17, []int{3}
}
func (m *ComplaintResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ComplaintResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ComplaintResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ComplaintResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ComplaintResponse.Merge(m, src)
}
func (m *ComplaintResponse) XXX_Size() int {
	return m.Size()
}
func (m *ComplaintResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ComplaintResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ComplaintResponse proto.InternalMessageInfo

func (m *ComplaintResponse) GetCode() uint64 {
	if m != nil {
		return m.Code
	}
	return 0
}

type UserAvatar struct {
	Small      string `protobuf:"bytes,1,opt,name=small,proto3" json:"small,omitempty"`
	Medium     string `protobuf:"bytes,2,opt,name=medium,proto3" json:"medium,omitempty"`
	Large      string `protobuf:"bytes,3,opt,name=large,proto3" json:"large,omitempty"`
	NftAssetId string `protobuf:"bytes,4,opt,name=nft_asset_id,json=nftAssetId,proto3" json:"nft_asset_id,omitempty"`
}

func (m *UserAvatar) Reset()         { *m = UserAvatar{} }
func (m *UserAvatar) String() string { return proto.CompactTextString(m) }
func (*UserAvatar) ProtoMessage()    {}
func (*UserAvatar) Descriptor() ([]byte, []int) {
	return fileDescriptor_565883138c05ff17, []int{4}
}
func (m *UserAvatar) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserAvatar) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserAvatar.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserAvatar) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserAvatar.Merge(m, src)
}
func (m *UserAvatar) XXX_Size() int {
	return m.Size()
}
func (m *UserAvatar) XXX_DiscardUnknown() {
	xxx_messageInfo_UserAvatar.DiscardUnknown(m)
}

var xxx_messageInfo_UserAvatar proto.InternalMessageInfo

func (m *UserAvatar) GetSmall() string {
	if m != nil {
		return m.Small
	}
	return ""
}

func (m *UserAvatar) GetMedium() string {
	if m != nil {
		return m.Medium
	}
	return ""
}

func (m *UserAvatar) GetLarge() string {
	if m != nil {
		return m.Large
	}
	return ""
}

func (m *UserAvatar) GetNftAssetId() string {
	if m != nil {
		return m.NftAssetId
	}
	return ""
}

type UserInfo struct {
	Uid             uint64      `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Username        string      `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	Misesid         string      `protobuf:"bytes,3,opt,name=misesid,proto3" json:"misesid,omitempty"`
	Gender          string      `protobuf:"bytes,4,opt,name=gender,proto3" json:"gender,omitempty"`
	Mobile          string      `protobuf:"bytes,5,opt,name=mobile,proto3" json:"mobile,omitempty"`
	Email           string      `protobuf:"bytes,6,opt,name=email,proto3" json:"email,omitempty"`
	Address         string      `protobuf:"bytes,7,opt,name=address,proto3" json:"address,omitempty"`
	Avatar          string      `protobuf:"bytes,8,opt,name=avatar,proto3" json:"avatar,omitempty"`
	IsFollowed      bool        `protobuf:"varint,9,opt,name=is_followed,json=isFollowed,proto3" json:"is_followed,omitempty"`
	IsBlocked       bool        `protobuf:"varint,10,opt,name=is_blocked,json=isBlocked,proto3" json:"is_blocked,omitempty"`
	FollowingsCount uint32      `protobuf:"varint,11,opt,name=followings_count,json=followingsCount,proto3" json:"followings_count,omitempty"`
	FansCount       uint32      `protobuf:"varint,12,opt,name=fans_count,json=fansCount,proto3" json:"fans_count,omitempty"`
	LikedCount      uint32      `protobuf:"varint,13,opt,name=liked_count,json=likedCount,proto3" json:"liked_count,omitempty"`
	NewFansCount    uint32      `protobuf:"varint,14,opt,name=new_fans_count,json=newFansCount,proto3" json:"new_fans_count,omitempty"`
	AvatarUrl       *UserAvatar `protobuf:"bytes,15,opt,name=avatar_url,json=avatarUrl,proto3" json:"avatar_url,omitempty"`
	IsAirdropped    bool        `protobuf:"varint,16,opt,name=is_airdropped,json=isAirdropped,proto3" json:"is_airdropped,omitempty"`
	AirdropStatus   bool        `protobuf:"varint,17,opt,name=airdrop_status,json=airdropStatus,proto3" json:"airdrop_status,omitempty"`
	IsLogined       bool        `protobuf:"varint,18,opt,name=is_logined,json=isLogined,proto3" json:"is_logined,omitempty"`
	HelpMisesid     string      `protobuf:"bytes,19,opt,name=help_misesid,json=helpMisesid,proto3" json:"help_misesid,omitempty"`
	Intro           string      `protobuf:"bytes,20,opt,name=intro,proto3" json:"intro,omitempty"`
}

func (m *UserInfo) Reset()         { *m = UserInfo{} }
func (m *UserInfo) String() string { return proto.CompactTextString(m) }
func (*UserInfo) ProtoMessage()    {}
func (*UserInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_565883138c05ff17, []int{5}
}
func (m *UserInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserInfo.Merge(m, src)
}
func (m *UserInfo) XXX_Size() int {
	return m.Size()
}
func (m *UserInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_UserInfo.DiscardUnknown(m)
}

var xxx_messageInfo_UserInfo proto.InternalMessageInfo

func (m *UserInfo) GetUid() uint64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *UserInfo) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *UserInfo) GetMisesid() string {
	if m != nil {
		return m.Misesid
	}
	return ""
}

func (m *UserInfo) GetGender() string {
	if m != nil {
		return m.Gender
	}
	return ""
}

func (m *UserInfo) GetMobile() string {
	if m != nil {
		return m.Mobile
	}
	return ""
}

func (m *UserInfo) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *UserInfo) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *UserInfo) GetAvatar() string {
	if m != nil {
		return m.Avatar
	}
	return ""
}

func (m *UserInfo) GetIsFollowed() bool {
	if m != nil {
		return m.IsFollowed
	}
	return false
}

func (m *UserInfo) GetIsBlocked() bool {
	if m != nil {
		return m.IsBlocked
	}
	return false
}

func (m *UserInfo) GetFollowingsCount() uint32 {
	if m != nil {
		return m.FollowingsCount
	}
	return 0
}

func (m *UserInfo) GetFansCount() uint32 {
	if m != nil {
		return m.FansCount
	}
	return 0
}

func (m *UserInfo) GetLikedCount() uint32 {
	if m != nil {
		return m.LikedCount
	}
	return 0
}

func (m *UserInfo) GetNewFansCount() uint32 {
	if m != nil {
		return m.NewFansCount
	}
	return 0
}

func (m *UserInfo) GetAvatarUrl() *UserAvatar {
	if m != nil {
		return m.AvatarUrl
	}
	return nil
}

func (m *UserInfo) GetIsAirdropped() bool {
	if m != nil {
		return m.IsAirdropped
	}
	return false
}

func (m *UserInfo) GetAirdropStatus() bool {
	if m != nil {
		return m.AirdropStatus
	}
	return false
}

func (m *UserInfo) GetIsLogined() bool {
	if m != nil {
		return m.IsLogined
	}
	return false
}

func (m *UserInfo) GetHelpMisesid() string {
	if m != nil {
		return m.HelpMisesid
	}
	return ""
}

func (m *UserInfo) GetIntro() string {
	if m != nil {
		return m.Intro
	}
	return ""
}

type FindMisesUserRequest struct {
	Misesid    string `protobuf:"bytes,1,opt,name=misesid,proto3" json:"misesid,omitempty"`
	CurrentUid uint64 `protobuf:"varint,2,opt,name=current_uid,json=currentUid,proto3" json:"current_uid,omitempty"`
}

func (m *FindMisesUserRequest) Reset()         { *m = FindMisesUserRequest{} }
func (m *FindMisesUserRequest) String() string { return proto.CompactTextString(m) }
func (*FindMisesUserRequest) ProtoMessage()    {}
func (*FindMisesUserRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_565883138c05ff17, []int{6}
}
func (m *FindMisesUserRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FindMisesUserRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FindMisesUserRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FindMisesUserRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FindMisesUserRequest.Merge(m, src)
}
func (m *FindMisesUserRequest) XXX_Size() int {
	return m.Size()
}
func (m *FindMisesUserRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_FindMisesUserRequest.DiscardUnknown(m)
}

var xxx_messageInfo_FindMisesUserRequest proto.InternalMessageInfo

func (m *FindMisesUserRequest) GetMisesid() string {
	if m != nil {
		return m.Misesid
	}
	return ""
}

func (m *FindMisesUserRequest) GetCurrentUid() uint64 {
	if m != nil {
		return m.CurrentUid
	}
	return 0
}

type FindMisesUserResponse struct {
	Code       uint64    `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	User       *UserInfo `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty"`
	IsFollowed bool      `protobuf:"varint,3,opt,name=is_followed,json=isFollowed,proto3" json:"is_followed,omitempty"`
}

func (m *FindMisesUserResponse) Reset()         { *m = FindMisesUserResponse{} }
func (m *FindMisesUserResponse) String() string { return proto.CompactTextString(m) }
func (*FindMisesUserResponse) ProtoMessage()    {}
func (*FindMisesUserResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_565883138c05ff17, []int{7}
}
func (m *FindMisesUserResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FindMisesUserResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FindMisesUserResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FindMisesUserResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FindMisesUserResponse.Merge(m, src)
}
func (m *FindMisesUserResponse) XXX_Size() int {
	return m.Size()
}
func (m *FindMisesUserResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_FindMisesUserResponse.DiscardUnknown(m)
}

var xxx_messageInfo_FindMisesUserResponse proto.InternalMessageInfo

func (m *FindMisesUserResponse) GetCode() uint64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *FindMisesUserResponse) GetUser() *UserInfo {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *FindMisesUserResponse) GetIsFollowed() bool {
	if m != nil {
		return m.IsFollowed
	}
	return false
}

type FindUserRequest struct {
	Uid        uint64 `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	CurrentUid uint64 `protobuf:"varint,2,opt,name=current_uid,json=currentUid,proto3" json:"current_uid,omitempty"`
}

func (m *FindUserRequest) Reset()         { *m = FindUserRequest{} }
func (m *FindUserRequest) String() string { return proto.CompactTextString(m) }
func (*FindUserRequest) ProtoMessage()    {}
func (*FindUserRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_565883138c05ff17, []int{8}
}
func (m *FindUserRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FindUserRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FindUserRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FindUserRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FindUserRequest.Merge(m, src)
}
func (m *FindUserRequest) XXX_Size() int {
	return m.Size()
}
func (m *FindUserRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_FindUserRequest.DiscardUnknown(m)
}

var xxx_messageInfo_FindUserRequest proto.InternalMessageInfo

func (m *FindUserRequest) GetUid() uint64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *FindUserRequest) GetCurrentUid() uint64 {
	if m != nil {
		return m.CurrentUid
	}
	return 0
}

type FindUserResponse struct {
	Code       uint64    `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	User       *UserInfo `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty"`
	IsFollowed bool      `protobuf:"varint,3,opt,name=is_followed,json=isFollowed,proto3" json:"is_followed,omitempty"`
}

func (m *FindUserResponse) Reset()         { *m = FindUserResponse{} }
func (m *FindUserResponse) String() string { return proto.CompactTextString(m) }
func (*FindUserResponse) ProtoMessage()    {}
func (*FindUserResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_565883138c05ff17, []int{9}
}
func (m *FindUserResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FindUserResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FindUserResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FindUserResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FindUserResponse.Merge(m, src)
}
func (m *FindUserResponse) XXX_Size() int {
	return m.Size()
}
func (m *FindUserResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_FindUserResponse.DiscardUnknown(m)
}

var xxx_messageInfo_FindUserResponse proto.InternalMessageInfo

func (m *FindUserResponse) GetCode() uint64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *FindUserResponse) GetUser() *UserInfo {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *FindUserResponse) GetIsFollowed() bool {
	if m != nil {
		return m.IsFollowed
	}
	return false
}

type UpdateUserProfileRequest struct {
	Uid     uint64 `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Gender  string `protobuf:"bytes,2,opt,name=gender,proto3" json:"gender,omitempty"`
	Mobile  string `protobuf:"bytes,3,opt,name=mobile,proto3" json:"mobile,omitempty"`
	Email   string `protobuf:"bytes,4,opt,name=email,proto3" json:"email,omitempty"`
	Address string `protobuf:"bytes,5,opt,name=address,proto3" json:"address,omitempty"`
	Intro   string `protobuf:"bytes,6,opt,name=intro,proto3" json:"intro,omitempty"`
}

func (m *UpdateUserProfileRequest) Reset()         { *m = UpdateUserProfileRequest{} }
func (m *UpdateUserProfileRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateUserProfileRequest) ProtoMessage()    {}
func (*UpdateUserProfileRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_565883138c05ff17, []int{10}
}
func (m *UpdateUserProfileRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateUserProfileRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateUserProfileRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateUserProfileRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateUserProfileRequest.Merge(m, src)
}
func (m *UpdateUserProfileRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpdateUserProfileRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateUserProfileRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateUserProfileRequest proto.InternalMessageInfo

func (m *UpdateUserProfileRequest) GetUid() uint64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *UpdateUserProfileRequest) GetGender() string {
	if m != nil {
		return m.Gender
	}
	return ""
}

func (m *UpdateUserProfileRequest) GetMobile() string {
	if m != nil {
		return m.Mobile
	}
	return ""
}

func (m *UpdateUserProfileRequest) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *UpdateUserProfileRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *UpdateUserProfileRequest) GetIntro() string {
	if m != nil {
		return m.Intro
	}
	return ""
}

type UpdateUserAvatarRequest struct {
	Uid            uint64 `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	AttachmentPath string `protobuf:"bytes,2,opt,name=attachment_path,json=attachmentPath,proto3" json:"attachment_path,omitempty"`
	NftAssetId     string `protobuf:"bytes,3,opt,name=nft_asset_id,json=nftAssetId,proto3" json:"nft_asset_id,omitempty"`
}

func (m *UpdateUserAvatarRequest) Reset()         { *m = UpdateUserAvatarRequest{} }
func (m *UpdateUserAvatarRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateUserAvatarRequest) ProtoMessage()    {}
func (*UpdateUserAvatarRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_565883138c05ff17, []int{11}
}
func (m *UpdateUserAvatarRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateUserAvatarRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateUserAvatarRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateUserAvatarRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateUserAvatarRequest.Merge(m, src)
}
func (m *UpdateUserAvatarRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpdateUserAvatarRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateUserAvatarRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateUserAvatarRequest proto.InternalMessageInfo

func (m *UpdateUserAvatarRequest) GetUid() uint64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *UpdateUserAvatarRequest) GetAttachmentPath() string {
	if m != nil {
		return m.AttachmentPath
	}
	return ""
}

func (m *UpdateUserAvatarRequest) GetNftAssetId() string {
	if m != nil {
		return m.NftAssetId
	}
	return ""
}

type UpdateUserNameRequest struct {
	Uid      uint64 `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Username string `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
}

func (m *UpdateUserNameRequest) Reset()         { *m = UpdateUserNameRequest{} }
func (m *UpdateUserNameRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateUserNameRequest) ProtoMessage()    {}
func (*UpdateUserNameRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_565883138c05ff17, []int{12}
}
func (m *UpdateUserNameRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateUserNameRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateUserNameRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateUserNameRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateUserNameRequest.Merge(m, src)
}
func (m *UpdateUserNameRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpdateUserNameRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateUserNameRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateUserNameRequest proto.InternalMessageInfo

func (m *UpdateUserNameRequest) GetUid() uint64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *UpdateUserNameRequest) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

type UpdateUserResponse struct {
	Code uint64    `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	User *UserInfo `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty"`
}

func (m *UpdateUserResponse) Reset()         { *m = UpdateUserResponse{} }
func (m *UpdateUserResponse) String() string { return proto.CompactTextString(m) }
func (*UpdateUserResponse) ProtoMessage()    {}
func (*UpdateUserResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_565883138c05ff17, []int{13}
}
func (m *UpdateUserResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateUserResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateUserResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateUserResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateUserResponse.Merge(m, src)
}
func (m *UpdateUserResponse) XXX_Size() int {
	return m.Size()
}
func (m *UpdateUserResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateUserResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateUserResponse proto.InternalMessageInfo

func (m *UpdateUserResponse) GetCode() uint64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *UpdateUserResponse) GetUser() *UserInfo {
	if m != nil {
		return m.User
	}
	return nil
}

type LinkMetaInfo struct {
	Title     string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Host      string `protobuf:"bytes,2,opt,name=host,proto3" json:"host,omitempty"`
	Link      string `protobuf:"bytes,3,opt,name=link,proto3" json:"link,omitempty"`
	ImagePath string `protobuf:"bytes,4,opt,name=image_path,json=imagePath,proto3" json:"image_path,omitempty"`
	ImageUrl  string `protobuf:"bytes,5,opt,name=image_url,json=imageUrl,proto3" json:"image_url,omitempty"`
}

func (m *LinkMetaInfo) Reset()         { *m = LinkMetaInfo{} }
func (m *LinkMetaInfo) String() string { return proto.CompactTextString(m) }
func (*LinkMetaInfo) ProtoMessage()    {}
func (*LinkMetaInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_565883138c05ff17, []int{14}
}
func (m *LinkMetaInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LinkMetaInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LinkMetaInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LinkMetaInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LinkMetaInfo.Merge(m, src)
}
func (m *LinkMetaInfo) XXX_Size() int {
	return m.Size()
}
func (m *LinkMetaInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_LinkMetaInfo.DiscardUnknown(m)
}

var xxx_messageInfo_LinkMetaInfo proto.InternalMessageInfo

func (m *LinkMetaInfo) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *LinkMetaInfo) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

func (m *LinkMetaInfo) GetLink() string {
	if m != nil {
		return m.Link
	}
	return ""
}

func (m *LinkMetaInfo) GetImagePath() string {
	if m != nil {
		return m.ImagePath
	}
	return ""
}

func (m *LinkMetaInfo) GetImageUrl() string {
	if m != nil {
		return m.ImageUrl
	}
	return ""
}

type ImageMetaInfo struct {
	Images      []string `protobuf:"bytes,1,rep,name=images,proto3" json:"images,omitempty"`
	ThumbImages []string `protobuf:"bytes,2,rep,name=thumb_images,json=thumbImages,proto3" json:"thumb_images,omitempty"`
}

func (m *ImageMetaInfo) Reset()         { *m = ImageMetaInfo{} }
func (m *ImageMetaInfo) String() string { return proto.CompactTextString(m) }
func (*ImageMetaInfo) ProtoMessage()    {}
func (*ImageMetaInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_565883138c05ff17, []int{15}
}
func (m *ImageMetaInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ImageMetaInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ImageMetaInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ImageMetaInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ImageMetaInfo.Merge(m, src)
}
func (m *ImageMetaInfo) XXX_Size() int {
	return m.Size()
}
func (m *ImageMetaInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ImageMetaInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ImageMetaInfo proto.InternalMessageInfo

func (m *ImageMetaInfo) GetImages() []string {
	if m != nil {
		return m.Images
	}
	return nil
}

func (m *ImageMetaInfo) GetThumbImages() []string {
	if m != nil {
		return m.ThumbImages
	}
	return nil
}

type StatusInfo struct {
	Id                    string         `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	User                  *UserInfo      `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty"`
	Content               string         `protobuf:"bytes,3,opt,name=content,proto3" json:"content,omitempty"`
	FromType              string         `protobuf:"bytes,4,opt,name=from_type,json=fromType,proto3" json:"from_type,omitempty"`
	StatusType            string         `protobuf:"bytes,5,opt,name=status_type,json=statusType,proto3" json:"status_type,omitempty"`
	Parent                *StatusInfo    `protobuf:"bytes,6,opt,name=parent,proto3" json:"parent,omitempty"`
	Origin                *StatusInfo    `protobuf:"bytes,7,opt,name=origin,proto3" json:"origin,omitempty"`
	CommentCount          uint64         `protobuf:"varint,8,opt,name=comment_count,json=commentCount,proto3" json:"comment_count,omitempty"`
	LikeCount             uint64         `protobuf:"varint,9,opt,name=like_count,json=likeCount,proto3" json:"like_count,omitempty"`
	ForwardCount          uint64         `protobuf:"varint,10,opt,name=forward_count,json=forwardCount,proto3" json:"forward_count,omitempty"`
	IsLiked               bool           `protobuf:"varint,11,opt,name=is_liked,json=isLiked,proto3" json:"is_liked,omitempty"`
	LinkMeta              *LinkMetaInfo  `protobuf:"bytes,12,opt,name=link_meta,json=linkMeta,proto3" json:"link_meta,omitempty"`
	CreatedAt             uint64         `protobuf:"varint,13,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	ImageMeta             *ImageMetaInfo `protobuf:"bytes,14,opt,name=image_meta,json=imageMeta,proto3" json:"image_meta,omitempty"`
	IsPublic              bool           `protobuf:"varint,15,opt,name=is_public,json=isPublic,proto3" json:"is_public,omitempty"`
	HideTime              uint64         `protobuf:"varint,16,opt,name=hide_time,json=hideTime,proto3" json:"hide_time,omitempty"`
	ParentStatusIsDeleted bool           `protobuf:"varint,17,opt,name=parent_status_is_deleted,json=parentStatusIsDeleted,proto3" json:"parent_status_is_deleted,omitempty"`
	ParentStatusIsBlacked bool           `protobuf:"varint,18,opt,name=parent_status_is_blacked,json=parentStatusIsBlacked,proto3" json:"parent_status_is_blacked,omitempty"`
}

func (m *StatusInfo) Reset()         { *m = StatusInfo{} }
func (m *StatusInfo) String() string { return proto.CompactTextString(m) }
func (*StatusInfo) ProtoMessage()    {}
func (*StatusInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_565883138c05ff17, []int{16}
}
func (m *StatusInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StatusInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StatusInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StatusInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StatusInfo.Merge(m, src)
}
func (m *StatusInfo) XXX_Size() int {
	return m.Size()
}
func (m *StatusInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_StatusInfo.DiscardUnknown(m)
}

var xxx_messageInfo_StatusInfo proto.InternalMessageInfo

func (m *StatusInfo) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *StatusInfo) GetUser() *UserInfo {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *StatusInfo) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *StatusInfo) GetFromType() string {
	if m != nil {
		return m.FromType
	}
	return ""
}

func (m *StatusInfo) GetStatusType() string {
	if m != nil {
		return m.StatusType
	}
	return ""
}

func (m *StatusInfo) GetParent() *StatusInfo {
	if m != nil {
		return m.Parent
	}
	return nil
}

func (m *StatusInfo) GetOrigin() *StatusInfo {
	if m != nil {
		return m.Origin
	}
	return nil
}

func (m *StatusInfo) GetCommentCount() uint64 {
	if m != nil {
		return m.CommentCount
	}
	return 0
}

func (m *StatusInfo) GetLikeCount() uint64 {
	if m != nil {
		return m.LikeCount
	}
	return 0
}

func (m *StatusInfo) GetForwardCount() uint64 {
	if m != nil {
		return m.ForwardCount
	}
	return 0
}

func (m *StatusInfo) GetIsLiked() bool {
	if m != nil {
		return m.IsLiked
	}
	return false
}

func (m *StatusInfo) GetLinkMeta() *LinkMetaInfo {
	if m != nil {
		return m.LinkMeta
	}
	return nil
}

func (m *StatusInfo) GetCreatedAt() uint64 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

func (m *StatusInfo) GetImageMeta() *ImageMetaInfo {
	if m != nil {
		return m.ImageMeta
	}
	return nil
}

func (m *StatusInfo) GetIsPublic() bool {
	if m != nil {
		return m.IsPublic
	}
	return false
}

func (m *StatusInfo) GetHideTime() uint64 {
	if m != nil {
		return m.HideTime
	}
	return 0
}

func (m *StatusInfo) GetParentStatusIsDeleted() bool {
	if m != nil {
		return m.ParentStatusIsDeleted
	}
	return false
}

func (m *StatusInfo) GetParentStatusIsBlacked() bool {
	if m != nil {
		return m.ParentStatusIsBlacked
	}
	return false
}

type GetStatusRequest struct {
	CurrentUid uint64 `protobuf:"varint,1,opt,name=current_uid,json=currentUid,proto3" json:"current_uid,omitempty"`
	Statusid   string `protobuf:"bytes,2,opt,name=statusid,proto3" json:"statusid,omitempty"`
}

func (m *GetStatusRequest) Reset()         { *m = GetStatusRequest{} }
func (m *GetStatusRequest) String() string { return proto.CompactTextString(m) }
func (*GetStatusRequest) ProtoMessage()    {}
func (*GetStatusRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_565883138c05ff17, []int{17}
}
func (m *GetStatusRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetStatusRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetStatusRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetStatusRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetStatusRequest.Merge(m, src)
}
func (m *GetStatusRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetStatusRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetStatusRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetStatusRequest proto.InternalMessageInfo

func (m *GetStatusRequest) GetCurrentUid() uint64 {
	if m != nil {
		return m.CurrentUid
	}
	return 0
}

func (m *GetStatusRequest) GetStatusid() string {
	if m != nil {
		return m.Statusid
	}
	return ""
}

type GetStatusResponse struct {
	Code   uint64      `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Status *StatusInfo `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
}

func (m *GetStatusResponse) Reset()         { *m = GetStatusResponse{} }
func (m *GetStatusResponse) String() string { return proto.CompactTextString(m) }
func (*GetStatusResponse) ProtoMessage()    {}
func (*GetStatusResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_565883138c05ff17, []int{18}
}
func (m *GetStatusResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetStatusResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetStatusResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetStatusResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetStatusResponse.Merge(m, src)
}
func (m *GetStatusResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetStatusResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetStatusResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetStatusResponse proto.InternalMessageInfo

func (m *GetStatusResponse) GetCode() uint64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *GetStatusResponse) GetStatus() *StatusInfo {
	if m != nil {
		return m.Status
	}
	return nil
}

type PageQuick struct {
	Limit  uint64 `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	NextId string `protobuf:"bytes,2,opt,name=next_id,json=nextId,proto3" json:"next_id,omitempty"`
	Total  uint64 `protobuf:"varint,3,opt,name=total,proto3" json:"total,omitempty"`
}

func (m *PageQuick) Reset()         { *m = PageQuick{} }
func (m *PageQuick) String() string { return proto.CompactTextString(m) }
func (*PageQuick) ProtoMessage()    {}
func (*PageQuick) Descriptor() ([]byte, []int) {
	return fileDescriptor_565883138c05ff17, []int{19}
}
func (m *PageQuick) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PageQuick) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PageQuick.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PageQuick) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PageQuick.Merge(m, src)
}
func (m *PageQuick) XXX_Size() int {
	return m.Size()
}
func (m *PageQuick) XXX_DiscardUnknown() {
	xxx_messageInfo_PageQuick.DiscardUnknown(m)
}

var xxx_messageInfo_PageQuick proto.InternalMessageInfo

func (m *PageQuick) GetLimit() uint64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *PageQuick) GetNextId() string {
	if m != nil {
		return m.NextId
	}
	return ""
}

func (m *PageQuick) GetTotal() uint64 {
	if m != nil {
		return m.Total
	}
	return 0
}

type Page struct {
	TotalRecords uint64 `protobuf:"varint,1,opt,name=total_records,json=totalRecords,proto3" json:"total_records,omitempty"`
	PageSize     uint64 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	PageNum      uint64 `protobuf:"varint,3,opt,name=page_num,json=pageNum,proto3" json:"page_num,omitempty"`
	TotalPage    uint64 `protobuf:"varint,4,opt,name=total_page,json=totalPage,proto3" json:"total_page,omitempty"`
}

func (m *Page) Reset()         { *m = Page{} }
func (m *Page) String() string { return proto.CompactTextString(m) }
func (*Page) ProtoMessage()    {}
func (*Page) Descriptor() ([]byte, []int) {
	return fileDescriptor_565883138c05ff17, []int{20}
}
func (m *Page) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Page) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Page.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Page) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Page.Merge(m, src)
}
func (m *Page) XXX_Size() int {
	return m.Size()
}
func (m *Page) XXX_DiscardUnknown() {
	xxx_messageInfo_Page.DiscardUnknown(m)
}

var xxx_messageInfo_Page proto.InternalMessageInfo

func (m *Page) GetTotalRecords() uint64 {
	if m != nil {
		return m.TotalRecords
	}
	return 0
}

func (m *Page) GetPageSize() uint64 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *Page) GetPageNum() uint64 {
	if m != nil {
		return m.PageNum
	}
	return 0
}

func (m *Page) GetTotalPage() uint64 {
	if m != nil {
		return m.TotalPage
	}
	return 0
}

type ListStatusRequest struct {
	CurrentUid uint64     `protobuf:"varint,1,opt,name=current_uid,json=currentUid,proto3" json:"current_uid,omitempty"`
	TargetUid  uint64     `protobuf:"varint,2,opt,name=target_uid,json=targetUid,proto3" json:"target_uid,omitempty"`
	ParentId   string     `protobuf:"bytes,3,opt,name=parent_id,json=parentId,proto3" json:"parent_id,omitempty"`
	FromTypes  []string   `protobuf:"bytes,4,rep,name=from_types,json=fromTypes,proto3" json:"from_types,omitempty"`
	Paginator  *PageQuick `protobuf:"bytes,5,opt,name=paginator,proto3" json:"paginator,omitempty"`
}

func (m *ListStatusRequest) Reset()         { *m = ListStatusRequest{} }
func (m *ListStatusRequest) String() string { return proto.CompactTextString(m) }
func (*ListStatusRequest) ProtoMessage()    {}
func (*ListStatusRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_565883138c05ff17, []int{21}
}
func (m *ListStatusRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListStatusRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListStatusRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListStatusRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListStatusRequest.Merge(m, src)
}
func (m *ListStatusRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListStatusRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListStatusRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListStatusRequest proto.InternalMessageInfo

func (m *ListStatusRequest) GetCurrentUid() uint64 {
	if m != nil {
		return m.CurrentUid
	}
	return 0
}

func (m *ListStatusRequest) GetTargetUid() uint64 {
	if m != nil {
		return m.TargetUid
	}
	return 0
}

func (m *ListStatusRequest) GetParentId() string {
	if m != nil {
		return m.ParentId
	}
	return ""
}

func (m *ListStatusRequest) GetFromTypes() []string {
	if m != nil {
		return m.FromTypes
	}
	return nil
}

func (m *ListStatusRequest) GetPaginator() *PageQuick {
	if m != nil {
		return m.Paginator
	}
	return nil
}

type ListStatusResponse struct {
	Code      uint64        `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Statuses  []*StatusInfo `protobuf:"bytes,2,rep,name=statuses,proto3" json:"statuses,omitempty"`
	Paginator *PageQuick    `protobuf:"bytes,3,opt,name=paginator,proto3" json:"paginator,omitempty"`
}

func (m *ListStatusResponse) Reset()         { *m = ListStatusResponse{} }
func (m *ListStatusResponse) String() string { return proto.CompactTextString(m) }
func (*ListStatusResponse) ProtoMessage()    {}
func (*ListStatusResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_565883138c05ff17, []int{22}
}
func (m *ListStatusResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListStatusResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListStatusResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListStatusResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListStatusResponse.Merge(m, src)
}
func (m *ListStatusResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListStatusResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListStatusResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListStatusResponse proto.InternalMessageInfo

func (m *ListStatusResponse) GetCode() uint64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *ListStatusResponse) GetStatuses() []*StatusInfo {
	if m != nil {
		return m.Statuses
	}
	return nil
}

func (m *ListStatusResponse) GetPaginator() *PageQuick {
	if m != nil {
		return m.Paginator
	}
	return nil
}

type PageChannelUserRequest struct {
	Misesid   string `protobuf:"bytes,1,opt,name=misesid,proto3" json:"misesid,omitempty"`
	Paginator *Page  `protobuf:"bytes,2,opt,name=paginator,proto3" json:"paginator,omitempty"`
}

func (m *PageChannelUserRequest) Reset()         { *m = PageChannelUserRequest{} }
func (m *PageChannelUserRequest) String() string { return proto.CompactTextString(m) }
func (*PageChannelUserRequest) ProtoMessage()    {}
func (*PageChannelUserRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_565883138c05ff17, []int{23}
}
func (m *PageChannelUserRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PageChannelUserRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PageChannelUserRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PageChannelUserRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PageChannelUserRequest.Merge(m, src)
}
func (m *PageChannelUserRequest) XXX_Size() int {
	return m.Size()
}
func (m *PageChannelUserRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PageChannelUserRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PageChannelUserRequest proto.InternalMessageInfo

func (m *PageChannelUserRequest) GetMisesid() string {
	if m != nil {
		return m.Misesid
	}
	return ""
}

func (m *PageChannelUserRequest) GetPaginator() *Page {
	if m != nil {
		return m.Paginator
	}
	return nil
}

type ChannelUserInfo struct {
	Id             string    `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ChannelId      string    `protobuf:"bytes,2,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	ValidState     int32     `protobuf:"varint,3,opt,name=valid_state,json=validState,proto3" json:"valid_state,omitempty"`
	Amount         uint64    `protobuf:"varint,4,opt,name=amount,proto3" json:"amount,omitempty"`
	TxId           string    `protobuf:"bytes,5,opt,name=tx_id,json=txId,proto3" json:"tx_id,omitempty"`
	User           *UserInfo `protobuf:"bytes,6,opt,name=user,proto3" json:"user,omitempty"`
	AirdropState   int32     `protobuf:"varint,7,opt,name=airdrop_state,json=airdropState,proto3" json:"airdrop_state,omitempty"`
	AirdropTime    uint64    `protobuf:"varint,8,opt,name=airdrop_time,json=airdropTime,proto3" json:"airdrop_time,omitempty"`
	CreatedAt      uint64    `protobuf:"varint,9,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	ChannelUid     uint64    `protobuf:"varint,10,opt,name=channel_uid,json=channelUid,proto3" json:"channel_uid,omitempty"`
	ChannelMisesid string    `protobuf:"bytes,11,opt,name=channel_misesid,json=channelMisesid,proto3" json:"channel_misesid,omitempty"`
}

func (m *ChannelUserInfo) Reset()         { *m = ChannelUserInfo{} }
func (m *ChannelUserInfo) String() string { return proto.CompactTextString(m) }
func (*ChannelUserInfo) ProtoMessage()    {}
func (*ChannelUserInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_565883138c05ff17, []int{24}
}
func (m *ChannelUserInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChannelUserInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChannelUserInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChannelUserInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChannelUserInfo.Merge(m, src)
}
func (m *ChannelUserInfo) XXX_Size() int {
	return m.Size()
}
func (m *ChannelUserInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ChannelUserInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ChannelUserInfo proto.InternalMessageInfo

func (m *ChannelUserInfo) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *ChannelUserInfo) GetChannelId() string {
	if m != nil {
		return m.ChannelId
	}
	return ""
}

func (m *ChannelUserInfo) GetValidState() int32 {
	if m != nil {
		return m.ValidState
	}
	return 0
}

func (m *ChannelUserInfo) GetAmount() uint64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *ChannelUserInfo) GetTxId() string {
	if m != nil {
		return m.TxId
	}
	return ""
}

func (m *ChannelUserInfo) GetUser() *UserInfo {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *ChannelUserInfo) GetAirdropState() int32 {
	if m != nil {
		return m.AirdropState
	}
	return 0
}

func (m *ChannelUserInfo) GetAirdropTime() uint64 {
	if m != nil {
		return m.AirdropTime
	}
	return 0
}

func (m *ChannelUserInfo) GetCreatedAt() uint64 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

func (m *ChannelUserInfo) GetChannelUid() uint64 {
	if m != nil {
		return m.ChannelUid
	}
	return 0
}

func (m *ChannelUserInfo) GetChannelMisesid() string {
	if m != nil {
		return m.ChannelMisesid
	}
	return ""
}

type PageChannelUserResponse struct {
	Code         uint64             `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	ChannelUsers []*ChannelUserInfo `protobuf:"bytes,2,rep,name=channel_users,json=channelUsers,proto3" json:"channel_users,omitempty"`
	Paginator    *Page              `protobuf:"bytes,3,opt,name=paginator,proto3" json:"paginator,omitempty"`
}

func (m *PageChannelUserResponse) Reset()         { *m = PageChannelUserResponse{} }
func (m *PageChannelUserResponse) String() string { return proto.CompactTextString(m) }
func (*PageChannelUserResponse) ProtoMessage()    {}
func (*PageChannelUserResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_565883138c05ff17, []int{25}
}
func (m *PageChannelUserResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PageChannelUserResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PageChannelUserResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PageChannelUserResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PageChannelUserResponse.Merge(m, src)
}
func (m *PageChannelUserResponse) XXX_Size() int {
	return m.Size()
}
func (m *PageChannelUserResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PageChannelUserResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PageChannelUserResponse proto.InternalMessageInfo

func (m *PageChannelUserResponse) GetCode() uint64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *PageChannelUserResponse) GetChannelUsers() []*ChannelUserInfo {
	if m != nil {
		return m.ChannelUsers
	}
	return nil
}

func (m *PageChannelUserResponse) GetPaginator() *Page {
	if m != nil {
		return m.Paginator
	}
	return nil
}

type NewListStatusRequest struct {
	CurrentUid uint64   `protobuf:"varint,1,opt,name=current_uid,json=currentUid,proto3" json:"current_uid,omitempty"`
	TargetUid  uint64   `protobuf:"varint,2,opt,name=target_uid,json=targetUid,proto3" json:"target_uid,omitempty"`
	Ids        []string `protobuf:"bytes,3,rep,name=ids,proto3" json:"ids,omitempty"`
	ListNum    uint64   `protobuf:"varint,4,opt,name=list_num,json=listNum,proto3" json:"list_num,omitempty"`
	FromTypes  []string `protobuf:"bytes,5,rep,name=from_types,json=fromTypes,proto3" json:"from_types,omitempty"`
}

func (m *NewListStatusRequest) Reset()         { *m = NewListStatusRequest{} }
func (m *NewListStatusRequest) String() string { return proto.CompactTextString(m) }
func (*NewListStatusRequest) ProtoMessage()    {}
func (*NewListStatusRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_565883138c05ff17, []int{26}
}
func (m *NewListStatusRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NewListStatusRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NewListStatusRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NewListStatusRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewListStatusRequest.Merge(m, src)
}
func (m *NewListStatusRequest) XXX_Size() int {
	return m.Size()
}
func (m *NewListStatusRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_NewListStatusRequest.DiscardUnknown(m)
}

var xxx_messageInfo_NewListStatusRequest proto.InternalMessageInfo

func (m *NewListStatusRequest) GetCurrentUid() uint64 {
	if m != nil {
		return m.CurrentUid
	}
	return 0
}

func (m *NewListStatusRequest) GetTargetUid() uint64 {
	if m != nil {
		return m.TargetUid
	}
	return 0
}

func (m *NewListStatusRequest) GetIds() []string {
	if m != nil {
		return m.Ids
	}
	return nil
}

func (m *NewListStatusRequest) GetListNum() uint64 {
	if m != nil {
		return m.ListNum
	}
	return 0
}

func (m *NewListStatusRequest) GetFromTypes() []string {
	if m != nil {
		return m.FromTypes
	}
	return nil
}

type NewListStatusResponse struct {
	Code     uint64        `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Statuses []*StatusInfo `protobuf:"bytes,2,rep,name=statuses,proto3" json:"statuses,omitempty"`
}

func (m *NewListStatusResponse) Reset()         { *m = NewListStatusResponse{} }
func (m *NewListStatusResponse) String() string { return proto.CompactTextString(m) }
func (*NewListStatusResponse) ProtoMessage()    {}
func (*NewListStatusResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_565883138c05ff17, []int{27}
}
func (m *NewListStatusResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NewListStatusResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NewListStatusResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NewListStatusResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewListStatusResponse.Merge(m, src)
}
func (m *NewListStatusResponse) XXX_Size() int {
	return m.Size()
}
func (m *NewListStatusResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_NewListStatusResponse.DiscardUnknown(m)
}

var xxx_messageInfo_NewListStatusResponse proto.InternalMessageInfo

func (m *NewListStatusResponse) GetCode() uint64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *NewListStatusResponse) GetStatuses() []*StatusInfo {
	if m != nil {
		return m.Statuses
	}
	return nil
}

type NewRecommendNext struct {
	Limit             uint64 `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	LastRecommendTime int64  `protobuf:"varint,2,opt,name=last_recommend_time,json=lastRecommendTime,proto3" json:"last_recommend_time,omitempty"`
	LastCommonTime    int64  `protobuf:"varint,3,opt,name=last_common_time,json=lastCommonTime,proto3" json:"last_common_time,omitempty"`
}

func (m *NewRecommendNext) Reset()         { *m = NewRecommendNext{} }
func (m *NewRecommendNext) String() string { return proto.CompactTextString(m) }
func (*NewRecommendNext) ProtoMessage()    {}
func (*NewRecommendNext) Descriptor() ([]byte, []int) {
	return fileDescriptor_565883138c05ff17, []int{28}
}
func (m *NewRecommendNext) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NewRecommendNext) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NewRecommendNext.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NewRecommendNext) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewRecommendNext.Merge(m, src)
}
func (m *NewRecommendNext) XXX_Size() int {
	return m.Size()
}
func (m *NewRecommendNext) XXX_DiscardUnknown() {
	xxx_messageInfo_NewRecommendNext.DiscardUnknown(m)
}

var xxx_messageInfo_NewRecommendNext proto.InternalMessageInfo

func (m *NewRecommendNext) GetLimit() uint64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *NewRecommendNext) GetLastRecommendTime() int64 {
	if m != nil {
		return m.LastRecommendTime
	}
	return 0
}

func (m *NewRecommendNext) GetLastCommonTime() int64 {
	if m != nil {
		return m.LastCommonTime
	}
	return 0
}

type NewRecommendStatusRequest struct {
	CurrentUid        uint64 `protobuf:"varint,1,opt,name=current_uid,json=currentUid,proto3" json:"current_uid,omitempty"`
	LastRecommendTime int64  `protobuf:"varint,2,opt,name=last_recommend_time,json=lastRecommendTime,proto3" json:"last_recommend_time,omitempty"`
	LastCommonTime    int64  `protobuf:"varint,3,opt,name=last_common_time,json=lastCommonTime,proto3" json:"last_common_time,omitempty"`
}

func (m *NewRecommendStatusRequest) Reset()         { *m = NewRecommendStatusRequest{} }
func (m *NewRecommendStatusRequest) String() string { return proto.CompactTextString(m) }
func (*NewRecommendStatusRequest) ProtoMessage()    {}
func (*NewRecommendStatusRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_565883138c05ff17, []int{29}
}
func (m *NewRecommendStatusRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NewRecommendStatusRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NewRecommendStatusRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NewRecommendStatusRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewRecommendStatusRequest.Merge(m, src)
}
func (m *NewRecommendStatusRequest) XXX_Size() int {
	return m.Size()
}
func (m *NewRecommendStatusRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_NewRecommendStatusRequest.DiscardUnknown(m)
}

var xxx_messageInfo_NewRecommendStatusRequest proto.InternalMessageInfo

func (m *NewRecommendStatusRequest) GetCurrentUid() uint64 {
	if m != nil {
		return m.CurrentUid
	}
	return 0
}

func (m *NewRecommendStatusRequest) GetLastRecommendTime() int64 {
	if m != nil {
		return m.LastRecommendTime
	}
	return 0
}

func (m *NewRecommendStatusRequest) GetLastCommonTime() int64 {
	if m != nil {
		return m.LastCommonTime
	}
	return 0
}

type NewRecommendStatusResponse struct {
	Code     uint64            `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Statuses []*StatusInfo     `protobuf:"bytes,2,rep,name=statuses,proto3" json:"statuses,omitempty"`
	Next     *NewRecommendNext `protobuf:"bytes,3,opt,name=next,proto3" json:"next,omitempty"`
	Num      uint64            `protobuf:"varint,4,opt,name=num,proto3" json:"num,omitempty"`
}

func (m *NewRecommendStatusResponse) Reset()         { *m = NewRecommendStatusResponse{} }
func (m *NewRecommendStatusResponse) String() string { return proto.CompactTextString(m) }
func (*NewRecommendStatusResponse) ProtoMessage()    {}
func (*NewRecommendStatusResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_565883138c05ff17, []int{30}
}
func (m *NewRecommendStatusResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NewRecommendStatusResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NewRecommendStatusResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NewRecommendStatusResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewRecommendStatusResponse.Merge(m, src)
}
func (m *NewRecommendStatusResponse) XXX_Size() int {
	return m.Size()
}
func (m *NewRecommendStatusResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_NewRecommendStatusResponse.DiscardUnknown(m)
}

var xxx_messageInfo_NewRecommendStatusResponse proto.InternalMessageInfo

func (m *NewRecommendStatusResponse) GetCode() uint64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *NewRecommendStatusResponse) GetStatuses() []*StatusInfo {
	if m != nil {
		return m.Statuses
	}
	return nil
}

func (m *NewRecommendStatusResponse) GetNext() *NewRecommendNext {
	if m != nil {
		return m.Next
	}
	return nil
}

func (m *NewRecommendStatusResponse) GetNum() uint64 {
	if m != nil {
		return m.Num
	}
	return 0
}

type CreateStatusRequest struct {
	CurrentUid   uint64   `protobuf:"varint,1,opt,name=current_uid,json=currentUid,proto3" json:"current_uid,omitempty"`
	StatusType   string   `protobuf:"bytes,2,opt,name=status_type,json=statusType,proto3" json:"status_type,omitempty"`
	ParentId     string   `protobuf:"bytes,3,opt,name=parent_id,json=parentId,proto3" json:"parent_id,omitempty"`
	Content      string   `protobuf:"bytes,4,opt,name=content,proto3" json:"content,omitempty"`
	Meta         string   `protobuf:"bytes,5,opt,name=meta,proto3" json:"meta,omitempty"`
	FromType     string   `protobuf:"bytes,6,opt,name=from_type,json=fromType,proto3" json:"from_type,omitempty"`
	Images       []string `protobuf:"bytes,7,rep,name=images,proto3" json:"images,omitempty"`
	IsPrivate    bool     `protobuf:"varint,8,opt,name=is_private,json=isPrivate,proto3" json:"is_private,omitempty"`
	ShowDuration uint64   `protobuf:"varint,9,opt,name=show_duration,json=showDuration,proto3" json:"show_duration,omitempty"`
}

func (m *CreateStatusRequest) Reset()         { *m = CreateStatusRequest{} }
func (m *CreateStatusRequest) String() string { return proto.CompactTextString(m) }
func (*CreateStatusRequest) ProtoMessage()    {}
func (*CreateStatusRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_565883138c05ff17, []int{31}
}
func (m *CreateStatusRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateStatusRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateStatusRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateStatusRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateStatusRequest.Merge(m, src)
}
func (m *CreateStatusRequest) XXX_Size() int {
	return m.Size()
}
func (m *CreateStatusRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateStatusRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateStatusRequest proto.InternalMessageInfo

func (m *CreateStatusRequest) GetCurrentUid() uint64 {
	if m != nil {
		return m.CurrentUid
	}
	return 0
}

func (m *CreateStatusRequest) GetStatusType() string {
	if m != nil {
		return m.StatusType
	}
	return ""
}

func (m *CreateStatusRequest) GetParentId() string {
	if m != nil {
		return m.ParentId
	}
	return ""
}

func (m *CreateStatusRequest) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *CreateStatusRequest) GetMeta() string {
	if m != nil {
		return m.Meta
	}
	return ""
}

func (m *CreateStatusRequest) GetFromType() string {
	if m != nil {
		return m.FromType
	}
	return ""
}

func (m *CreateStatusRequest) GetImages() []string {
	if m != nil {
		return m.Images
	}
	return nil
}

func (m *CreateStatusRequest) GetIsPrivate() bool {
	if m != nil {
		return m.IsPrivate
	}
	return false
}

func (m *CreateStatusRequest) GetShowDuration() uint64 {
	if m != nil {
		return m.ShowDuration
	}
	return 0
}

type UpdateStatusRequest struct {
	CurrentUid   uint64 `protobuf:"varint,1,opt,name=current_uid,json=currentUid,proto3" json:"current_uid,omitempty"`
	StatusId     string `protobuf:"bytes,2,opt,name=status_id,json=statusId,proto3" json:"status_id,omitempty"`
	IsPrivate    bool   `protobuf:"varint,3,opt,name=is_private,json=isPrivate,proto3" json:"is_private,omitempty"`
	ShowDuration uint64 `protobuf:"varint,4,opt,name=show_duration,json=showDuration,proto3" json:"show_duration,omitempty"`
}

func (m *UpdateStatusRequest) Reset()         { *m = UpdateStatusRequest{} }
func (m *UpdateStatusRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateStatusRequest) ProtoMessage()    {}
func (*UpdateStatusRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_565883138c05ff17, []int{32}
}
func (m *UpdateStatusRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateStatusRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateStatusRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateStatusRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateStatusRequest.Merge(m, src)
}
func (m *UpdateStatusRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpdateStatusRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateStatusRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateStatusRequest proto.InternalMessageInfo

func (m *UpdateStatusRequest) GetCurrentUid() uint64 {
	if m != nil {
		return m.CurrentUid
	}
	return 0
}

func (m *UpdateStatusRequest) GetStatusId() string {
	if m != nil {
		return m.StatusId
	}
	return ""
}

func (m *UpdateStatusRequest) GetIsPrivate() bool {
	if m != nil {
		return m.IsPrivate
	}
	return false
}

func (m *UpdateStatusRequest) GetShowDuration() uint64 {
	if m != nil {
		return m.ShowDuration
	}
	return 0
}

type CreateStatusResponse struct {
	Code   uint64      `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Status *StatusInfo `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
}

func (m *CreateStatusResponse) Reset()         { *m = CreateStatusResponse{} }
func (m *CreateStatusResponse) String() string { return proto.CompactTextString(m) }
func (*CreateStatusResponse) ProtoMessage()    {}
func (*CreateStatusResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_565883138c05ff17, []int{33}
}
func (m *CreateStatusResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateStatusResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateStatusResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateStatusResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateStatusResponse.Merge(m, src)
}
func (m *CreateStatusResponse) XXX_Size() int {
	return m.Size()
}
func (m *CreateStatusResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateStatusResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CreateStatusResponse proto.InternalMessageInfo

func (m *CreateStatusResponse) GetCode() uint64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *CreateStatusResponse) GetStatus() *StatusInfo {
	if m != nil {
		return m.Status
	}
	return nil
}

type UpdateStatusResponse struct {
	Code   uint64      `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Status *StatusInfo `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
}

func (m *UpdateStatusResponse) Reset()         { *m = UpdateStatusResponse{} }
func (m *UpdateStatusResponse) String() string { return proto.CompactTextString(m) }
func (*UpdateStatusResponse) ProtoMessage()    {}
func (*UpdateStatusResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_565883138c05ff17, []int{34}
}
func (m *UpdateStatusResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateStatusResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateStatusResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateStatusResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateStatusResponse.Merge(m, src)
}
func (m *UpdateStatusResponse) XXX_Size() int {
	return m.Size()
}
func (m *UpdateStatusResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateStatusResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateStatusResponse proto.InternalMessageInfo

func (m *UpdateStatusResponse) GetCode() uint64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *UpdateStatusResponse) GetStatus() *StatusInfo {
	if m != nil {
		return m.Status
	}
	return nil
}

type DeleteStatusRequest struct {
	CurrentUid uint64 `protobuf:"varint,1,opt,name=current_uid,json=currentUid,proto3" json:"current_uid,omitempty"`
	Statusid   string `protobuf:"bytes,2,opt,name=statusid,proto3" json:"statusid,omitempty"`
}

func (m *DeleteStatusRequest) Reset()         { *m = DeleteStatusRequest{} }
func (m *DeleteStatusRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteStatusRequest) ProtoMessage()    {}
func (*DeleteStatusRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_565883138c05ff17, []int{35}
}
func (m *DeleteStatusRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteStatusRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteStatusRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteStatusRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteStatusRequest.Merge(m, src)
}
func (m *DeleteStatusRequest) XXX_Size() int {
	return m.Size()
}
func (m *DeleteStatusRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteStatusRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteStatusRequest proto.InternalMessageInfo

func (m *DeleteStatusRequest) GetCurrentUid() uint64 {
	if m != nil {
		return m.CurrentUid
	}
	return 0
}

func (m *DeleteStatusRequest) GetStatusid() string {
	if m != nil {
		return m.Statusid
	}
	return ""
}

type SimpleResponse struct {
	Code uint64 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
}

func (m *SimpleResponse) Reset()         { *m = SimpleResponse{} }
func (m *SimpleResponse) String() string { return proto.CompactTextString(m) }
func (*SimpleResponse) ProtoMessage()    {}
func (*SimpleResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_565883138c05ff17, []int{36}
}
func (m *SimpleResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SimpleResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SimpleResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SimpleResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SimpleResponse.Merge(m, src)
}
func (m *SimpleResponse) XXX_Size() int {
	return m.Size()
}
func (m *SimpleResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SimpleResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SimpleResponse proto.InternalMessageInfo

func (m *SimpleResponse) GetCode() uint64 {
	if m != nil {
		return m.Code
	}
	return 0
}

type LikeStatusRequest struct {
	CurrentUid uint64 `protobuf:"varint,1,opt,name=current_uid,json=currentUid,proto3" json:"current_uid,omitempty"`
	Statusid   string `protobuf:"bytes,2,opt,name=statusid,proto3" json:"statusid,omitempty"`
	NftAssetId string `protobuf:"bytes,3,opt,name=nft_asset_id,json=nftAssetId,proto3" json:"nft_asset_id,omitempty"`
}

func (m *LikeStatusRequest) Reset()         { *m = LikeStatusRequest{} }
func (m *LikeStatusRequest) String() string { return proto.CompactTextString(m) }
func (*LikeStatusRequest) ProtoMessage()    {}
func (*LikeStatusRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_565883138c05ff17, []int{37}
}
func (m *LikeStatusRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LikeStatusRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LikeStatusRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LikeStatusRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LikeStatusRequest.Merge(m, src)
}
func (m *LikeStatusRequest) XXX_Size() int {
	return m.Size()
}
func (m *LikeStatusRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_LikeStatusRequest.DiscardUnknown(m)
}

var xxx_messageInfo_LikeStatusRequest proto.InternalMessageInfo

func (m *LikeStatusRequest) GetCurrentUid() uint64 {
	if m != nil {
		return m.CurrentUid
	}
	return 0
}

func (m *LikeStatusRequest) GetStatusid() string {
	if m != nil {
		return m.Statusid
	}
	return ""
}

func (m *LikeStatusRequest) GetNftAssetId() string {
	if m != nil {
		return m.NftAssetId
	}
	return ""
}

type UnLikeStatusRequest struct {
	CurrentUid uint64 `protobuf:"varint,1,opt,name=current_uid,json=currentUid,proto3" json:"current_uid,omitempty"`
	Statusid   string `protobuf:"bytes,2,opt,name=statusid,proto3" json:"statusid,omitempty"`
	NftAssetId string `protobuf:"bytes,3,opt,name=nft_asset_id,json=nftAssetId,proto3" json:"nft_asset_id,omitempty"`
}

func (m *UnLikeStatusRequest) Reset()         { *m = UnLikeStatusRequest{} }
func (m *UnLikeStatusRequest) String() string { return proto.CompactTextString(m) }
func (*UnLikeStatusRequest) ProtoMessage()    {}
func (*UnLikeStatusRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_565883138c05ff17, []int{38}
}
func (m *UnLikeStatusRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UnLikeStatusRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UnLikeStatusRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UnLikeStatusRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UnLikeStatusRequest.Merge(m, src)
}
func (m *UnLikeStatusRequest) XXX_Size() int {
	return m.Size()
}
func (m *UnLikeStatusRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UnLikeStatusRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UnLikeStatusRequest proto.InternalMessageInfo

func (m *UnLikeStatusRequest) GetCurrentUid() uint64 {
	if m != nil {
		return m.CurrentUid
	}
	return 0
}

func (m *UnLikeStatusRequest) GetStatusid() string {
	if m != nil {
		return m.Statusid
	}
	return ""
}

func (m *UnLikeStatusRequest) GetNftAssetId() string {
	if m != nil {
		return m.NftAssetId
	}
	return ""
}

type LikeNftAssetRequest struct {
	CurrentUid uint64 `protobuf:"varint,1,opt,name=current_uid,json=currentUid,proto3" json:"current_uid,omitempty"`
	NftAssetId string `protobuf:"bytes,2,opt,name=nft_asset_id,json=nftAssetId,proto3" json:"nft_asset_id,omitempty"`
}

func (m *LikeNftAssetRequest) Reset()         { *m = LikeNftAssetRequest{} }
func (m *LikeNftAssetRequest) String() string { return proto.CompactTextString(m) }
func (*LikeNftAssetRequest) ProtoMessage()    {}
func (*LikeNftAssetRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_565883138c05ff17, []int{39}
}
func (m *LikeNftAssetRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LikeNftAssetRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LikeNftAssetRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LikeNftAssetRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LikeNftAssetRequest.Merge(m, src)
}
func (m *LikeNftAssetRequest) XXX_Size() int {
	return m.Size()
}
func (m *LikeNftAssetRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_LikeNftAssetRequest.DiscardUnknown(m)
}

var xxx_messageInfo_LikeNftAssetRequest proto.InternalMessageInfo

func (m *LikeNftAssetRequest) GetCurrentUid() uint64 {
	if m != nil {
		return m.CurrentUid
	}
	return 0
}

func (m *LikeNftAssetRequest) GetNftAssetId() string {
	if m != nil {
		return m.NftAssetId
	}
	return ""
}

type UnLikeNftAssetRequest struct {
	CurrentUid uint64 `protobuf:"varint,1,opt,name=current_uid,json=currentUid,proto3" json:"current_uid,omitempty"`
	NftAssetId string `protobuf:"bytes,2,opt,name=nft_asset_id,json=nftAssetId,proto3" json:"nft_asset_id,omitempty"`
}

func (m *UnLikeNftAssetRequest) Reset()         { *m = UnLikeNftAssetRequest{} }
func (m *UnLikeNftAssetRequest) String() string { return proto.CompactTextString(m) }
func (*UnLikeNftAssetRequest) ProtoMessage()    {}
func (*UnLikeNftAssetRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_565883138c05ff17, []int{40}
}
func (m *UnLikeNftAssetRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UnLikeNftAssetRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UnLikeNftAssetRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UnLikeNftAssetRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UnLikeNftAssetRequest.Merge(m, src)
}
func (m *UnLikeNftAssetRequest) XXX_Size() int {
	return m.Size()
}
func (m *UnLikeNftAssetRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UnLikeNftAssetRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UnLikeNftAssetRequest proto.InternalMessageInfo

func (m *UnLikeNftAssetRequest) GetCurrentUid() uint64 {
	if m != nil {
		return m.CurrentUid
	}
	return 0
}

func (m *UnLikeNftAssetRequest) GetNftAssetId() string {
	if m != nil {
		return m.NftAssetId
	}
	return ""
}

type FollowRequest struct {
	CurrentUid uint64 `protobuf:"varint,1,opt,name=current_uid,json=currentUid,proto3" json:"current_uid,omitempty"`
	TargetUid  uint64 `protobuf:"varint,2,opt,name=target_uid,json=targetUid,proto3" json:"target_uid,omitempty"`
}

func (m *FollowRequest) Reset()         { *m = FollowRequest{} }
func (m *FollowRequest) String() string { return proto.CompactTextString(m) }
func (*FollowRequest) ProtoMessage()    {}
func (*FollowRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_565883138c05ff17, []int{41}
}
func (m *FollowRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FollowRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FollowRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FollowRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FollowRequest.Merge(m, src)
}
func (m *FollowRequest) XXX_Size() int {
	return m.Size()
}
func (m *FollowRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_FollowRequest.DiscardUnknown(m)
}

var xxx_messageInfo_FollowRequest proto.InternalMessageInfo

func (m *FollowRequest) GetCurrentUid() uint64 {
	if m != nil {
		return m.CurrentUid
	}
	return 0
}

func (m *FollowRequest) GetTargetUid() uint64 {
	if m != nil {
		return m.TargetUid
	}
	return 0
}

type UnFollowRequest struct {
	CurrentUid uint64 `protobuf:"varint,1,opt,name=current_uid,json=currentUid,proto3" json:"current_uid,omitempty"`
	TargetUid  uint64 `protobuf:"varint,2,opt,name=target_uid,json=targetUid,proto3" json:"target_uid,omitempty"`
}

func (m *UnFollowRequest) Reset()         { *m = UnFollowRequest{} }
func (m *UnFollowRequest) String() string { return proto.CompactTextString(m) }
func (*UnFollowRequest) ProtoMessage()    {}
func (*UnFollowRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_565883138c05ff17, []int{42}
}
func (m *UnFollowRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UnFollowRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UnFollowRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UnFollowRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UnFollowRequest.Merge(m, src)
}
func (m *UnFollowRequest) XXX_Size() int {
	return m.Size()
}
func (m *UnFollowRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UnFollowRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UnFollowRequest proto.InternalMessageInfo

func (m *UnFollowRequest) GetCurrentUid() uint64 {
	if m != nil {
		return m.CurrentUid
	}
	return 0
}

func (m *UnFollowRequest) GetTargetUid() uint64 {
	if m != nil {
		return m.TargetUid
	}
	return 0
}

type RelationInfo struct {
	User         *UserInfo `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	RelationType string    `protobuf:"bytes,2,opt,name=relation_type,json=relationType,proto3" json:"relation_type,omitempty"`
	CreatedAt    uint64    `protobuf:"varint,3,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
}

func (m *RelationInfo) Reset()         { *m = RelationInfo{} }
func (m *RelationInfo) String() string { return proto.CompactTextString(m) }
func (*RelationInfo) ProtoMessage()    {}
func (*RelationInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_565883138c05ff17, []int{43}
}
func (m *RelationInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RelationInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RelationInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RelationInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RelationInfo.Merge(m, src)
}
func (m *RelationInfo) XXX_Size() int {
	return m.Size()
}
func (m *RelationInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_RelationInfo.DiscardUnknown(m)
}

var xxx_messageInfo_RelationInfo proto.InternalMessageInfo

func (m *RelationInfo) GetUser() *UserInfo {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *RelationInfo) GetRelationType() string {
	if m != nil {
		return m.RelationType
	}
	return ""
}

func (m *RelationInfo) GetCreatedAt() uint64 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

type ListRelationshipRequest struct {
	CurrentUid   uint64     `protobuf:"varint,1,opt,name=current_uid,json=currentUid,proto3" json:"current_uid,omitempty"`
	Uid          uint64     `protobuf:"varint,2,opt,name=uid,proto3" json:"uid,omitempty"`
	RelationType string     `protobuf:"bytes,3,opt,name=relation_type,json=relationType,proto3" json:"relation_type,omitempty"`
	Paginator    *PageQuick `protobuf:"bytes,4,opt,name=paginator,proto3" json:"paginator,omitempty"`
}

func (m *ListRelationshipRequest) Reset()         { *m = ListRelationshipRequest{} }
func (m *ListRelationshipRequest) String() string { return proto.CompactTextString(m) }
func (*ListRelationshipRequest) ProtoMessage()    {}
func (*ListRelationshipRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_565883138c05ff17, []int{44}
}
func (m *ListRelationshipRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListRelationshipRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListRelationshipRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListRelationshipRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListRelationshipRequest.Merge(m, src)
}
func (m *ListRelationshipRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListRelationshipRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListRelationshipRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListRelationshipRequest proto.InternalMessageInfo

func (m *ListRelationshipRequest) GetCurrentUid() uint64 {
	if m != nil {
		return m.CurrentUid
	}
	return 0
}

func (m *ListRelationshipRequest) GetUid() uint64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *ListRelationshipRequest) GetRelationType() string {
	if m != nil {
		return m.RelationType
	}
	return ""
}

func (m *ListRelationshipRequest) GetPaginator() *PageQuick {
	if m != nil {
		return m.Paginator
	}
	return nil
}

type ListRelationshipResponse struct {
	Code      uint64          `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Relations []*RelationInfo `protobuf:"bytes,2,rep,name=relations,proto3" json:"relations,omitempty"`
	Paginator *PageQuick      `protobuf:"bytes,3,opt,name=paginator,proto3" json:"paginator,omitempty"`
}

func (m *ListRelationshipResponse) Reset()         { *m = ListRelationshipResponse{} }
func (m *ListRelationshipResponse) String() string { return proto.CompactTextString(m) }
func (*ListRelationshipResponse) ProtoMessage()    {}
func (*ListRelationshipResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_565883138c05ff17, []int{45}
}
func (m *ListRelationshipResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListRelationshipResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListRelationshipResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListRelationshipResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListRelationshipResponse.Merge(m, src)
}
func (m *ListRelationshipResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListRelationshipResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListRelationshipResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListRelationshipResponse proto.InternalMessageInfo

func (m *ListRelationshipResponse) GetCode() uint64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *ListRelationshipResponse) GetRelations() []*RelationInfo {
	if m != nil {
		return m.Relations
	}
	return nil
}

func (m *ListRelationshipResponse) GetPaginator() *PageQuick {
	if m != nil {
		return m.Paginator
	}
	return nil
}

type Comment struct {
	Id           string     `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Uid          uint64     `protobuf:"varint,2,opt,name=uid,proto3" json:"uid,omitempty"`
	StatusId     string     `protobuf:"bytes,3,opt,name=status_id,json=statusId,proto3" json:"status_id,omitempty"`
	ParentId     string     `protobuf:"bytes,4,opt,name=parent_id,json=parentId,proto3" json:"parent_id,omitempty"`
	GroupId      string     `protobuf:"bytes,5,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	OpponentId   uint64     `protobuf:"varint,6,opt,name=opponent_id,json=opponentId,proto3" json:"opponent_id,omitempty"`
	Content      string     `protobuf:"bytes,7,opt,name=content,proto3" json:"content,omitempty"`
	Comments     []*Comment `protobuf:"bytes,8,rep,name=comments,proto3" json:"comments,omitempty"`
	User         *UserInfo  `protobuf:"bytes,9,opt,name=user,proto3" json:"user,omitempty"`
	Opponent     *UserInfo  `protobuf:"bytes,10,opt,name=opponent,proto3" json:"opponent,omitempty"`
	CommentCount uint64     `protobuf:"varint,11,opt,name=comment_count,json=commentCount,proto3" json:"comment_count,omitempty"`
	LikeCount    uint64     `protobuf:"varint,12,opt,name=like_count,json=likeCount,proto3" json:"like_count,omitempty"`
	CreatedAt    uint64     `protobuf:"varint,13,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	IsLiked      bool       `protobuf:"varint,14,opt,name=is_liked,json=isLiked,proto3" json:"is_liked,omitempty"`
	NftAssetId   string     `protobuf:"bytes,15,opt,name=nft_asset_id,json=nftAssetId,proto3" json:"nft_asset_id,omitempty"`
}

func (m *Comment) Reset()         { *m = Comment{} }
func (m *Comment) String() string { return proto.CompactTextString(m) }
func (*Comment) ProtoMessage()    {}
func (*Comment) Descriptor() ([]byte, []int) {
	return fileDescriptor_565883138c05ff17, []int{46}
}
func (m *Comment) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Comment) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Comment.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Comment) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Comment.Merge(m, src)
}
func (m *Comment) XXX_Size() int {
	return m.Size()
}
func (m *Comment) XXX_DiscardUnknown() {
	xxx_messageInfo_Comment.DiscardUnknown(m)
}

var xxx_messageInfo_Comment proto.InternalMessageInfo

func (m *Comment) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Comment) GetUid() uint64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *Comment) GetStatusId() string {
	if m != nil {
		return m.StatusId
	}
	return ""
}

func (m *Comment) GetParentId() string {
	if m != nil {
		return m.ParentId
	}
	return ""
}

func (m *Comment) GetGroupId() string {
	if m != nil {
		return m.GroupId
	}
	return ""
}

func (m *Comment) GetOpponentId() uint64 {
	if m != nil {
		return m.OpponentId
	}
	return 0
}

func (m *Comment) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *Comment) GetComments() []*Comment {
	if m != nil {
		return m.Comments
	}
	return nil
}

func (m *Comment) GetUser() *UserInfo {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *Comment) GetOpponent() *UserInfo {
	if m != nil {
		return m.Opponent
	}
	return nil
}

func (m *Comment) GetCommentCount() uint64 {
	if m != nil {
		return m.CommentCount
	}
	return 0
}

func (m *Comment) GetLikeCount() uint64 {
	if m != nil {
		return m.LikeCount
	}
	return 0
}

func (m *Comment) GetCreatedAt() uint64 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

func (m *Comment) GetIsLiked() bool {
	if m != nil {
		return m.IsLiked
	}
	return false
}

func (m *Comment) GetNftAssetId() string {
	if m != nil {
		return m.NftAssetId
	}
	return ""
}

type GetCommentRequest struct {
	CurrentUid uint64 `protobuf:"varint,1,opt,name=current_uid,json=currentUid,proto3" json:"current_uid,omitempty"`
	CommentId  string `protobuf:"bytes,2,opt,name=comment_id,json=commentId,proto3" json:"comment_id,omitempty"`
}

func (m *GetCommentRequest) Reset()         { *m = GetCommentRequest{} }
func (m *GetCommentRequest) String() string { return proto.CompactTextString(m) }
func (*GetCommentRequest) ProtoMessage()    {}
func (*GetCommentRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_565883138c05ff17, []int{47}
}
func (m *GetCommentRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetCommentRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetCommentRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetCommentRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetCommentRequest.Merge(m, src)
}
func (m *GetCommentRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetCommentRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetCommentRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetCommentRequest proto.InternalMessageInfo

func (m *GetCommentRequest) GetCurrentUid() uint64 {
	if m != nil {
		return m.CurrentUid
	}
	return 0
}

func (m *GetCommentRequest) GetCommentId() string {
	if m != nil {
		return m.CommentId
	}
	return ""
}

type GetCommentResponse struct {
	Code    uint64   `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Comment *Comment `protobuf:"bytes,2,opt,name=comment,proto3" json:"comment,omitempty"`
}

func (m *GetCommentResponse) Reset()         { *m = GetCommentResponse{} }
func (m *GetCommentResponse) String() string { return proto.CompactTextString(m) }
func (*GetCommentResponse) ProtoMessage()    {}
func (*GetCommentResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_565883138c05ff17, []int{48}
}
func (m *GetCommentResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetCommentResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetCommentResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetCommentResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetCommentResponse.Merge(m, src)
}
func (m *GetCommentResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetCommentResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetCommentResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetCommentResponse proto.InternalMessageInfo

func (m *GetCommentResponse) GetCode() uint64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *GetCommentResponse) GetComment() *Comment {
	if m != nil {
		return m.Comment
	}
	return nil
}

type ListCommentRequest struct {
	CurrentUid uint64     `protobuf:"varint,1,opt,name=current_uid,json=currentUid,proto3" json:"current_uid,omitempty"`
	StatusId   string     `protobuf:"bytes,2,opt,name=status_id,json=statusId,proto3" json:"status_id,omitempty"`
	TopicId    string     `protobuf:"bytes,3,opt,name=topic_id,json=topicId,proto3" json:"topic_id,omitempty"`
	Paginator  *PageQuick `protobuf:"bytes,4,opt,name=paginator,proto3" json:"paginator,omitempty"`
	NftAssetId string     `protobuf:"bytes,5,opt,name=nft_asset_id,json=nftAssetId,proto3" json:"nft_asset_id,omitempty"`
}

func (m *ListCommentRequest) Reset()         { *m = ListCommentRequest{} }
func (m *ListCommentRequest) String() string { return proto.CompactTextString(m) }
func (*ListCommentRequest) ProtoMessage()    {}
func (*ListCommentRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_565883138c05ff17, []int{49}
}
func (m *ListCommentRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListCommentRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListCommentRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListCommentRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListCommentRequest.Merge(m, src)
}
func (m *ListCommentRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListCommentRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListCommentRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListCommentRequest proto.InternalMessageInfo

func (m *ListCommentRequest) GetCurrentUid() uint64 {
	if m != nil {
		return m.CurrentUid
	}
	return 0
}

func (m *ListCommentRequest) GetStatusId() string {
	if m != nil {
		return m.StatusId
	}
	return ""
}

func (m *ListCommentRequest) GetTopicId() string {
	if m != nil {
		return m.TopicId
	}
	return ""
}

func (m *ListCommentRequest) GetPaginator() *PageQuick {
	if m != nil {
		return m.Paginator
	}
	return nil
}

func (m *ListCommentRequest) GetNftAssetId() string {
	if m != nil {
		return m.NftAssetId
	}
	return ""
}

type ListCommentResponse struct {
	Code      uint64     `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Comments  []*Comment `protobuf:"bytes,2,rep,name=comments,proto3" json:"comments,omitempty"`
	Paginator *PageQuick `protobuf:"bytes,3,opt,name=paginator,proto3" json:"paginator,omitempty"`
}

func (m *ListCommentResponse) Reset()         { *m = ListCommentResponse{} }
func (m *ListCommentResponse) String() string { return proto.CompactTextString(m) }
func (*ListCommentResponse) ProtoMessage()    {}
func (*ListCommentResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_565883138c05ff17, []int{50}
}
func (m *ListCommentResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListCommentResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListCommentResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListCommentResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListCommentResponse.Merge(m, src)
}
func (m *ListCommentResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListCommentResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListCommentResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListCommentResponse proto.InternalMessageInfo

func (m *ListCommentResponse) GetCode() uint64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *ListCommentResponse) GetComments() []*Comment {
	if m != nil {
		return m.Comments
	}
	return nil
}

func (m *ListCommentResponse) GetPaginator() *PageQuick {
	if m != nil {
		return m.Paginator
	}
	return nil
}

type ListLikeUserRequest struct {
	CurrentUid uint64     `protobuf:"varint,1,opt,name=current_uid,json=currentUid,proto3" json:"current_uid,omitempty"`
	TargerId   string     `protobuf:"bytes,2,opt,name=targer_id,json=targerId,proto3" json:"targer_id,omitempty"`
	Paginator  *PageQuick `protobuf:"bytes,3,opt,name=paginator,proto3" json:"paginator,omitempty"`
}

func (m *ListLikeUserRequest) Reset()         { *m = ListLikeUserRequest{} }
func (m *ListLikeUserRequest) String() string { return proto.CompactTextString(m) }
func (*ListLikeUserRequest) ProtoMessage()    {}
func (*ListLikeUserRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_565883138c05ff17, []int{51}
}
func (m *ListLikeUserRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListLikeUserRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListLikeUserRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListLikeUserRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListLikeUserRequest.Merge(m, src)
}
func (m *ListLikeUserRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListLikeUserRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListLikeUserRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListLikeUserRequest proto.InternalMessageInfo

func (m *ListLikeUserRequest) GetCurrentUid() uint64 {
	if m != nil {
		return m.CurrentUid
	}
	return 0
}

func (m *ListLikeUserRequest) GetTargerId() string {
	if m != nil {
		return m.TargerId
	}
	return ""
}

func (m *ListLikeUserRequest) GetPaginator() *PageQuick {
	if m != nil {
		return m.Paginator
	}
	return nil
}

type Like struct {
	Id   string    `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	User *UserInfo `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty"`
}

func (m *Like) Reset()         { *m = Like{} }
func (m *Like) String() string { return proto.CompactTextString(m) }
func (*Like) ProtoMessage()    {}
func (*Like) Descriptor() ([]byte, []int) {
	return fileDescriptor_565883138c05ff17, []int{52}
}
func (m *Like) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Like) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Like.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Like) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Like.Merge(m, src)
}
func (m *Like) XXX_Size() int {
	return m.Size()
}
func (m *Like) XXX_DiscardUnknown() {
	xxx_messageInfo_Like.DiscardUnknown(m)
}

var xxx_messageInfo_Like proto.InternalMessageInfo

func (m *Like) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Like) GetUser() *UserInfo {
	if m != nil {
		return m.User
	}
	return nil
}

type ListLikeUserResponse struct {
	Code      uint64     `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Likes     []*Like    `protobuf:"bytes,2,rep,name=likes,proto3" json:"likes,omitempty"`
	Paginator *PageQuick `protobuf:"bytes,3,opt,name=paginator,proto3" json:"paginator,omitempty"`
}

func (m *ListLikeUserResponse) Reset()         { *m = ListLikeUserResponse{} }
func (m *ListLikeUserResponse) String() string { return proto.CompactTextString(m) }
func (*ListLikeUserResponse) ProtoMessage()    {}
func (*ListLikeUserResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_565883138c05ff17, []int{53}
}
func (m *ListLikeUserResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListLikeUserResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListLikeUserResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListLikeUserResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListLikeUserResponse.Merge(m, src)
}
func (m *ListLikeUserResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListLikeUserResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListLikeUserResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListLikeUserResponse proto.InternalMessageInfo

func (m *ListLikeUserResponse) GetCode() uint64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *ListLikeUserResponse) GetLikes() []*Like {
	if m != nil {
		return m.Likes
	}
	return nil
}

func (m *ListLikeUserResponse) GetPaginator() *PageQuick {
	if m != nil {
		return m.Paginator
	}
	return nil
}

type CreateCommentRequest struct {
	CurrentUid uint64 `protobuf:"varint,1,opt,name=current_uid,json=currentUid,proto3" json:"current_uid,omitempty"`
	StatusId   string `protobuf:"bytes,2,opt,name=status_id,json=statusId,proto3" json:"status_id,omitempty"`
	ParentId   string `protobuf:"bytes,3,opt,name=parent_id,json=parentId,proto3" json:"parent_id,omitempty"`
	Content    string `protobuf:"bytes,4,opt,name=content,proto3" json:"content,omitempty"`
	NftAssetId string `protobuf:"bytes,5,opt,name=nft_asset_id,json=nftAssetId,proto3" json:"nft_asset_id,omitempty"`
}

func (m *CreateCommentRequest) Reset()         { *m = CreateCommentRequest{} }
func (m *CreateCommentRequest) String() string { return proto.CompactTextString(m) }
func (*CreateCommentRequest) ProtoMessage()    {}
func (*CreateCommentRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_565883138c05ff17, []int{54}
}
func (m *CreateCommentRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateCommentRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateCommentRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateCommentRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateCommentRequest.Merge(m, src)
}
func (m *CreateCommentRequest) XXX_Size() int {
	return m.Size()
}
func (m *CreateCommentRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateCommentRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateCommentRequest proto.InternalMessageInfo

func (m *CreateCommentRequest) GetCurrentUid() uint64 {
	if m != nil {
		return m.CurrentUid
	}
	return 0
}

func (m *CreateCommentRequest) GetStatusId() string {
	if m != nil {
		return m.StatusId
	}
	return ""
}

func (m *CreateCommentRequest) GetParentId() string {
	if m != nil {
		return m.ParentId
	}
	return ""
}

func (m *CreateCommentRequest) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *CreateCommentRequest) GetNftAssetId() string {
	if m != nil {
		return m.NftAssetId
	}
	return ""
}

type DeleteCommentRequest struct {
	CurrentUid uint64 `protobuf:"varint,1,opt,name=current_uid,json=currentUid,proto3" json:"current_uid,omitempty"`
	Id         string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *DeleteCommentRequest) Reset()         { *m = DeleteCommentRequest{} }
func (m *DeleteCommentRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteCommentRequest) ProtoMessage()    {}
func (*DeleteCommentRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_565883138c05ff17, []int{55}
}
func (m *DeleteCommentRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteCommentRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteCommentRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteCommentRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteCommentRequest.Merge(m, src)
}
func (m *DeleteCommentRequest) XXX_Size() int {
	return m.Size()
}
func (m *DeleteCommentRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteCommentRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteCommentRequest proto.InternalMessageInfo

func (m *DeleteCommentRequest) GetCurrentUid() uint64 {
	if m != nil {
		return m.CurrentUid
	}
	return 0
}

func (m *DeleteCommentRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type CreateCommentResponse struct {
	Code    uint64   `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Comment *Comment `protobuf:"bytes,2,opt,name=comment,proto3" json:"comment,omitempty"`
}

func (m *CreateCommentResponse) Reset()         { *m = CreateCommentResponse{} }
func (m *CreateCommentResponse) String() string { return proto.CompactTextString(m) }
func (*CreateCommentResponse) ProtoMessage()    {}
func (*CreateCommentResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_565883138c05ff17, []int{56}
}
func (m *CreateCommentResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateCommentResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateCommentResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateCommentResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateCommentResponse.Merge(m, src)
}
func (m *CreateCommentResponse) XXX_Size() int {
	return m.Size()
}
func (m *CreateCommentResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateCommentResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CreateCommentResponse proto.InternalMessageInfo

func (m *CreateCommentResponse) GetCode() uint64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *CreateCommentResponse) GetComment() *Comment {
	if m != nil {
		return m.Comment
	}
	return nil
}

type NewCommentMeta struct {
	Uid                  uint64 `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	GroupId              string `protobuf:"bytes,2,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	CommentId            string `protobuf:"bytes,3,opt,name=comment_id,json=commentId,proto3" json:"comment_id,omitempty"`
	Content              string `protobuf:"bytes,4,opt,name=content,proto3" json:"content,omitempty"`
	ParentContent        string `protobuf:"bytes,5,opt,name=parent_content,json=parentContent,proto3" json:"parent_content,omitempty"`
	ParentUserName       string `protobuf:"bytes,6,opt,name=parent_user_name,json=parentUserName,proto3" json:"parent_user_name,omitempty"`
	StatusContentSummary string `protobuf:"bytes,7,opt,name=status_content_summary,json=statusContentSummary,proto3" json:"status_content_summary,omitempty"`
	StatusImageUrl       string `protobuf:"bytes,8,opt,name=status_image_url,json=statusImageUrl,proto3" json:"status_image_url,omitempty"`
}

func (m *NewCommentMeta) Reset()         { *m = NewCommentMeta{} }
func (m *NewCommentMeta) String() string { return proto.CompactTextString(m) }
func (*NewCommentMeta) ProtoMessage()    {}
func (*NewCommentMeta) Descriptor() ([]byte, []int) {
	return fileDescriptor_565883138c05ff17, []int{57}
}
func (m *NewCommentMeta) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NewCommentMeta) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NewCommentMeta.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NewCommentMeta) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewCommentMeta.Merge(m, src)
}
func (m *NewCommentMeta) XXX_Size() int {
	return m.Size()
}
func (m *NewCommentMeta) XXX_DiscardUnknown() {
	xxx_messageInfo_NewCommentMeta.DiscardUnknown(m)
}

var xxx_messageInfo_NewCommentMeta proto.InternalMessageInfo

func (m *NewCommentMeta) GetUid() uint64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *NewCommentMeta) GetGroupId() string {
	if m != nil {
		return m.GroupId
	}
	return ""
}

func (m *NewCommentMeta) GetCommentId() string {
	if m != nil {
		return m.CommentId
	}
	return ""
}

func (m *NewCommentMeta) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *NewCommentMeta) GetParentContent() string {
	if m != nil {
		return m.ParentContent
	}
	return ""
}

func (m *NewCommentMeta) GetParentUserName() string {
	if m != nil {
		return m.ParentUserName
	}
	return ""
}

func (m *NewCommentMeta) GetStatusContentSummary() string {
	if m != nil {
		return m.StatusContentSummary
	}
	return ""
}

func (m *NewCommentMeta) GetStatusImageUrl() string {
	if m != nil {
		return m.StatusImageUrl
	}
	return ""
}

type NewNftCommentMeta struct {
	Uid            uint64 `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	GroupId        string `protobuf:"bytes,2,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	CommentId      string `protobuf:"bytes,3,opt,name=comment_id,json=commentId,proto3" json:"comment_id,omitempty"`
	Content        string `protobuf:"bytes,4,opt,name=content,proto3" json:"content,omitempty"`
	ParentContent  string `protobuf:"bytes,5,opt,name=parent_content,json=parentContent,proto3" json:"parent_content,omitempty"`
	ParentUserName string `protobuf:"bytes,6,opt,name=parent_user_name,json=parentUserName,proto3" json:"parent_user_name,omitempty"`
	NftAssetName   string `protobuf:"bytes,7,opt,name=nft_asset_name,json=nftAssetName,proto3" json:"nft_asset_name,omitempty"`
	NftAssetImage  string `protobuf:"bytes,8,opt,name=nft_asset_image,json=nftAssetImage,proto3" json:"nft_asset_image,omitempty"`
}

func (m *NewNftCommentMeta) Reset()         { *m = NewNftCommentMeta{} }
func (m *NewNftCommentMeta) String() string { return proto.CompactTextString(m) }
func (*NewNftCommentMeta) ProtoMessage()    {}
func (*NewNftCommentMeta) Descriptor() ([]byte, []int) {
	return fileDescriptor_565883138c05ff17, []int{58}
}
func (m *NewNftCommentMeta) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NewNftCommentMeta) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NewNftCommentMeta.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NewNftCommentMeta) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewNftCommentMeta.Merge(m, src)
}
func (m *NewNftCommentMeta) XXX_Size() int {
	return m.Size()
}
func (m *NewNftCommentMeta) XXX_DiscardUnknown() {
	xxx_messageInfo_NewNftCommentMeta.DiscardUnknown(m)
}

var xxx_messageInfo_NewNftCommentMeta proto.InternalMessageInfo

func (m *NewNftCommentMeta) GetUid() uint64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *NewNftCommentMeta) GetGroupId() string {
	if m != nil {
		return m.GroupId
	}
	return ""
}

func (m *NewNftCommentMeta) GetCommentId() string {
	if m != nil {
		return m.CommentId
	}
	return ""
}

func (m *NewNftCommentMeta) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *NewNftCommentMeta) GetParentContent() string {
	if m != nil {
		return m.ParentContent
	}
	return ""
}

func (m *NewNftCommentMeta) GetParentUserName() string {
	if m != nil {
		return m.ParentUserName
	}
	return ""
}

func (m *NewNftCommentMeta) GetNftAssetName() string {
	if m != nil {
		return m.NftAssetName
	}
	return ""
}

func (m *NewNftCommentMeta) GetNftAssetImage() string {
	if m != nil {
		return m.NftAssetImage
	}
	return ""
}

type NewLikeNftCommentMeta struct {
	Uid             uint64 `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	CommentId       string `protobuf:"bytes,2,opt,name=comment_id,json=commentId,proto3" json:"comment_id,omitempty"`
	CommentUsername string `protobuf:"bytes,3,opt,name=comment_username,json=commentUsername,proto3" json:"comment_username,omitempty"`
	CommentContent  string `protobuf:"bytes,4,opt,name=comment_content,json=commentContent,proto3" json:"comment_content,omitempty"`
}

func (m *NewLikeNftCommentMeta) Reset()         { *m = NewLikeNftCommentMeta{} }
func (m *NewLikeNftCommentMeta) String() string { return proto.CompactTextString(m) }
func (*NewLikeNftCommentMeta) ProtoMessage()    {}
func (*NewLikeNftCommentMeta) Descriptor() ([]byte, []int) {
	return fileDescriptor_565883138c05ff17, []int{59}
}
func (m *NewLikeNftCommentMeta) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NewLikeNftCommentMeta) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NewLikeNftCommentMeta.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NewLikeNftCommentMeta) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewLikeNftCommentMeta.Merge(m, src)
}
func (m *NewLikeNftCommentMeta) XXX_Size() int {
	return m.Size()
}
func (m *NewLikeNftCommentMeta) XXX_DiscardUnknown() {
	xxx_messageInfo_NewLikeNftCommentMeta.DiscardUnknown(m)
}

var xxx_messageInfo_NewLikeNftCommentMeta proto.InternalMessageInfo

func (m *NewLikeNftCommentMeta) GetUid() uint64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *NewLikeNftCommentMeta) GetCommentId() string {
	if m != nil {
		return m.CommentId
	}
	return ""
}

func (m *NewLikeNftCommentMeta) GetCommentUsername() string {
	if m != nil {
		return m.CommentUsername
	}
	return ""
}

func (m *NewLikeNftCommentMeta) GetCommentContent() string {
	if m != nil {
		return m.CommentContent
	}
	return ""
}

type NewLikeCommentMeta struct {
	Uid             uint64 `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	CommentId       string `protobuf:"bytes,2,opt,name=comment_id,json=commentId,proto3" json:"comment_id,omitempty"`
	CommentUsername string `protobuf:"bytes,3,opt,name=comment_username,json=commentUsername,proto3" json:"comment_username,omitempty"`
	CommentContent  string `protobuf:"bytes,4,opt,name=comment_content,json=commentContent,proto3" json:"comment_content,omitempty"`
}

func (m *NewLikeCommentMeta) Reset()         { *m = NewLikeCommentMeta{} }
func (m *NewLikeCommentMeta) String() string { return proto.CompactTextString(m) }
func (*NewLikeCommentMeta) ProtoMessage()    {}
func (*NewLikeCommentMeta) Descriptor() ([]byte, []int) {
	return fileDescriptor_565883138c05ff17, []int{60}
}
func (m *NewLikeCommentMeta) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NewLikeCommentMeta) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NewLikeCommentMeta.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NewLikeCommentMeta) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewLikeCommentMeta.Merge(m, src)
}
func (m *NewLikeCommentMeta) XXX_Size() int {
	return m.Size()
}
func (m *NewLikeCommentMeta) XXX_DiscardUnknown() {
	xxx_messageInfo_NewLikeCommentMeta.DiscardUnknown(m)
}

var xxx_messageInfo_NewLikeCommentMeta proto.InternalMessageInfo

func (m *NewLikeCommentMeta) GetUid() uint64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *NewLikeCommentMeta) GetCommentId() string {
	if m != nil {
		return m.CommentId
	}
	return ""
}

func (m *NewLikeCommentMeta) GetCommentUsername() string {
	if m != nil {
		return m.CommentUsername
	}
	return ""
}

func (m *NewLikeCommentMeta) GetCommentContent() string {
	if m != nil {
		return m.CommentContent
	}
	return ""
}

type NewLikeNftMeta struct {
	Uid           uint64 `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	NftAssetId    string `protobuf:"bytes,2,opt,name=nft_asset_id,json=nftAssetId,proto3" json:"nft_asset_id,omitempty"`
	NftAssetName  string `protobuf:"bytes,3,opt,name=nft_asset_name,json=nftAssetName,proto3" json:"nft_asset_name,omitempty"`
	NftAssetImage string `protobuf:"bytes,4,opt,name=nft_asset_image,json=nftAssetImage,proto3" json:"nft_asset_image,omitempty"`
}

func (m *NewLikeNftMeta) Reset()         { *m = NewLikeNftMeta{} }
func (m *NewLikeNftMeta) String() string { return proto.CompactTextString(m) }
func (*NewLikeNftMeta) ProtoMessage()    {}
func (*NewLikeNftMeta) Descriptor() ([]byte, []int) {
	return fileDescriptor_565883138c05ff17, []int{61}
}
func (m *NewLikeNftMeta) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NewLikeNftMeta) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NewLikeNftMeta.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NewLikeNftMeta) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewLikeNftMeta.Merge(m, src)
}
func (m *NewLikeNftMeta) XXX_Size() int {
	return m.Size()
}
func (m *NewLikeNftMeta) XXX_DiscardUnknown() {
	xxx_messageInfo_NewLikeNftMeta.DiscardUnknown(m)
}

var xxx_messageInfo_NewLikeNftMeta proto.InternalMessageInfo

func (m *NewLikeNftMeta) GetUid() uint64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *NewLikeNftMeta) GetNftAssetId() string {
	if m != nil {
		return m.NftAssetId
	}
	return ""
}

func (m *NewLikeNftMeta) GetNftAssetName() string {
	if m != nil {
		return m.NftAssetName
	}
	return ""
}

func (m *NewLikeNftMeta) GetNftAssetImage() string {
	if m != nil {
		return m.NftAssetImage
	}
	return ""
}

type NewLikeStatusMeta struct {
	Uid            uint64 `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	StatusId       string `protobuf:"bytes,2,opt,name=status_id,json=statusId,proto3" json:"status_id,omitempty"`
	StatusContent  string `protobuf:"bytes,3,opt,name=status_content,json=statusContent,proto3" json:"status_content,omitempty"`
	StatusImageUrl string `protobuf:"bytes,4,opt,name=status_image_url,json=statusImageUrl,proto3" json:"status_image_url,omitempty"`
}

func (m *NewLikeStatusMeta) Reset()         { *m = NewLikeStatusMeta{} }
func (m *NewLikeStatusMeta) String() string { return proto.CompactTextString(m) }
func (*NewLikeStatusMeta) ProtoMessage()    {}
func (*NewLikeStatusMeta) Descriptor() ([]byte, []int) {
	return fileDescriptor_565883138c05ff17, []int{62}
}
func (m *NewLikeStatusMeta) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NewLikeStatusMeta) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NewLikeStatusMeta.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NewLikeStatusMeta) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewLikeStatusMeta.Merge(m, src)
}
func (m *NewLikeStatusMeta) XXX_Size() int {
	return m.Size()
}
func (m *NewLikeStatusMeta) XXX_DiscardUnknown() {
	xxx_messageInfo_NewLikeStatusMeta.DiscardUnknown(m)
}

var xxx_messageInfo_NewLikeStatusMeta proto.InternalMessageInfo

func (m *NewLikeStatusMeta) GetUid() uint64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *NewLikeStatusMeta) GetStatusId() string {
	if m != nil {
		return m.StatusId
	}
	return ""
}

func (m *NewLikeStatusMeta) GetStatusContent() string {
	if m != nil {
		return m.StatusContent
	}
	return ""
}

func (m *NewLikeStatusMeta) GetStatusImageUrl() string {
	if m != nil {
		return m.StatusImageUrl
	}
	return ""
}

type NewFansMeta struct {
	Uid         uint64 `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	FanUsername string `protobuf:"bytes,2,opt,name=fan_username,json=fanUsername,proto3" json:"fan_username,omitempty"`
}

func (m *NewFansMeta) Reset()         { *m = NewFansMeta{} }
func (m *NewFansMeta) String() string { return proto.CompactTextString(m) }
func (*NewFansMeta) ProtoMessage()    {}
func (*NewFansMeta) Descriptor() ([]byte, []int) {
	return fileDescriptor_565883138c05ff17, []int{63}
}
func (m *NewFansMeta) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NewFansMeta) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NewFansMeta.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NewFansMeta) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewFansMeta.Merge(m, src)
}
func (m *NewFansMeta) XXX_Size() int {
	return m.Size()
}
func (m *NewFansMeta) XXX_DiscardUnknown() {
	xxx_messageInfo_NewFansMeta.DiscardUnknown(m)
}

var xxx_messageInfo_NewFansMeta proto.InternalMessageInfo

func (m *NewFansMeta) GetUid() uint64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *NewFansMeta) GetFanUsername() string {
	if m != nil {
		return m.FanUsername
	}
	return ""
}

type NewForwardMeta struct {
	Uid            uint64 `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	StatusId       string `protobuf:"bytes,2,opt,name=status_id,json=statusId,proto3" json:"status_id,omitempty"`
	ForwardContent string `protobuf:"bytes,3,opt,name=forward_content,json=forwardContent,proto3" json:"forward_content,omitempty"`
	ContentSummary string `protobuf:"bytes,4,opt,name=content_summary,json=contentSummary,proto3" json:"content_summary,omitempty"`
	ImageUrl       string `protobuf:"bytes,5,opt,name=image_url,json=imageUrl,proto3" json:"image_url,omitempty"`
}

func (m *NewForwardMeta) Reset()         { *m = NewForwardMeta{} }
func (m *NewForwardMeta) String() string { return proto.CompactTextString(m) }
func (*NewForwardMeta) ProtoMessage()    {}
func (*NewForwardMeta) Descriptor() ([]byte, []int) {
	return fileDescriptor_565883138c05ff17, []int{64}
}
func (m *NewForwardMeta) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NewForwardMeta) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NewForwardMeta.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NewForwardMeta) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewForwardMeta.Merge(m, src)
}
func (m *NewForwardMeta) XXX_Size() int {
	return m.Size()
}
func (m *NewForwardMeta) XXX_DiscardUnknown() {
	xxx_messageInfo_NewForwardMeta.DiscardUnknown(m)
}

var xxx_messageInfo_NewForwardMeta proto.InternalMessageInfo

func (m *NewForwardMeta) GetUid() uint64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *NewForwardMeta) GetStatusId() string {
	if m != nil {
		return m.StatusId
	}
	return ""
}

func (m *NewForwardMeta) GetForwardContent() string {
	if m != nil {
		return m.ForwardContent
	}
	return ""
}

func (m *NewForwardMeta) GetContentSummary() string {
	if m != nil {
		return m.ContentSummary
	}
	return ""
}

func (m *NewForwardMeta) GetImageUrl() string {
	if m != nil {
		return m.ImageUrl
	}
	return ""
}

type Message struct {
	Id                    string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Uid                   uint64                 `protobuf:"varint,2,opt,name=uid,proto3" json:"uid,omitempty"`
	MessageType           string                 `protobuf:"bytes,3,opt,name=message_type,json=messageType,proto3" json:"message_type,omitempty"`
	State                 string                 `protobuf:"bytes,4,opt,name=state,proto3" json:"state,omitempty"`
	FromUser              *UserInfo              `protobuf:"bytes,5,opt,name=from_user,json=fromUser,proto3" json:"from_user,omitempty"`
	CreatedAt             uint64                 `protobuf:"varint,6,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	Status                *StatusInfo            `protobuf:"bytes,7,opt,name=status,proto3" json:"status,omitempty"`
	StatusIsDeleted       bool                   `protobuf:"varint,8,opt,name=status_is_deleted,json=statusIsDeleted,proto3" json:"status_is_deleted,omitempty"`
	CommentIsDeleted      bool                   `protobuf:"varint,9,opt,name=comment_is_deleted,json=commentIsDeleted,proto3" json:"comment_is_deleted,omitempty"`
	NewCommentMeta        *NewCommentMeta        `protobuf:"bytes,21,opt,name=new_comment_meta,json=newCommentMeta,proto3" json:"new_comment_meta,omitempty"`
	NewLikeStatusMeta     *NewLikeStatusMeta     `protobuf:"bytes,22,opt,name=new_like_status_meta,json=newLikeStatusMeta,proto3" json:"new_like_status_meta,omitempty"`
	NewFansMeta           *NewFansMeta           `protobuf:"bytes,23,opt,name=new_fans_meta,json=newFansMeta,proto3" json:"new_fans_meta,omitempty"`
	NewForwardMeta        *NewForwardMeta        `protobuf:"bytes,24,opt,name=new_forward_meta,json=newForwardMeta,proto3" json:"new_forward_meta,omitempty"`
	NewLikeCommentMeta    *NewLikeCommentMeta    `protobuf:"bytes,25,opt,name=new_like_comment_meta,json=newLikeCommentMeta,proto3" json:"new_like_comment_meta,omitempty"`
	NewNftComment         *NewNftCommentMeta     `protobuf:"bytes,26,opt,name=new_nft_comment,json=newNftComment,proto3" json:"new_nft_comment,omitempty"`
	NewLikeNft            *NewLikeNftMeta        `protobuf:"bytes,27,opt,name=new_like_nft,json=newLikeNft,proto3" json:"new_like_nft,omitempty"`
	NewLikeNftCommentMeta *NewLikeNftCommentMeta `protobuf:"bytes,28,opt,name=new_like_nft_comment_meta,json=newLikeNftCommentMeta,proto3" json:"new_like_nft_comment_meta,omitempty"`
	NftAsset              *NftAsset              `protobuf:"bytes,29,opt,name=nft_asset,json=nftAsset,proto3" json:"nft_asset,omitempty"`
}

func (m *Message) Reset()         { *m = Message{} }
func (m *Message) String() string { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()    {}
func (*Message) Descriptor() ([]byte, []int) {
	return fileDescriptor_565883138c05ff17, []int{65}
}
func (m *Message) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Message) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Message.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Message) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Message.Merge(m, src)
}
func (m *Message) XXX_Size() int {
	return m.Size()
}
func (m *Message) XXX_DiscardUnknown() {
	xxx_messageInfo_Message.DiscardUnknown(m)
}

var xxx_messageInfo_Message proto.InternalMessageInfo

func (m *Message) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Message) GetUid() uint64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *Message) GetMessageType() string {
	if m != nil {
		return m.MessageType
	}
	return ""
}

func (m *Message) GetState() string {
	if m != nil {
		return m.State
	}
	return ""
}

func (m *Message) GetFromUser() *UserInfo {
	if m != nil {
		return m.FromUser
	}
	return nil
}

func (m *Message) GetCreatedAt() uint64 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

func (m *Message) GetStatus() *StatusInfo {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *Message) GetStatusIsDeleted() bool {
	if m != nil {
		return m.StatusIsDeleted
	}
	return false
}

func (m *Message) GetCommentIsDeleted() bool {
	if m != nil {
		return m.CommentIsDeleted
	}
	return false
}

func (m *Message) GetNewCommentMeta() *NewCommentMeta {
	if m != nil {
		return m.NewCommentMeta
	}
	return nil
}

func (m *Message) GetNewLikeStatusMeta() *NewLikeStatusMeta {
	if m != nil {
		return m.NewLikeStatusMeta
	}
	return nil
}

func (m *Message) GetNewFansMeta() *NewFansMeta {
	if m != nil {
		return m.NewFansMeta
	}
	return nil
}

func (m *Message) GetNewForwardMeta() *NewForwardMeta {
	if m != nil {
		return m.NewForwardMeta
	}
	return nil
}

func (m *Message) GetNewLikeCommentMeta() *NewLikeCommentMeta {
	if m != nil {
		return m.NewLikeCommentMeta
	}
	return nil
}

func (m *Message) GetNewNftComment() *NewNftCommentMeta {
	if m != nil {
		return m.NewNftComment
	}
	return nil
}

func (m *Message) GetNewLikeNft() *NewLikeNftMeta {
	if m != nil {
		return m.NewLikeNft
	}
	return nil
}

func (m *Message) GetNewLikeNftCommentMeta() *NewLikeNftCommentMeta {
	if m != nil {
		return m.NewLikeNftCommentMeta
	}
	return nil
}

func (m *Message) GetNftAsset() *NftAsset {
	if m != nil {
		return m.NftAsset
	}
	return nil
}

type ListMessageRequest struct {
	CurrentUid uint64     `protobuf:"varint,1,opt,name=current_uid,json=currentUid,proto3" json:"current_uid,omitempty"`
	State      string     `protobuf:"bytes,2,opt,name=state,proto3" json:"state,omitempty"`
	Paginator  *PageQuick `protobuf:"bytes,3,opt,name=paginator,proto3" json:"paginator,omitempty"`
}

func (m *ListMessageRequest) Reset()         { *m = ListMessageRequest{} }
func (m *ListMessageRequest) String() string { return proto.CompactTextString(m) }
func (*ListMessageRequest) ProtoMessage()    {}
func (*ListMessageRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_565883138c05ff17, []int{66}
}
func (m *ListMessageRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListMessageRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListMessageRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListMessageRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListMessageRequest.Merge(m, src)
}
func (m *ListMessageRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListMessageRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListMessageRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListMessageRequest proto.InternalMessageInfo

func (m *ListMessageRequest) GetCurrentUid() uint64 {
	if m != nil {
		return m.CurrentUid
	}
	return 0
}

func (m *ListMessageRequest) GetState() string {
	if m != nil {
		return m.State
	}
	return ""
}

func (m *ListMessageRequest) GetPaginator() *PageQuick {
	if m != nil {
		return m.Paginator
	}
	return nil
}

type ListMessageResponse struct {
	Code      uint64     `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Messages  []*Message `protobuf:"bytes,2,rep,name=messages,proto3" json:"messages,omitempty"`
	Paginator *PageQuick `protobuf:"bytes,3,opt,name=paginator,proto3" json:"paginator,omitempty"`
}

func (m *ListMessageResponse) Reset()         { *m = ListMessageResponse{} }
func (m *ListMessageResponse) String() string { return proto.CompactTextString(m) }
func (*ListMessageResponse) ProtoMessage()    {}
func (*ListMessageResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_565883138c05ff17, []int{67}
}
func (m *ListMessageResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListMessageResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListMessageResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListMessageResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListMessageResponse.Merge(m, src)
}
func (m *ListMessageResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListMessageResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListMessageResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListMessageResponse proto.InternalMessageInfo

func (m *ListMessageResponse) GetCode() uint64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *ListMessageResponse) GetMessages() []*Message {
	if m != nil {
		return m.Messages
	}
	return nil
}

func (m *ListMessageResponse) GetPaginator() *PageQuick {
	if m != nil {
		return m.Paginator
	}
	return nil
}

type ReadMessageRequest struct {
	CurrentUid uint64   `protobuf:"varint,1,opt,name=current_uid,json=currentUid,proto3" json:"current_uid,omitempty"`
	LatestID   string   `protobuf:"bytes,2,opt,name=latestID,proto3" json:"latestID,omitempty"`
	Ids        []string `protobuf:"bytes,3,rep,name=ids,proto3" json:"ids,omitempty"`
}

func (m *ReadMessageRequest) Reset()         { *m = ReadMessageRequest{} }
func (m *ReadMessageRequest) String() string { return proto.CompactTextString(m) }
func (*ReadMessageRequest) ProtoMessage()    {}
func (*ReadMessageRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_565883138c05ff17, []int{68}
}
func (m *ReadMessageRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReadMessageRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReadMessageRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReadMessageRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReadMessageRequest.Merge(m, src)
}
func (m *ReadMessageRequest) XXX_Size() int {
	return m.Size()
}
func (m *ReadMessageRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ReadMessageRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ReadMessageRequest proto.InternalMessageInfo

func (m *ReadMessageRequest) GetCurrentUid() uint64 {
	if m != nil {
		return m.CurrentUid
	}
	return 0
}

func (m *ReadMessageRequest) GetLatestID() string {
	if m != nil {
		return m.LatestID
	}
	return ""
}

func (m *ReadMessageRequest) GetIds() []string {
	if m != nil {
		return m.Ids
	}
	return nil
}

type GetMessageSummaryRequest struct {
	CurrentUid uint64 `protobuf:"varint,1,opt,name=current_uid,json=currentUid,proto3" json:"current_uid,omitempty"`
}

func (m *GetMessageSummaryRequest) Reset()         { *m = GetMessageSummaryRequest{} }
func (m *GetMessageSummaryRequest) String() string { return proto.CompactTextString(m) }
func (*GetMessageSummaryRequest) ProtoMessage()    {}
func (*GetMessageSummaryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_565883138c05ff17, []int{69}
}
func (m *GetMessageSummaryRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetMessageSummaryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetMessageSummaryRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetMessageSummaryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetMessageSummaryRequest.Merge(m, src)
}
func (m *GetMessageSummaryRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetMessageSummaryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetMessageSummaryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetMessageSummaryRequest proto.InternalMessageInfo

func (m *GetMessageSummaryRequest) GetCurrentUid() uint64 {
	if m != nil {
		return m.CurrentUid
	}
	return 0
}

type MessageSummaryResponse struct {
	Code    uint64          `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Summary *MessageSummary `protobuf:"bytes,2,opt,name=summary,proto3" json:"summary,omitempty"`
}

func (m *MessageSummaryResponse) Reset()         { *m = MessageSummaryResponse{} }
func (m *MessageSummaryResponse) String() string { return proto.CompactTextString(m) }
func (*MessageSummaryResponse) ProtoMessage()    {}
func (*MessageSummaryResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_565883138c05ff17, []int{70}
}
func (m *MessageSummaryResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MessageSummaryResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MessageSummaryResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MessageSummaryResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MessageSummaryResponse.Merge(m, src)
}
func (m *MessageSummaryResponse) XXX_Size() int {
	return m.Size()
}
func (m *MessageSummaryResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MessageSummaryResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MessageSummaryResponse proto.InternalMessageInfo

func (m *MessageSummaryResponse) GetCode() uint64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *MessageSummaryResponse) GetSummary() *MessageSummary {
	if m != nil {
		return m.Summary
	}
	return nil
}

type MessageSummary struct {
	LatestMessage      *Message `protobuf:"bytes,1,opt,name=latest_message,json=latestMessage,proto3" json:"latest_message,omitempty"`
	Total              uint32   `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
	NotificationsCount uint32   `protobuf:"varint,3,opt,name=notifications_count,json=notificationsCount,proto3" json:"notifications_count,omitempty"`
	UsersCount         uint32   `protobuf:"varint,4,opt,name=users_count,json=usersCount,proto3" json:"users_count,omitempty"`
}

func (m *MessageSummary) Reset()         { *m = MessageSummary{} }
func (m *MessageSummary) String() string { return proto.CompactTextString(m) }
func (*MessageSummary) ProtoMessage()    {}
func (*MessageSummary) Descriptor() ([]byte, []int) {
	return fileDescriptor_565883138c05ff17, []int{71}
}
func (m *MessageSummary) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MessageSummary) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MessageSummary.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MessageSummary) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MessageSummary.Merge(m, src)
}
func (m *MessageSummary) XXX_Size() int {
	return m.Size()
}
func (m *MessageSummary) XXX_DiscardUnknown() {
	xxx_messageInfo_MessageSummary.DiscardUnknown(m)
}

var xxx_messageInfo_MessageSummary proto.InternalMessageInfo

func (m *MessageSummary) GetLatestMessage() *Message {
	if m != nil {
		return m.LatestMessage
	}
	return nil
}

func (m *MessageSummary) GetTotal() uint32 {
	if m != nil {
		return m.Total
	}
	return 0
}

func (m *MessageSummary) GetNotificationsCount() uint32 {
	if m != nil {
		return m.NotificationsCount
	}
	return 0
}

func (m *MessageSummary) GetUsersCount() uint32 {
	if m != nil {
		return m.UsersCount
	}
	return 0
}

type LatestFollowingRequest struct {
	CurrentUid uint64 `protobuf:"varint,1,opt,name=current_uid,json=currentUid,proto3" json:"current_uid,omitempty"`
}

func (m *LatestFollowingRequest) Reset()         { *m = LatestFollowingRequest{} }
func (m *LatestFollowingRequest) String() string { return proto.CompactTextString(m) }
func (*LatestFollowingRequest) ProtoMessage()    {}
func (*LatestFollowingRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_565883138c05ff17, []int{72}
}
func (m *LatestFollowingRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LatestFollowingRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LatestFollowingRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LatestFollowingRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LatestFollowingRequest.Merge(m, src)
}
func (m *LatestFollowingRequest) XXX_Size() int {
	return m.Size()
}
func (m *LatestFollowingRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_LatestFollowingRequest.DiscardUnknown(m)
}

var xxx_messageInfo_LatestFollowingRequest proto.InternalMessageInfo

func (m *LatestFollowingRequest) GetCurrentUid() uint64 {
	if m != nil {
		return m.CurrentUid
	}
	return 0
}

type Following struct {
	User   *UserInfo `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	Unread bool      `protobuf:"varint,2,opt,name=unread,proto3" json:"unread,omitempty"`
}

func (m *Following) Reset()         { *m = Following{} }
func (m *Following) String() string { return proto.CompactTextString(m) }
func (*Following) ProtoMessage()    {}
func (*Following) Descriptor() ([]byte, []int) {
	return fileDescriptor_565883138c05ff17, []int{73}
}
func (m *Following) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Following) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Following.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Following) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Following.Merge(m, src)
}
func (m *Following) XXX_Size() int {
	return m.Size()
}
func (m *Following) XXX_DiscardUnknown() {
	xxx_messageInfo_Following.DiscardUnknown(m)
}

var xxx_messageInfo_Following proto.InternalMessageInfo

func (m *Following) GetUser() *UserInfo {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *Following) GetUnread() bool {
	if m != nil {
		return m.Unread
	}
	return false
}

type LatestFollowingResponse struct {
	Code       uint64       `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Followings []*Following `protobuf:"bytes,2,rep,name=followings,proto3" json:"followings,omitempty"`
}

func (m *LatestFollowingResponse) Reset()         { *m = LatestFollowingResponse{} }
func (m *LatestFollowingResponse) String() string { return proto.CompactTextString(m) }
func (*LatestFollowingResponse) ProtoMessage()    {}
func (*LatestFollowingResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_565883138c05ff17, []int{74}
}
func (m *LatestFollowingResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LatestFollowingResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LatestFollowingResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LatestFollowingResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LatestFollowingResponse.Merge(m, src)
}
func (m *LatestFollowingResponse) XXX_Size() int {
	return m.Size()
}
func (m *LatestFollowingResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_LatestFollowingResponse.DiscardUnknown(m)
}

var xxx_messageInfo_LatestFollowingResponse proto.InternalMessageInfo

func (m *LatestFollowingResponse) GetCode() uint64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *LatestFollowingResponse) GetFollowings() []*Following {
	if m != nil {
		return m.Followings
	}
	return nil
}

type Blacklist struct {
	User      *UserInfo `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	CreatedAt uint64    `protobuf:"varint,2,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
}

func (m *Blacklist) Reset()         { *m = Blacklist{} }
func (m *Blacklist) String() string { return proto.CompactTextString(m) }
func (*Blacklist) ProtoMessage()    {}
func (*Blacklist) Descriptor() ([]byte, []int) {
	return fileDescriptor_565883138c05ff17, []int{75}
}
func (m *Blacklist) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Blacklist) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Blacklist.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Blacklist) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Blacklist.Merge(m, src)
}
func (m *Blacklist) XXX_Size() int {
	return m.Size()
}
func (m *Blacklist) XXX_DiscardUnknown() {
	xxx_messageInfo_Blacklist.DiscardUnknown(m)
}

var xxx_messageInfo_Blacklist proto.InternalMessageInfo

func (m *Blacklist) GetUser() *UserInfo {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *Blacklist) GetCreatedAt() uint64 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

type ListBlacklistRequest struct {
	Uid       uint64     `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Paginator *PageQuick `protobuf:"bytes,2,opt,name=paginator,proto3" json:"paginator,omitempty"`
}

func (m *ListBlacklistRequest) Reset()         { *m = ListBlacklistRequest{} }
func (m *ListBlacklistRequest) String() string { return proto.CompactTextString(m) }
func (*ListBlacklistRequest) ProtoMessage()    {}
func (*ListBlacklistRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_565883138c05ff17, []int{76}
}
func (m *ListBlacklistRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListBlacklistRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListBlacklistRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListBlacklistRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListBlacklistRequest.Merge(m, src)
}
func (m *ListBlacklistRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListBlacklistRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListBlacklistRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListBlacklistRequest proto.InternalMessageInfo

func (m *ListBlacklistRequest) GetUid() uint64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *ListBlacklistRequest) GetPaginator() *PageQuick {
	if m != nil {
		return m.Paginator
	}
	return nil
}

type ListBlacklistResponse struct {
	Code       uint64       `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Blacklists []*Blacklist `protobuf:"bytes,2,rep,name=blacklists,proto3" json:"blacklists,omitempty"`
	Paginator  *PageQuick   `protobuf:"bytes,3,opt,name=paginator,proto3" json:"paginator,omitempty"`
}

func (m *ListBlacklistResponse) Reset()         { *m = ListBlacklistResponse{} }
func (m *ListBlacklistResponse) String() string { return proto.CompactTextString(m) }
func (*ListBlacklistResponse) ProtoMessage()    {}
func (*ListBlacklistResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_565883138c05ff17, []int{77}
}
func (m *ListBlacklistResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListBlacklistResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListBlacklistResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListBlacklistResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListBlacklistResponse.Merge(m, src)
}
func (m *ListBlacklistResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListBlacklistResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListBlacklistResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListBlacklistResponse proto.InternalMessageInfo

func (m *ListBlacklistResponse) GetCode() uint64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *ListBlacklistResponse) GetBlacklists() []*Blacklist {
	if m != nil {
		return m.Blacklists
	}
	return nil
}

func (m *ListBlacklistResponse) GetPaginator() *PageQuick {
	if m != nil {
		return m.Paginator
	}
	return nil
}

type CreateBlacklistRequest struct {
	Uid       uint64 `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	TargetUid uint64 `protobuf:"varint,2,opt,name=target_uid,json=targetUid,proto3" json:"target_uid,omitempty"`
}

func (m *CreateBlacklistRequest) Reset()         { *m = CreateBlacklistRequest{} }
func (m *CreateBlacklistRequest) String() string { return proto.CompactTextString(m) }
func (*CreateBlacklistRequest) ProtoMessage()    {}
func (*CreateBlacklistRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_565883138c05ff17, []int{78}
}
func (m *CreateBlacklistRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateBlacklistRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateBlacklistRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateBlacklistRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateBlacklistRequest.Merge(m, src)
}
func (m *CreateBlacklistRequest) XXX_Size() int {
	return m.Size()
}
func (m *CreateBlacklistRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateBlacklistRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateBlacklistRequest proto.InternalMessageInfo

func (m *CreateBlacklistRequest) GetUid() uint64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *CreateBlacklistRequest) GetTargetUid() uint64 {
	if m != nil {
		return m.TargetUid
	}
	return 0
}

type DeleteBlacklistRequest struct {
	Uid       uint64 `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	TargetUid uint64 `protobuf:"varint,2,opt,name=target_uid,json=targetUid,proto3" json:"target_uid,omitempty"`
}

func (m *DeleteBlacklistRequest) Reset()         { *m = DeleteBlacklistRequest{} }
func (m *DeleteBlacklistRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteBlacklistRequest) ProtoMessage()    {}
func (*DeleteBlacklistRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_565883138c05ff17, []int{79}
}
func (m *DeleteBlacklistRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteBlacklistRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteBlacklistRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteBlacklistRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteBlacklistRequest.Merge(m, src)
}
func (m *DeleteBlacklistRequest) XXX_Size() int {
	return m.Size()
}
func (m *DeleteBlacklistRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteBlacklistRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteBlacklistRequest proto.InternalMessageInfo

func (m *DeleteBlacklistRequest) GetUid() uint64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *DeleteBlacklistRequest) GetTargetUid() uint64 {
	if m != nil {
		return m.TargetUid
	}
	return 0
}

type ListLikeRequest struct {
	Uid        uint64     `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	CurrentUid uint64     `protobuf:"varint,2,opt,name=current_uid,json=currentUid,proto3" json:"current_uid,omitempty"`
	Paginator  *PageQuick `protobuf:"bytes,3,opt,name=paginator,proto3" json:"paginator,omitempty"`
}

func (m *ListLikeRequest) Reset()         { *m = ListLikeRequest{} }
func (m *ListLikeRequest) String() string { return proto.CompactTextString(m) }
func (*ListLikeRequest) ProtoMessage()    {}
func (*ListLikeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_565883138c05ff17, []int{80}
}
func (m *ListLikeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListLikeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListLikeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListLikeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListLikeRequest.Merge(m, src)
}
func (m *ListLikeRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListLikeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListLikeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListLikeRequest proto.InternalMessageInfo

func (m *ListLikeRequest) GetUid() uint64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *ListLikeRequest) GetCurrentUid() uint64 {
	if m != nil {
		return m.CurrentUid
	}
	return 0
}

func (m *ListLikeRequest) GetPaginator() *PageQuick {
	if m != nil {
		return m.Paginator
	}
	return nil
}

type StatusLike struct {
	Status    *StatusInfo `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	CreatedAt uint64      `protobuf:"varint,13,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
}

func (m *StatusLike) Reset()         { *m = StatusLike{} }
func (m *StatusLike) String() string { return proto.CompactTextString(m) }
func (*StatusLike) ProtoMessage()    {}
func (*StatusLike) Descriptor() ([]byte, []int) {
	return fileDescriptor_565883138c05ff17, []int{81}
}
func (m *StatusLike) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StatusLike) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StatusLike.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StatusLike) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StatusLike.Merge(m, src)
}
func (m *StatusLike) XXX_Size() int {
	return m.Size()
}
func (m *StatusLike) XXX_DiscardUnknown() {
	xxx_messageInfo_StatusLike.DiscardUnknown(m)
}

var xxx_messageInfo_StatusLike proto.InternalMessageInfo

func (m *StatusLike) GetStatus() *StatusInfo {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *StatusLike) GetCreatedAt() uint64 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

type ListLikeResponse struct {
	Code      uint64        `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Statuses  []*StatusLike `protobuf:"bytes,2,rep,name=statuses,proto3" json:"statuses,omitempty"`
	Paginator *PageQuick    `protobuf:"bytes,3,opt,name=paginator,proto3" json:"paginator,omitempty"`
}

func (m *ListLikeResponse) Reset()         { *m = ListLikeResponse{} }
func (m *ListLikeResponse) String() string { return proto.CompactTextString(m) }
func (*ListLikeResponse) ProtoMessage()    {}
func (*ListLikeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_565883138c05ff17, []int{82}
}
func (m *ListLikeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListLikeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListLikeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListLikeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListLikeResponse.Merge(m, src)
}
func (m *ListLikeResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListLikeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListLikeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListLikeResponse proto.InternalMessageInfo

func (m *ListLikeResponse) GetCode() uint64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *ListLikeResponse) GetStatuses() []*StatusLike {
	if m != nil {
		return m.Statuses
	}
	return nil
}

func (m *ListLikeResponse) GetPaginator() *PageQuick {
	if m != nil {
		return m.Paginator
	}
	return nil
}

type LikeCommentRequest struct {
	CurrentUid uint64 `protobuf:"varint,1,opt,name=current_uid,json=currentUid,proto3" json:"current_uid,omitempty"`
	CommentId  string `protobuf:"bytes,2,opt,name=comment_id,json=commentId,proto3" json:"comment_id,omitempty"`
}

func (m *LikeCommentRequest) Reset()         { *m = LikeCommentRequest{} }
func (m *LikeCommentRequest) String() string { return proto.CompactTextString(m) }
func (*LikeCommentRequest) ProtoMessage()    {}
func (*LikeCommentRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_565883138c05ff17, []int{83}
}
func (m *LikeCommentRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LikeCommentRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LikeCommentRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LikeCommentRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LikeCommentRequest.Merge(m, src)
}
func (m *LikeCommentRequest) XXX_Size() int {
	return m.Size()
}
func (m *LikeCommentRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_LikeCommentRequest.DiscardUnknown(m)
}

var xxx_messageInfo_LikeCommentRequest proto.InternalMessageInfo

func (m *LikeCommentRequest) GetCurrentUid() uint64 {
	if m != nil {
		return m.CurrentUid
	}
	return 0
}

func (m *LikeCommentRequest) GetCommentId() string {
	if m != nil {
		return m.CommentId
	}
	return ""
}

type UnlikeCommentRequest struct {
	CurrentUid uint64 `protobuf:"varint,1,opt,name=current_uid,json=currentUid,proto3" json:"current_uid,omitempty"`
	CommentId  string `protobuf:"bytes,2,opt,name=comment_id,json=commentId,proto3" json:"comment_id,omitempty"`
}

func (m *UnlikeCommentRequest) Reset()         { *m = UnlikeCommentRequest{} }
func (m *UnlikeCommentRequest) String() string { return proto.CompactTextString(m) }
func (*UnlikeCommentRequest) ProtoMessage()    {}
func (*UnlikeCommentRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_565883138c05ff17, []int{84}
}
func (m *UnlikeCommentRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UnlikeCommentRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UnlikeCommentRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UnlikeCommentRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UnlikeCommentRequest.Merge(m, src)
}
func (m *UnlikeCommentRequest) XXX_Size() int {
	return m.Size()
}
func (m *UnlikeCommentRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UnlikeCommentRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UnlikeCommentRequest proto.InternalMessageInfo

func (m *UnlikeCommentRequest) GetCurrentUid() uint64 {
	if m != nil {
		return m.CurrentUid
	}
	return 0
}

func (m *UnlikeCommentRequest) GetCommentId() string {
	if m != nil {
		return m.CommentId
	}
	return ""
}

type ShareTweetUrlRequest struct {
	CurrentUid uint64 `protobuf:"varint,1,opt,name=current_uid,json=currentUid,proto3" json:"current_uid,omitempty"`
}

func (m *ShareTweetUrlRequest) Reset()         { *m = ShareTweetUrlRequest{} }
func (m *ShareTweetUrlRequest) String() string { return proto.CompactTextString(m) }
func (*ShareTweetUrlRequest) ProtoMessage()    {}
func (*ShareTweetUrlRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_565883138c05ff17, []int{85}
}
func (m *ShareTweetUrlRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ShareTweetUrlRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ShareTweetUrlRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ShareTweetUrlRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ShareTweetUrlRequest.Merge(m, src)
}
func (m *ShareTweetUrlRequest) XXX_Size() int {
	return m.Size()
}
func (m *ShareTweetUrlRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ShareTweetUrlRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ShareTweetUrlRequest proto.InternalMessageInfo

func (m *ShareTweetUrlRequest) GetCurrentUid() uint64 {
	if m != nil {
		return m.CurrentUid
	}
	return 0
}

type ShareTweetUrlResponse struct {
	Code uint64 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Url  string `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
}

func (m *ShareTweetUrlResponse) Reset()         { *m = ShareTweetUrlResponse{} }
func (m *ShareTweetUrlResponse) String() string { return proto.CompactTextString(m) }
func (*ShareTweetUrlResponse) ProtoMessage()    {}
func (*ShareTweetUrlResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_565883138c05ff17, []int{86}
}
func (m *ShareTweetUrlResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ShareTweetUrlResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ShareTweetUrlResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ShareTweetUrlResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ShareTweetUrlResponse.Merge(m, src)
}
func (m *ShareTweetUrlResponse) XXX_Size() int {
	return m.Size()
}
func (m *ShareTweetUrlResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ShareTweetUrlResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ShareTweetUrlResponse proto.InternalMessageInfo

func (m *ShareTweetUrlResponse) GetCode() uint64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *ShareTweetUrlResponse) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

type TwitterAuthRequest struct {
}

func (m *TwitterAuthRequest) Reset()         { *m = TwitterAuthRequest{} }
func (m *TwitterAuthRequest) String() string { return proto.CompactTextString(m) }
func (*TwitterAuthRequest) ProtoMessage()    {}
func (*TwitterAuthRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_565883138c05ff17, []int{87}
}
func (m *TwitterAuthRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TwitterAuthRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TwitterAuthRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TwitterAuthRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TwitterAuthRequest.Merge(m, src)
}
func (m *TwitterAuthRequest) XXX_Size() int {
	return m.Size()
}
func (m *TwitterAuthRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TwitterAuthRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TwitterAuthRequest proto.InternalMessageInfo

type TwitterAuthResponse struct {
}

func (m *TwitterAuthResponse) Reset()         { *m = TwitterAuthResponse{} }
func (m *TwitterAuthResponse) String() string { return proto.CompactTextString(m) }
func (*TwitterAuthResponse) ProtoMessage()    {}
func (*TwitterAuthResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_565883138c05ff17, []int{88}
}
func (m *TwitterAuthResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TwitterAuthResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TwitterAuthResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TwitterAuthResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TwitterAuthResponse.Merge(m, src)
}
func (m *TwitterAuthResponse) XXX_Size() int {
	return m.Size()
}
func (m *TwitterAuthResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_TwitterAuthResponse.DiscardUnknown(m)
}

var xxx_messageInfo_TwitterAuthResponse proto.InternalMessageInfo

type AirdropTwitterRequest struct {
	Misesid string `protobuf:"bytes,1,opt,name=misesid,proto3" json:"misesid,omitempty"`
}

func (m *AirdropTwitterRequest) Reset()         { *m = AirdropTwitterRequest{} }
func (m *AirdropTwitterRequest) String() string { return proto.CompactTextString(m) }
func (*AirdropTwitterRequest) ProtoMessage()    {}
func (*AirdropTwitterRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_565883138c05ff17, []int{89}
}
func (m *AirdropTwitterRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AirdropTwitterRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AirdropTwitterRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AirdropTwitterRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AirdropTwitterRequest.Merge(m, src)
}
func (m *AirdropTwitterRequest) XXX_Size() int {
	return m.Size()
}
func (m *AirdropTwitterRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AirdropTwitterRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AirdropTwitterRequest proto.InternalMessageInfo

func (m *AirdropTwitterRequest) GetMisesid() string {
	if m != nil {
		return m.Misesid
	}
	return ""
}

type AirdropTwitterResponse struct {
}

func (m *AirdropTwitterResponse) Reset()         { *m = AirdropTwitterResponse{} }
func (m *AirdropTwitterResponse) String() string { return proto.CompactTextString(m) }
func (*AirdropTwitterResponse) ProtoMessage()    {}
func (*AirdropTwitterResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_565883138c05ff17, []int{90}
}
func (m *AirdropTwitterResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AirdropTwitterResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AirdropTwitterResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AirdropTwitterResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AirdropTwitterResponse.Merge(m, src)
}
func (m *AirdropTwitterResponse) XXX_Size() int {
	return m.Size()
}
func (m *AirdropTwitterResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AirdropTwitterResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AirdropTwitterResponse proto.InternalMessageInfo

type AirdropChannelRequest struct {
}

func (m *AirdropChannelRequest) Reset()         { *m = AirdropChannelRequest{} }
func (m *AirdropChannelRequest) String() string { return proto.CompactTextString(m) }
func (*AirdropChannelRequest) ProtoMessage()    {}
func (*AirdropChannelRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_565883138c05ff17, []int{91}
}
func (m *AirdropChannelRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AirdropChannelRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AirdropChannelRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AirdropChannelRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AirdropChannelRequest.Merge(m, src)
}
func (m *AirdropChannelRequest) XXX_Size() int {
	return m.Size()
}
func (m *AirdropChannelRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AirdropChannelRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AirdropChannelRequest proto.InternalMessageInfo

type AirdropChannelResponse struct {
}

func (m *AirdropChannelResponse) Reset()         { *m = AirdropChannelResponse{} }
func (m *AirdropChannelResponse) String() string { return proto.CompactTextString(m) }
func (*AirdropChannelResponse) ProtoMessage()    {}
func (*AirdropChannelResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_565883138c05ff17, []int{92}
}
func (m *AirdropChannelResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AirdropChannelResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AirdropChannelResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AirdropChannelResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AirdropChannelResponse.Merge(m, src)
}
func (m *AirdropChannelResponse) XXX_Size() int {
	return m.Size()
}
func (m *AirdropChannelResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AirdropChannelResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AirdropChannelResponse proto.InternalMessageInfo

type CreateAirdropTwitterRequest struct {
}

func (m *CreateAirdropTwitterRequest) Reset()         { *m = CreateAirdropTwitterRequest{} }
func (m *CreateAirdropTwitterRequest) String() string { return proto.CompactTextString(m) }
func (*CreateAirdropTwitterRequest) ProtoMessage()    {}
func (*CreateAirdropTwitterRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_565883138c05ff17, []int{93}
}
func (m *CreateAirdropTwitterRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateAirdropTwitterRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateAirdropTwitterRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateAirdropTwitterRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateAirdropTwitterRequest.Merge(m, src)
}
func (m *CreateAirdropTwitterRequest) XXX_Size() int {
	return m.Size()
}
func (m *CreateAirdropTwitterRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateAirdropTwitterRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateAirdropTwitterRequest proto.InternalMessageInfo

type CreateAirdropTwitterResponse struct {
}

func (m *CreateAirdropTwitterResponse) Reset()         { *m = CreateAirdropTwitterResponse{} }
func (m *CreateAirdropTwitterResponse) String() string { return proto.CompactTextString(m) }
func (*CreateAirdropTwitterResponse) ProtoMessage()    {}
func (*CreateAirdropTwitterResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_565883138c05ff17, []int{94}
}
func (m *CreateAirdropTwitterResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateAirdropTwitterResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateAirdropTwitterResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateAirdropTwitterResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateAirdropTwitterResponse.Merge(m, src)
}
func (m *CreateAirdropTwitterResponse) XXX_Size() int {
	return m.Size()
}
func (m *CreateAirdropTwitterResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateAirdropTwitterResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CreateAirdropTwitterResponse proto.InternalMessageInfo

type CreateChannelAirdropRequest struct {
}

func (m *CreateChannelAirdropRequest) Reset()         { *m = CreateChannelAirdropRequest{} }
func (m *CreateChannelAirdropRequest) String() string { return proto.CompactTextString(m) }
func (*CreateChannelAirdropRequest) ProtoMessage()    {}
func (*CreateChannelAirdropRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_565883138c05ff17, []int{95}
}
func (m *CreateChannelAirdropRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateChannelAirdropRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateChannelAirdropRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateChannelAirdropRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateChannelAirdropRequest.Merge(m, src)
}
func (m *CreateChannelAirdropRequest) XXX_Size() int {
	return m.Size()
}
func (m *CreateChannelAirdropRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateChannelAirdropRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateChannelAirdropRequest proto.InternalMessageInfo

type CreateChannelAirdropResponse struct {
}

func (m *CreateChannelAirdropResponse) Reset()         { *m = CreateChannelAirdropResponse{} }
func (m *CreateChannelAirdropResponse) String() string { return proto.CompactTextString(m) }
func (*CreateChannelAirdropResponse) ProtoMessage()    {}
func (*CreateChannelAirdropResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_565883138c05ff17, []int{96}
}
func (m *CreateChannelAirdropResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateChannelAirdropResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateChannelAirdropResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateChannelAirdropResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateChannelAirdropResponse.Merge(m, src)
}
func (m *CreateChannelAirdropResponse) XXX_Size() int {
	return m.Size()
}
func (m *CreateChannelAirdropResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateChannelAirdropResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CreateChannelAirdropResponse proto.InternalMessageInfo

type UserToChainRequest struct {
}

func (m *UserToChainRequest) Reset()         { *m = UserToChainRequest{} }
func (m *UserToChainRequest) String() string { return proto.CompactTextString(m) }
func (*UserToChainRequest) ProtoMessage()    {}
func (*UserToChainRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_565883138c05ff17, []int{97}
}
func (m *UserToChainRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserToChainRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserToChainRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserToChainRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserToChainRequest.Merge(m, src)
}
func (m *UserToChainRequest) XXX_Size() int {
	return m.Size()
}
func (m *UserToChainRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UserToChainRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UserToChainRequest proto.InternalMessageInfo

type UserToChainResponse struct {
}

func (m *UserToChainResponse) Reset()         { *m = UserToChainResponse{} }
func (m *UserToChainResponse) String() string { return proto.CompactTextString(m) }
func (*UserToChainResponse) ProtoMessage()    {}
func (*UserToChainResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_565883138c05ff17, []int{98}
}
func (m *UserToChainResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserToChainResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserToChainResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserToChainResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserToChainResponse.Merge(m, src)
}
func (m *UserToChainResponse) XXX_Size() int {
	return m.Size()
}
func (m *UserToChainResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UserToChainResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UserToChainResponse proto.InternalMessageInfo

type TwitterFollowRequest struct {
}

func (m *TwitterFollowRequest) Reset()         { *m = TwitterFollowRequest{} }
func (m *TwitterFollowRequest) String() string { return proto.CompactTextString(m) }
func (*TwitterFollowRequest) ProtoMessage()    {}
func (*TwitterFollowRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_565883138c05ff17, []int{99}
}
func (m *TwitterFollowRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TwitterFollowRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TwitterFollowRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TwitterFollowRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TwitterFollowRequest.Merge(m, src)
}
func (m *TwitterFollowRequest) XXX_Size() int {
	return m.Size()
}
func (m *TwitterFollowRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TwitterFollowRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TwitterFollowRequest proto.InternalMessageInfo

type TwitterFollowResponse struct {
	Code uint64 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
}

func (m *TwitterFollowResponse) Reset()         { *m = TwitterFollowResponse{} }
func (m *TwitterFollowResponse) String() string { return proto.CompactTextString(m) }
func (*TwitterFollowResponse) ProtoMessage()    {}
func (*TwitterFollowResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_565883138c05ff17, []int{100}
}
func (m *TwitterFollowResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TwitterFollowResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TwitterFollowResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TwitterFollowResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TwitterFollowResponse.Merge(m, src)
}
func (m *TwitterFollowResponse) XXX_Size() int {
	return m.Size()
}
func (m *TwitterFollowResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_TwitterFollowResponse.DiscardUnknown(m)
}

var xxx_messageInfo_TwitterFollowResponse proto.InternalMessageInfo

func (m *TwitterFollowResponse) GetCode() uint64 {
	if m != nil {
		return m.Code
	}
	return 0
}

type ChannelInfoRequest struct {
	Misesid string `protobuf:"bytes,1,opt,name=misesid,proto3" json:"misesid,omitempty"`
	Type    string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Medium  string `protobuf:"bytes,3,opt,name=medium,proto3" json:"medium,omitempty"`
}

func (m *ChannelInfoRequest) Reset()         { *m = ChannelInfoRequest{} }
func (m *ChannelInfoRequest) String() string { return proto.CompactTextString(m) }
func (*ChannelInfoRequest) ProtoMessage()    {}
func (*ChannelInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_565883138c05ff17, []int{101}
}
func (m *ChannelInfoRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChannelInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChannelInfoRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChannelInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChannelInfoRequest.Merge(m, src)
}
func (m *ChannelInfoRequest) XXX_Size() int {
	return m.Size()
}
func (m *ChannelInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ChannelInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ChannelInfoRequest proto.InternalMessageInfo

func (m *ChannelInfoRequest) GetMisesid() string {
	if m != nil {
		return m.Misesid
	}
	return ""
}

func (m *ChannelInfoRequest) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *ChannelInfoRequest) GetMedium() string {
	if m != nil {
		return m.Medium
	}
	return ""
}

type ChannelInfoResponse struct {
	Code             uint64  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Url              string  `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
	TotalChannelUser uint64  `protobuf:"varint,3,opt,name=total_channel_user,json=totalChannelUser,proto3" json:"total_channel_user,omitempty"`
	AirdropAmount    float32 `protobuf:"fixed32,4,opt,name=airdrop_amount,json=airdropAmount,proto3" json:"airdrop_amount,omitempty"`
	MediumUrl        string  `protobuf:"bytes,5,opt,name=medium_url,json=mediumUrl,proto3" json:"medium_url,omitempty"`
	IosLink          string  `protobuf:"bytes,6,opt,name=ios_link,json=iosLink,proto3" json:"ios_link,omitempty"`
	IosMediumLink    string  `protobuf:"bytes,7,opt,name=ios_medium_link,json=iosMediumLink,proto3" json:"ios_medium_link,omitempty"`
}

func (m *ChannelInfoResponse) Reset()         { *m = ChannelInfoResponse{} }
func (m *ChannelInfoResponse) String() string { return proto.CompactTextString(m) }
func (*ChannelInfoResponse) ProtoMessage()    {}
func (*ChannelInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_565883138c05ff17, []int{102}
}
func (m *ChannelInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChannelInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChannelInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChannelInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChannelInfoResponse.Merge(m, src)
}
func (m *ChannelInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *ChannelInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ChannelInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ChannelInfoResponse proto.InternalMessageInfo

func (m *ChannelInfoResponse) GetCode() uint64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *ChannelInfoResponse) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *ChannelInfoResponse) GetTotalChannelUser() uint64 {
	if m != nil {
		return m.TotalChannelUser
	}
	return 0
}

func (m *ChannelInfoResponse) GetAirdropAmount() float32 {
	if m != nil {
		return m.AirdropAmount
	}
	return 0
}

func (m *ChannelInfoResponse) GetMediumUrl() string {
	if m != nil {
		return m.MediumUrl
	}
	return ""
}

func (m *ChannelInfoResponse) GetIosLink() string {
	if m != nil {
		return m.IosLink
	}
	return ""
}

func (m *ChannelInfoResponse) GetIosMediumLink() string {
	if m != nil {
		return m.IosMediumLink
	}
	return ""
}

type GetChannelUserRequest struct {
	Misesid string `protobuf:"bytes,1,opt,name=misesid,proto3" json:"misesid,omitempty"`
}

func (m *GetChannelUserRequest) Reset()         { *m = GetChannelUserRequest{} }
func (m *GetChannelUserRequest) String() string { return proto.CompactTextString(m) }
func (*GetChannelUserRequest) ProtoMessage()    {}
func (*GetChannelUserRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_565883138c05ff17, []int{103}
}
func (m *GetChannelUserRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetChannelUserRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetChannelUserRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetChannelUserRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetChannelUserRequest.Merge(m, src)
}
func (m *GetChannelUserRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetChannelUserRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetChannelUserRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetChannelUserRequest proto.InternalMessageInfo

func (m *GetChannelUserRequest) GetMisesid() string {
	if m != nil {
		return m.Misesid
	}
	return ""
}

type GetChannelUserResponse struct {
	Code       uint64           `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	ChanelUser *ChannelUserInfo `protobuf:"bytes,2,opt,name=chanel_user,json=chanelUser,proto3" json:"chanel_user,omitempty"`
}

func (m *GetChannelUserResponse) Reset()         { *m = GetChannelUserResponse{} }
func (m *GetChannelUserResponse) String() string { return proto.CompactTextString(m) }
func (*GetChannelUserResponse) ProtoMessage()    {}
func (*GetChannelUserResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_565883138c05ff17, []int{104}
}
func (m *GetChannelUserResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetChannelUserResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetChannelUserResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetChannelUserResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetChannelUserResponse.Merge(m, src)
}
func (m *GetChannelUserResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetChannelUserResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetChannelUserResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetChannelUserResponse proto.InternalMessageInfo

func (m *GetChannelUserResponse) GetCode() uint64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *GetChannelUserResponse) GetChanelUser() *ChannelUserInfo {
	if m != nil {
		return m.ChanelUser
	}
	return nil
}

type OpenseaAsset struct {
	Id       uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	ImageUrl string `protobuf:"bytes,2,opt,name=image_url,json=imageUrl,proto3" json:"image_url,omitempty"`
	Name     string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *OpenseaAsset) Reset()         { *m = OpenseaAsset{} }
func (m *OpenseaAsset) String() string { return proto.CompactTextString(m) }
func (*OpenseaAsset) ProtoMessage()    {}
func (*OpenseaAsset) Descriptor() ([]byte, []int) {
	return fileDescriptor_565883138c05ff17, []int{105}
}
func (m *OpenseaAsset) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OpenseaAsset) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OpenseaAsset.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OpenseaAsset) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OpenseaAsset.Merge(m, src)
}
func (m *OpenseaAsset) XXX_Size() int {
	return m.Size()
}
func (m *OpenseaAsset) XXX_DiscardUnknown() {
	xxx_messageInfo_OpenseaAsset.DiscardUnknown(m)
}

var xxx_messageInfo_OpenseaAsset proto.InternalMessageInfo

func (m *OpenseaAsset) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *OpenseaAsset) GetImageUrl() string {
	if m != nil {
		return m.ImageUrl
	}
	return ""
}

func (m *OpenseaAsset) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type GetOpenseaAssetRequest struct {
	AssetContractAddress string `protobuf:"bytes,1,opt,name=asset_contract_address,json=assetContractAddress,proto3" json:"asset_contract_address,omitempty"`
	TokenId              string `protobuf:"bytes,2,opt,name=token_id,json=tokenId,proto3" json:"token_id,omitempty"`
	AccountAddress       string `protobuf:"bytes,3,opt,name=account_address,json=accountAddress,proto3" json:"account_address,omitempty"`
	IncludeOrders        string `protobuf:"bytes,4,opt,name=include_orders,json=includeOrders,proto3" json:"include_orders,omitempty"`
	Network              string `protobuf:"bytes,5,opt,name=network,proto3" json:"network,omitempty"`
	CurrentUid           uint64 `protobuf:"varint,6,opt,name=current_uid,json=currentUid,proto3" json:"current_uid,omitempty"`
}

func (m *GetOpenseaAssetRequest) Reset()         { *m = GetOpenseaAssetRequest{} }
func (m *GetOpenseaAssetRequest) String() string { return proto.CompactTextString(m) }
func (*GetOpenseaAssetRequest) ProtoMessage()    {}
func (*GetOpenseaAssetRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_565883138c05ff17, []int{106}
}
func (m *GetOpenseaAssetRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetOpenseaAssetRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetOpenseaAssetRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetOpenseaAssetRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetOpenseaAssetRequest.Merge(m, src)
}
func (m *GetOpenseaAssetRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetOpenseaAssetRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetOpenseaAssetRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetOpenseaAssetRequest proto.InternalMessageInfo

func (m *GetOpenseaAssetRequest) GetAssetContractAddress() string {
	if m != nil {
		return m.AssetContractAddress
	}
	return ""
}

func (m *GetOpenseaAssetRequest) GetTokenId() string {
	if m != nil {
		return m.TokenId
	}
	return ""
}

func (m *GetOpenseaAssetRequest) GetAccountAddress() string {
	if m != nil {
		return m.AccountAddress
	}
	return ""
}

func (m *GetOpenseaAssetRequest) GetIncludeOrders() string {
	if m != nil {
		return m.IncludeOrders
	}
	return ""
}

func (m *GetOpenseaAssetRequest) GetNetwork() string {
	if m != nil {
		return m.Network
	}
	return ""
}

func (m *GetOpenseaAssetRequest) GetCurrentUid() uint64 {
	if m != nil {
		return m.CurrentUid
	}
	return 0
}

type GetOpenseaAssetResponse struct {
	Code         uint64 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	OpenseaAsset string `protobuf:"bytes,2,opt,name=opensea_asset,json=openseaAsset,proto3" json:"opensea_asset,omitempty"`
}

func (m *GetOpenseaAssetResponse) Reset()         { *m = GetOpenseaAssetResponse{} }
func (m *GetOpenseaAssetResponse) String() string { return proto.CompactTextString(m) }
func (*GetOpenseaAssetResponse) ProtoMessage()    {}
func (*GetOpenseaAssetResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_565883138c05ff17, []int{107}
}
func (m *GetOpenseaAssetResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetOpenseaAssetResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetOpenseaAssetResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetOpenseaAssetResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetOpenseaAssetResponse.Merge(m, src)
}
func (m *GetOpenseaAssetResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetOpenseaAssetResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetOpenseaAssetResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetOpenseaAssetResponse proto.InternalMessageInfo

func (m *GetOpenseaAssetResponse) GetCode() uint64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *GetOpenseaAssetResponse) GetOpenseaAsset() string {
	if m != nil {
		return m.OpenseaAsset
	}
	return ""
}

type GetOpenseaAssetContractRequest struct {
	AssetContractAddress string `protobuf:"bytes,1,opt,name=asset_contract_address,json=assetContractAddress,proto3" json:"asset_contract_address,omitempty"`
	TokenId              string `protobuf:"bytes,2,opt,name=token_id,json=tokenId,proto3" json:"token_id,omitempty"`
	AccountAddress       string `protobuf:"bytes,3,opt,name=account_address,json=accountAddress,proto3" json:"account_address,omitempty"`
	IncludeOrders        string `protobuf:"bytes,4,opt,name=include_orders,json=includeOrders,proto3" json:"include_orders,omitempty"`
	Network              string `protobuf:"bytes,5,opt,name=network,proto3" json:"network,omitempty"`
	CurrentUid           uint64 `protobuf:"varint,6,opt,name=current_uid,json=currentUid,proto3" json:"current_uid,omitempty"`
}

func (m *GetOpenseaAssetContractRequest) Reset()         { *m = GetOpenseaAssetContractRequest{} }
func (m *GetOpenseaAssetContractRequest) String() string { return proto.CompactTextString(m) }
func (*GetOpenseaAssetContractRequest) ProtoMessage()    {}
func (*GetOpenseaAssetContractRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_565883138c05ff17, []int{108}
}
func (m *GetOpenseaAssetContractRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetOpenseaAssetContractRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetOpenseaAssetContractRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetOpenseaAssetContractRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetOpenseaAssetContractRequest.Merge(m, src)
}
func (m *GetOpenseaAssetContractRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetOpenseaAssetContractRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetOpenseaAssetContractRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetOpenseaAssetContractRequest proto.InternalMessageInfo

func (m *GetOpenseaAssetContractRequest) GetAssetContractAddress() string {
	if m != nil {
		return m.AssetContractAddress
	}
	return ""
}

func (m *GetOpenseaAssetContractRequest) GetTokenId() string {
	if m != nil {
		return m.TokenId
	}
	return ""
}

func (m *GetOpenseaAssetContractRequest) GetAccountAddress() string {
	if m != nil {
		return m.AccountAddress
	}
	return ""
}

func (m *GetOpenseaAssetContractRequest) GetIncludeOrders() string {
	if m != nil {
		return m.IncludeOrders
	}
	return ""
}

func (m *GetOpenseaAssetContractRequest) GetNetwork() string {
	if m != nil {
		return m.Network
	}
	return ""
}

func (m *GetOpenseaAssetContractRequest) GetCurrentUid() uint64 {
	if m != nil {
		return m.CurrentUid
	}
	return 0
}

type GetOpenseaAssetContractResponse struct {
	Code         uint64 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	OpenseaAsset string `protobuf:"bytes,2,opt,name=opensea_asset,json=openseaAsset,proto3" json:"opensea_asset,omitempty"`
}

func (m *GetOpenseaAssetContractResponse) Reset()         { *m = GetOpenseaAssetContractResponse{} }
func (m *GetOpenseaAssetContractResponse) String() string { return proto.CompactTextString(m) }
func (*GetOpenseaAssetContractResponse) ProtoMessage()    {}
func (*GetOpenseaAssetContractResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_565883138c05ff17, []int{109}
}
func (m *GetOpenseaAssetContractResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetOpenseaAssetContractResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetOpenseaAssetContractResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetOpenseaAssetContractResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetOpenseaAssetContractResponse.Merge(m, src)
}
func (m *GetOpenseaAssetContractResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetOpenseaAssetContractResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetOpenseaAssetContractResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetOpenseaAssetContractResponse proto.InternalMessageInfo

func (m *GetOpenseaAssetContractResponse) GetCode() uint64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *GetOpenseaAssetContractResponse) GetOpenseaAsset() string {
	if m != nil {
		return m.OpenseaAsset
	}
	return ""
}

type ListOpenseaAssetRequest struct {
	Owner      string `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
	Limit      uint64 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	Cursor     string `protobuf:"bytes,3,opt,name=cursor,proto3" json:"cursor,omitempty"`
	Network    string `protobuf:"bytes,4,opt,name=network,proto3" json:"network,omitempty"`
	CurrentUid uint64 `protobuf:"varint,5,opt,name=current_uid,json=currentUid,proto3" json:"current_uid,omitempty"`
}

func (m *ListOpenseaAssetRequest) Reset()         { *m = ListOpenseaAssetRequest{} }
func (m *ListOpenseaAssetRequest) String() string { return proto.CompactTextString(m) }
func (*ListOpenseaAssetRequest) ProtoMessage()    {}
func (*ListOpenseaAssetRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_565883138c05ff17, []int{110}
}
func (m *ListOpenseaAssetRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListOpenseaAssetRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListOpenseaAssetRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListOpenseaAssetRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListOpenseaAssetRequest.Merge(m, src)
}
func (m *ListOpenseaAssetRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListOpenseaAssetRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListOpenseaAssetRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListOpenseaAssetRequest proto.InternalMessageInfo

func (m *ListOpenseaAssetRequest) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *ListOpenseaAssetRequest) GetLimit() uint64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *ListOpenseaAssetRequest) GetCursor() string {
	if m != nil {
		return m.Cursor
	}
	return ""
}

func (m *ListOpenseaAssetRequest) GetNetwork() string {
	if m != nil {
		return m.Network
	}
	return ""
}

func (m *ListOpenseaAssetRequest) GetCurrentUid() uint64 {
	if m != nil {
		return m.CurrentUid
	}
	return 0
}

type ListOpenseaAssetResponse struct {
	Code     uint64 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Assets   string `protobuf:"bytes,2,opt,name=assets,proto3" json:"assets,omitempty"`
	Next     string `protobuf:"bytes,3,opt,name=next,proto3" json:"next,omitempty"`
	Previous string `protobuf:"bytes,4,opt,name=previous,proto3" json:"previous,omitempty"`
}

func (m *ListOpenseaAssetResponse) Reset()         { *m = ListOpenseaAssetResponse{} }
func (m *ListOpenseaAssetResponse) String() string { return proto.CompactTextString(m) }
func (*ListOpenseaAssetResponse) ProtoMessage()    {}
func (*ListOpenseaAssetResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_565883138c05ff17, []int{111}
}
func (m *ListOpenseaAssetResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListOpenseaAssetResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListOpenseaAssetResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListOpenseaAssetResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListOpenseaAssetResponse.Merge(m, src)
}
func (m *ListOpenseaAssetResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListOpenseaAssetResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListOpenseaAssetResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListOpenseaAssetResponse proto.InternalMessageInfo

func (m *ListOpenseaAssetResponse) GetCode() uint64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *ListOpenseaAssetResponse) GetAssets() string {
	if m != nil {
		return m.Assets
	}
	return ""
}

func (m *ListOpenseaAssetResponse) GetNext() string {
	if m != nil {
		return m.Next
	}
	return ""
}

func (m *ListOpenseaAssetResponse) GetPrevious() string {
	if m != nil {
		return m.Previous
	}
	return ""
}

type NftCollection struct {
	Id           string          `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name         string          `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Slug         string          `protobuf:"bytes,3,opt,name=slug,proto3" json:"slug,omitempty"`
	Stats        *Stats          `protobuf:"bytes,4,opt,name=stats,proto3" json:"stats,omitempty"`
	PaymentToken []*PaymentToken `protobuf:"bytes,5,rep,name=payment_token,json=paymentToken,proto3" json:"payment_token,omitempty"`
}

func (m *NftCollection) Reset()         { *m = NftCollection{} }
func (m *NftCollection) String() string { return proto.CompactTextString(m) }
func (*NftCollection) ProtoMessage()    {}
func (*NftCollection) Descriptor() ([]byte, []int) {
	return fileDescriptor_565883138c05ff17, []int{112}
}
func (m *NftCollection) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NftCollection) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NftCollection.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NftCollection) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NftCollection.Merge(m, src)
}
func (m *NftCollection) XXX_Size() int {
	return m.Size()
}
func (m *NftCollection) XXX_DiscardUnknown() {
	xxx_messageInfo_NftCollection.DiscardUnknown(m)
}

var xxx_messageInfo_NftCollection proto.InternalMessageInfo

func (m *NftCollection) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *NftCollection) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *NftCollection) GetSlug() string {
	if m != nil {
		return m.Slug
	}
	return ""
}

func (m *NftCollection) GetStats() *Stats {
	if m != nil {
		return m.Stats
	}
	return nil
}

func (m *NftCollection) GetPaymentToken() []*PaymentToken {
	if m != nil {
		return m.PaymentToken
	}
	return nil
}

type AssetContract struct {
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *AssetContract) Reset()         { *m = AssetContract{} }
func (m *AssetContract) String() string { return proto.CompactTextString(m) }
func (*AssetContract) ProtoMessage()    {}
func (*AssetContract) Descriptor() ([]byte, []int) {
	return fileDescriptor_565883138c05ff17, []int{113}
}
func (m *AssetContract) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AssetContract) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AssetContract.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AssetContract) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AssetContract.Merge(m, src)
}
func (m *AssetContract) XXX_Size() int {
	return m.Size()
}
func (m *AssetContract) XXX_DiscardUnknown() {
	xxx_messageInfo_AssetContract.DiscardUnknown(m)
}

var xxx_messageInfo_AssetContract proto.InternalMessageInfo

func (m *AssetContract) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type NftAsset struct {
	Id                string         `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ImageUrl          string         `protobuf:"bytes,2,opt,name=image_url,json=imageUrl,proto3" json:"image_url,omitempty"`
	ImagePreviewUrl   string         `protobuf:"bytes,3,opt,name=image_preview_url,json=imagePreviewUrl,proto3" json:"image_preview_url,omitempty"`
	ImageThumbnailUrl string         `protobuf:"bytes,4,opt,name=image_thumbnail_url,json=imageThumbnailUrl,proto3" json:"image_thumbnail_url,omitempty"`
	PermaLink         string         `protobuf:"bytes,5,opt,name=perma_link,json=permaLink,proto3" json:"perma_link,omitempty"`
	LikesCount        uint64         `protobuf:"varint,6,opt,name=likes_count,json=likesCount,proto3" json:"likes_count,omitempty"`
	CommentsCount     uint64         `protobuf:"varint,7,opt,name=comments_count,json=commentsCount,proto3" json:"comments_count,omitempty"`
	TokenId           string         `protobuf:"bytes,8,opt,name=token_id,json=tokenId,proto3" json:"token_id,omitempty"`
	Name              string         `protobuf:"bytes,9,opt,name=name,proto3" json:"name,omitempty"`
	Collection        *NftCollection `protobuf:"bytes,10,opt,name=collection,proto3" json:"collection,omitempty"`
	AssetContract     *AssetContract `protobuf:"bytes,11,opt,name=asset_contract,json=assetContract,proto3" json:"asset_contract,omitempty"`
	IsLiked           bool           `protobuf:"varint,12,opt,name=is_liked,json=isLiked,proto3" json:"is_liked,omitempty"`
	User              *UserInfo      `protobuf:"bytes,13,opt,name=user,proto3" json:"user,omitempty"`
}

func (m *NftAsset) Reset()         { *m = NftAsset{} }
func (m *NftAsset) String() string { return proto.CompactTextString(m) }
func (*NftAsset) ProtoMessage()    {}
func (*NftAsset) Descriptor() ([]byte, []int) {
	return fileDescriptor_565883138c05ff17, []int{114}
}
func (m *NftAsset) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NftAsset) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NftAsset.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NftAsset) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NftAsset.Merge(m, src)
}
func (m *NftAsset) XXX_Size() int {
	return m.Size()
}
func (m *NftAsset) XXX_DiscardUnknown() {
	xxx_messageInfo_NftAsset.DiscardUnknown(m)
}

var xxx_messageInfo_NftAsset proto.InternalMessageInfo

func (m *NftAsset) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *NftAsset) GetImageUrl() string {
	if m != nil {
		return m.ImageUrl
	}
	return ""
}

func (m *NftAsset) GetImagePreviewUrl() string {
	if m != nil {
		return m.ImagePreviewUrl
	}
	return ""
}

func (m *NftAsset) GetImageThumbnailUrl() string {
	if m != nil {
		return m.ImageThumbnailUrl
	}
	return ""
}

func (m *NftAsset) GetPermaLink() string {
	if m != nil {
		return m.PermaLink
	}
	return ""
}

func (m *NftAsset) GetLikesCount() uint64 {
	if m != nil {
		return m.LikesCount
	}
	return 0
}

func (m *NftAsset) GetCommentsCount() uint64 {
	if m != nil {
		return m.CommentsCount
	}
	return 0
}

func (m *NftAsset) GetTokenId() string {
	if m != nil {
		return m.TokenId
	}
	return ""
}

func (m *NftAsset) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *NftAsset) GetCollection() *NftCollection {
	if m != nil {
		return m.Collection
	}
	return nil
}

func (m *NftAsset) GetAssetContract() *AssetContract {
	if m != nil {
		return m.AssetContract
	}
	return nil
}

func (m *NftAsset) GetIsLiked() bool {
	if m != nil {
		return m.IsLiked
	}
	return false
}

func (m *NftAsset) GetUser() *UserInfo {
	if m != nil {
		return m.User
	}
	return nil
}

type PageNftAssetRequest struct {
	CurrentUid uint64     `protobuf:"varint,1,opt,name=current_uid,json=currentUid,proto3" json:"current_uid,omitempty"`
	Uid        uint64     `protobuf:"varint,2,opt,name=uid,proto3" json:"uid,omitempty"`
	Paginator  *PageQuick `protobuf:"bytes,3,opt,name=paginator,proto3" json:"paginator,omitempty"`
	SortBy     string     `protobuf:"bytes,4,opt,name=sort_by,json=sortBy,proto3" json:"sort_by,omitempty"`
	Scene      string     `protobuf:"bytes,5,opt,name=scene,proto3" json:"scene,omitempty"`
}

func (m *PageNftAssetRequest) Reset()         { *m = PageNftAssetRequest{} }
func (m *PageNftAssetRequest) String() string { return proto.CompactTextString(m) }
func (*PageNftAssetRequest) ProtoMessage()    {}
func (*PageNftAssetRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_565883138c05ff17, []int{115}
}
func (m *PageNftAssetRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PageNftAssetRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PageNftAssetRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PageNftAssetRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PageNftAssetRequest.Merge(m, src)
}
func (m *PageNftAssetRequest) XXX_Size() int {
	return m.Size()
}
func (m *PageNftAssetRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PageNftAssetRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PageNftAssetRequest proto.InternalMessageInfo

func (m *PageNftAssetRequest) GetCurrentUid() uint64 {
	if m != nil {
		return m.CurrentUid
	}
	return 0
}

func (m *PageNftAssetRequest) GetUid() uint64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *PageNftAssetRequest) GetPaginator() *PageQuick {
	if m != nil {
		return m.Paginator
	}
	return nil
}

func (m *PageNftAssetRequest) GetSortBy() string {
	if m != nil {
		return m.SortBy
	}
	return ""
}

func (m *PageNftAssetRequest) GetScene() string {
	if m != nil {
		return m.Scene
	}
	return ""
}

type PageNftAssetResponse struct {
	Code      uint64      `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Assets    []*NftAsset `protobuf:"bytes,2,rep,name=assets,proto3" json:"assets,omitempty"`
	Paginator *PageQuick  `protobuf:"bytes,3,opt,name=paginator,proto3" json:"paginator,omitempty"`
}

func (m *PageNftAssetResponse) Reset()         { *m = PageNftAssetResponse{} }
func (m *PageNftAssetResponse) String() string { return proto.CompactTextString(m) }
func (*PageNftAssetResponse) ProtoMessage()    {}
func (*PageNftAssetResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_565883138c05ff17, []int{116}
}
func (m *PageNftAssetResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PageNftAssetResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PageNftAssetResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PageNftAssetResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PageNftAssetResponse.Merge(m, src)
}
func (m *PageNftAssetResponse) XXX_Size() int {
	return m.Size()
}
func (m *PageNftAssetResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PageNftAssetResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PageNftAssetResponse proto.InternalMessageInfo

func (m *PageNftAssetResponse) GetCode() uint64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *PageNftAssetResponse) GetAssets() []*NftAsset {
	if m != nil {
		return m.Assets
	}
	return nil
}

func (m *PageNftAssetResponse) GetPaginator() *PageQuick {
	if m != nil {
		return m.Paginator
	}
	return nil
}

type GetNftAssetRequest struct {
	CurrentUid uint64 `protobuf:"varint,1,opt,name=current_uid,json=currentUid,proto3" json:"current_uid,omitempty"`
	NftAssetId string `protobuf:"bytes,2,opt,name=nft_asset_id,json=nftAssetId,proto3" json:"nft_asset_id,omitempty"`
}

func (m *GetNftAssetRequest) Reset()         { *m = GetNftAssetRequest{} }
func (m *GetNftAssetRequest) String() string { return proto.CompactTextString(m) }
func (*GetNftAssetRequest) ProtoMessage()    {}
func (*GetNftAssetRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_565883138c05ff17, []int{117}
}
func (m *GetNftAssetRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetNftAssetRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetNftAssetRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetNftAssetRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetNftAssetRequest.Merge(m, src)
}
func (m *GetNftAssetRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetNftAssetRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetNftAssetRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetNftAssetRequest proto.InternalMessageInfo

func (m *GetNftAssetRequest) GetCurrentUid() uint64 {
	if m != nil {
		return m.CurrentUid
	}
	return 0
}

func (m *GetNftAssetRequest) GetNftAssetId() string {
	if m != nil {
		return m.NftAssetId
	}
	return ""
}

type GetNftAssetResponse struct {
	Code  uint64    `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Asset *NftAsset `protobuf:"bytes,2,opt,name=asset,proto3" json:"asset,omitempty"`
}

func (m *GetNftAssetResponse) Reset()         { *m = GetNftAssetResponse{} }
func (m *GetNftAssetResponse) String() string { return proto.CompactTextString(m) }
func (*GetNftAssetResponse) ProtoMessage()    {}
func (*GetNftAssetResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_565883138c05ff17, []int{118}
}
func (m *GetNftAssetResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetNftAssetResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetNftAssetResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetNftAssetResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetNftAssetResponse.Merge(m, src)
}
func (m *GetNftAssetResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetNftAssetResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetNftAssetResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetNftAssetResponse proto.InternalMessageInfo

func (m *GetNftAssetResponse) GetCode() uint64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *GetNftAssetResponse) GetAsset() *NftAsset {
	if m != nil {
		return m.Asset
	}
	return nil
}

type UserConfig struct {
	NftState bool `protobuf:"varint,1,opt,name=nft_state,json=nftState,proto3" json:"nft_state,omitempty"`
}

func (m *UserConfig) Reset()         { *m = UserConfig{} }
func (m *UserConfig) String() string { return proto.CompactTextString(m) }
func (*UserConfig) ProtoMessage()    {}
func (*UserConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_565883138c05ff17, []int{119}
}
func (m *UserConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserConfig.Merge(m, src)
}
func (m *UserConfig) XXX_Size() int {
	return m.Size()
}
func (m *UserConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_UserConfig.DiscardUnknown(m)
}

var xxx_messageInfo_UserConfig proto.InternalMessageInfo

func (m *UserConfig) GetNftState() bool {
	if m != nil {
		return m.NftState
	}
	return false
}

type UpdateUserConfigRequest struct {
	CurrentUid uint64 `protobuf:"varint,1,opt,name=current_uid,json=currentUid,proto3" json:"current_uid,omitempty"`
	NftState   bool   `protobuf:"varint,2,opt,name=nft_state,json=nftState,proto3" json:"nft_state,omitempty"`
}

func (m *UpdateUserConfigRequest) Reset()         { *m = UpdateUserConfigRequest{} }
func (m *UpdateUserConfigRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateUserConfigRequest) ProtoMessage()    {}
func (*UpdateUserConfigRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_565883138c05ff17, []int{120}
}
func (m *UpdateUserConfigRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateUserConfigRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateUserConfigRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateUserConfigRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateUserConfigRequest.Merge(m, src)
}
func (m *UpdateUserConfigRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpdateUserConfigRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateUserConfigRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateUserConfigRequest proto.InternalMessageInfo

func (m *UpdateUserConfigRequest) GetCurrentUid() uint64 {
	if m != nil {
		return m.CurrentUid
	}
	return 0
}

func (m *UpdateUserConfigRequest) GetNftState() bool {
	if m != nil {
		return m.NftState
	}
	return false
}

type UpdateUserConfigResponse struct {
	Code   uint64      `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Config *UserConfig `protobuf:"bytes,2,opt,name=config,proto3" json:"config,omitempty"`
}

func (m *UpdateUserConfigResponse) Reset()         { *m = UpdateUserConfigResponse{} }
func (m *UpdateUserConfigResponse) String() string { return proto.CompactTextString(m) }
func (*UpdateUserConfigResponse) ProtoMessage()    {}
func (*UpdateUserConfigResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_565883138c05ff17, []int{121}
}
func (m *UpdateUserConfigResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateUserConfigResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateUserConfigResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateUserConfigResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateUserConfigResponse.Merge(m, src)
}
func (m *UpdateUserConfigResponse) XXX_Size() int {
	return m.Size()
}
func (m *UpdateUserConfigResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateUserConfigResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateUserConfigResponse proto.InternalMessageInfo

func (m *UpdateUserConfigResponse) GetCode() uint64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *UpdateUserConfigResponse) GetConfig() *UserConfig {
	if m != nil {
		return m.Config
	}
	return nil
}

type GetUserConfigRequest struct {
	CurrentUid uint64 `protobuf:"varint,1,opt,name=current_uid,json=currentUid,proto3" json:"current_uid,omitempty"`
	Uid        uint64 `protobuf:"varint,2,opt,name=uid,proto3" json:"uid,omitempty"`
}

func (m *GetUserConfigRequest) Reset()         { *m = GetUserConfigRequest{} }
func (m *GetUserConfigRequest) String() string { return proto.CompactTextString(m) }
func (*GetUserConfigRequest) ProtoMessage()    {}
func (*GetUserConfigRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_565883138c05ff17, []int{122}
}
func (m *GetUserConfigRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetUserConfigRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetUserConfigRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetUserConfigRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetUserConfigRequest.Merge(m, src)
}
func (m *GetUserConfigRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetUserConfigRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetUserConfigRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetUserConfigRequest proto.InternalMessageInfo

func (m *GetUserConfigRequest) GetCurrentUid() uint64 {
	if m != nil {
		return m.CurrentUid
	}
	return 0
}

func (m *GetUserConfigRequest) GetUid() uint64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

type GetUserConfigResponse struct {
	Code   uint64      `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Config *UserConfig `protobuf:"bytes,2,opt,name=config,proto3" json:"config,omitempty"`
}

func (m *GetUserConfigResponse) Reset()         { *m = GetUserConfigResponse{} }
func (m *GetUserConfigResponse) String() string { return proto.CompactTextString(m) }
func (*GetUserConfigResponse) ProtoMessage()    {}
func (*GetUserConfigResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_565883138c05ff17, []int{123}
}
func (m *GetUserConfigResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetUserConfigResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetUserConfigResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetUserConfigResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetUserConfigResponse.Merge(m, src)
}
func (m *GetUserConfigResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetUserConfigResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetUserConfigResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetUserConfigResponse proto.InternalMessageInfo

func (m *GetUserConfigResponse) GetCode() uint64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *GetUserConfigResponse) GetConfig() *UserConfig {
	if m != nil {
		return m.Config
	}
	return nil
}

type NftAccount struct {
	Address       string    `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	MisesUser     *UserInfo `protobuf:"bytes,2,opt,name=mises_user,json=misesUser,proto3" json:"mises_user,omitempty"`
	ProfileImgUrl string    `protobuf:"bytes,3,opt,name=profile_img_url,json=profileImgUrl,proto3" json:"profile_img_url,omitempty"`
}

func (m *NftAccount) Reset()         { *m = NftAccount{} }
func (m *NftAccount) String() string { return proto.CompactTextString(m) }
func (*NftAccount) ProtoMessage()    {}
func (*NftAccount) Descriptor() ([]byte, []int) {
	return fileDescriptor_565883138c05ff17, []int{124}
}
func (m *NftAccount) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NftAccount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NftAccount.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NftAccount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NftAccount.Merge(m, src)
}
func (m *NftAccount) XXX_Size() int {
	return m.Size()
}
func (m *NftAccount) XXX_DiscardUnknown() {
	xxx_messageInfo_NftAccount.DiscardUnknown(m)
}

var xxx_messageInfo_NftAccount proto.InternalMessageInfo

func (m *NftAccount) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *NftAccount) GetMisesUser() *UserInfo {
	if m != nil {
		return m.MisesUser
	}
	return nil
}

func (m *NftAccount) GetProfileImgUrl() string {
	if m != nil {
		return m.ProfileImgUrl
	}
	return ""
}

type PaymentToken struct {
	Id       uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Symbol   string `protobuf:"bytes,2,opt,name=symbol,proto3" json:"symbol,omitempty"`
	Address  string `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`
	Name     string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	EthPrice string `protobuf:"bytes,5,opt,name=eth_price,json=ethPrice,proto3" json:"eth_price,omitempty"`
	UsdPrice string `protobuf:"bytes,6,opt,name=usd_price,json=usdPrice,proto3" json:"usd_price,omitempty"`
	Decimals int64  `protobuf:"varint,7,opt,name=decimals,proto3" json:"decimals,omitempty"`
}

func (m *PaymentToken) Reset()         { *m = PaymentToken{} }
func (m *PaymentToken) String() string { return proto.CompactTextString(m) }
func (*PaymentToken) ProtoMessage()    {}
func (*PaymentToken) Descriptor() ([]byte, []int) {
	return fileDescriptor_565883138c05ff17, []int{125}
}
func (m *PaymentToken) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PaymentToken) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PaymentToken.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PaymentToken) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PaymentToken.Merge(m, src)
}
func (m *PaymentToken) XXX_Size() int {
	return m.Size()
}
func (m *PaymentToken) XXX_DiscardUnknown() {
	xxx_messageInfo_PaymentToken.DiscardUnknown(m)
}

var xxx_messageInfo_PaymentToken proto.InternalMessageInfo

func (m *PaymentToken) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *PaymentToken) GetSymbol() string {
	if m != nil {
		return m.Symbol
	}
	return ""
}

func (m *PaymentToken) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *PaymentToken) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *PaymentToken) GetEthPrice() string {
	if m != nil {
		return m.EthPrice
	}
	return ""
}

func (m *PaymentToken) GetUsdPrice() string {
	if m != nil {
		return m.UsdPrice
	}
	return ""
}

func (m *PaymentToken) GetDecimals() int64 {
	if m != nil {
		return m.Decimals
	}
	return 0
}

type Stats struct {
	FloorPrice float32 `protobuf:"fixed32,1,opt,name=floor_price,json=floorPrice,proto3" json:"floor_price,omitempty"`
}

func (m *Stats) Reset()         { *m = Stats{} }
func (m *Stats) String() string { return proto.CompactTextString(m) }
func (*Stats) ProtoMessage()    {}
func (*Stats) Descriptor() ([]byte, []int) {
	return fileDescriptor_565883138c05ff17, []int{126}
}
func (m *Stats) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Stats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Stats.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Stats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Stats.Merge(m, src)
}
func (m *Stats) XXX_Size() int {
	return m.Size()
}
func (m *Stats) XXX_DiscardUnknown() {
	xxx_messageInfo_Stats.DiscardUnknown(m)
}

var xxx_messageInfo_Stats proto.InternalMessageInfo

func (m *Stats) GetFloorPrice() float32 {
	if m != nil {
		return m.FloorPrice
	}
	return 0
}

type NftEvent struct {
	Id           string        `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	EventType    string        `protobuf:"bytes,2,opt,name=event_type,json=eventType,proto3" json:"event_type,omitempty"`
	FromAccount  *NftAccount   `protobuf:"bytes,3,opt,name=from_account,json=fromAccount,proto3" json:"from_account,omitempty"`
	ToAccount    *NftAccount   `protobuf:"bytes,4,opt,name=to_account,json=toAccount,proto3" json:"to_account,omitempty"`
	CreatedDate  string        `protobuf:"bytes,5,opt,name=created_date,json=createdDate,proto3" json:"created_date,omitempty"`
	PaymentToken *PaymentToken `protobuf:"bytes,6,opt,name=payment_token,json=paymentToken,proto3" json:"payment_token,omitempty"`
}

func (m *NftEvent) Reset()         { *m = NftEvent{} }
func (m *NftEvent) String() string { return proto.CompactTextString(m) }
func (*NftEvent) ProtoMessage()    {}
func (*NftEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_565883138c05ff17, []int{127}
}
func (m *NftEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NftEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NftEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NftEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NftEvent.Merge(m, src)
}
func (m *NftEvent) XXX_Size() int {
	return m.Size()
}
func (m *NftEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_NftEvent.DiscardUnknown(m)
}

var xxx_messageInfo_NftEvent proto.InternalMessageInfo

func (m *NftEvent) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *NftEvent) GetEventType() string {
	if m != nil {
		return m.EventType
	}
	return ""
}

func (m *NftEvent) GetFromAccount() *NftAccount {
	if m != nil {
		return m.FromAccount
	}
	return nil
}

func (m *NftEvent) GetToAccount() *NftAccount {
	if m != nil {
		return m.ToAccount
	}
	return nil
}

func (m *NftEvent) GetCreatedDate() string {
	if m != nil {
		return m.CreatedDate
	}
	return ""
}

func (m *NftEvent) GetPaymentToken() *PaymentToken {
	if m != nil {
		return m.PaymentToken
	}
	return nil
}

type PageNftEventRequest struct {
	CurrentUid uint64     `protobuf:"varint,1,opt,name=current_uid,json=currentUid,proto3" json:"current_uid,omitempty"`
	NftAssetId string     `protobuf:"bytes,2,opt,name=nft_asset_id,json=nftAssetId,proto3" json:"nft_asset_id,omitempty"`
	Paginator  *PageQuick `protobuf:"bytes,3,opt,name=paginator,proto3" json:"paginator,omitempty"`
}

func (m *PageNftEventRequest) Reset()         { *m = PageNftEventRequest{} }
func (m *PageNftEventRequest) String() string { return proto.CompactTextString(m) }
func (*PageNftEventRequest) ProtoMessage()    {}
func (*PageNftEventRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_565883138c05ff17, []int{128}
}
func (m *PageNftEventRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PageNftEventRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PageNftEventRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PageNftEventRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PageNftEventRequest.Merge(m, src)
}
func (m *PageNftEventRequest) XXX_Size() int {
	return m.Size()
}
func (m *PageNftEventRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PageNftEventRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PageNftEventRequest proto.InternalMessageInfo

func (m *PageNftEventRequest) GetCurrentUid() uint64 {
	if m != nil {
		return m.CurrentUid
	}
	return 0
}

func (m *PageNftEventRequest) GetNftAssetId() string {
	if m != nil {
		return m.NftAssetId
	}
	return ""
}

func (m *PageNftEventRequest) GetPaginator() *PageQuick {
	if m != nil {
		return m.Paginator
	}
	return nil
}

type PageNftEventResponse struct {
	Code      uint64      `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Event     []*NftEvent `protobuf:"bytes,2,rep,name=event,proto3" json:"event,omitempty"`
	Paginator *PageQuick  `protobuf:"bytes,3,opt,name=paginator,proto3" json:"paginator,omitempty"`
}

func (m *PageNftEventResponse) Reset()         { *m = PageNftEventResponse{} }
func (m *PageNftEventResponse) String() string { return proto.CompactTextString(m) }
func (*PageNftEventResponse) ProtoMessage()    {}
func (*PageNftEventResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_565883138c05ff17, []int{129}
}
func (m *PageNftEventResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PageNftEventResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PageNftEventResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PageNftEventResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PageNftEventResponse.Merge(m, src)
}
func (m *PageNftEventResponse) XXX_Size() int {
	return m.Size()
}
func (m *PageNftEventResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PageNftEventResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PageNftEventResponse proto.InternalMessageInfo

func (m *PageNftEventResponse) GetCode() uint64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *PageNftEventResponse) GetEvent() []*NftEvent {
	if m != nil {
		return m.Event
	}
	return nil
}

func (m *PageNftEventResponse) GetPaginator() *PageQuick {
	if m != nil {
		return m.Paginator
	}
	return nil
}

type UpdateOpenseaNftRequest struct {
}

func (m *UpdateOpenseaNftRequest) Reset()         { *m = UpdateOpenseaNftRequest{} }
func (m *UpdateOpenseaNftRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateOpenseaNftRequest) ProtoMessage()    {}
func (*UpdateOpenseaNftRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_565883138c05ff17, []int{130}
}
func (m *UpdateOpenseaNftRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateOpenseaNftRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateOpenseaNftRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateOpenseaNftRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateOpenseaNftRequest.Merge(m, src)
}
func (m *UpdateOpenseaNftRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpdateOpenseaNftRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateOpenseaNftRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateOpenseaNftRequest proto.InternalMessageInfo

type UpdateOpenseaNftResponse struct {
	Code uint64 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
}

func (m *UpdateOpenseaNftResponse) Reset()         { *m = UpdateOpenseaNftResponse{} }
func (m *UpdateOpenseaNftResponse) String() string { return proto.CompactTextString(m) }
func (*UpdateOpenseaNftResponse) ProtoMessage()    {}
func (*UpdateOpenseaNftResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_565883138c05ff17, []int{131}
}
func (m *UpdateOpenseaNftResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateOpenseaNftResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateOpenseaNftResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateOpenseaNftResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateOpenseaNftResponse.Merge(m, src)
}
func (m *UpdateOpenseaNftResponse) XXX_Size() int {
	return m.Size()
}
func (m *UpdateOpenseaNftResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateOpenseaNftResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateOpenseaNftResponse proto.InternalMessageInfo

func (m *UpdateOpenseaNftResponse) GetCode() uint64 {
	if m != nil {
		return m.Code
	}
	return 0
}

type GetTwitterAuthUrlRequest struct {
	CurrentUid uint64 `protobuf:"varint,1,opt,name=current_uid,json=currentUid,proto3" json:"current_uid,omitempty"`
}

func (m *GetTwitterAuthUrlRequest) Reset()         { *m = GetTwitterAuthUrlRequest{} }
func (m *GetTwitterAuthUrlRequest) String() string { return proto.CompactTextString(m) }
func (*GetTwitterAuthUrlRequest) ProtoMessage()    {}
func (*GetTwitterAuthUrlRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_565883138c05ff17, []int{132}
}
func (m *GetTwitterAuthUrlRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetTwitterAuthUrlRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetTwitterAuthUrlRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetTwitterAuthUrlRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTwitterAuthUrlRequest.Merge(m, src)
}
func (m *GetTwitterAuthUrlRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetTwitterAuthUrlRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTwitterAuthUrlRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetTwitterAuthUrlRequest proto.InternalMessageInfo

func (m *GetTwitterAuthUrlRequest) GetCurrentUid() uint64 {
	if m != nil {
		return m.CurrentUid
	}
	return 0
}

type GetTwitterAuthUrlResponse struct {
	Code uint64 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Url  string `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
}

func (m *GetTwitterAuthUrlResponse) Reset()         { *m = GetTwitterAuthUrlResponse{} }
func (m *GetTwitterAuthUrlResponse) String() string { return proto.CompactTextString(m) }
func (*GetTwitterAuthUrlResponse) ProtoMessage()    {}
func (*GetTwitterAuthUrlResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_565883138c05ff17, []int{133}
}
func (m *GetTwitterAuthUrlResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetTwitterAuthUrlResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetTwitterAuthUrlResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetTwitterAuthUrlResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTwitterAuthUrlResponse.Merge(m, src)
}
func (m *GetTwitterAuthUrlResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetTwitterAuthUrlResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTwitterAuthUrlResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetTwitterAuthUrlResponse proto.InternalMessageInfo

func (m *GetTwitterAuthUrlResponse) GetCode() uint64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *GetTwitterAuthUrlResponse) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

type UserTwitterAuth struct {
	TwitterUserId    string  `protobuf:"bytes,1,opt,name=twitter_user_id,json=twitterUserId,proto3" json:"twitter_user_id,omitempty"`
	Name             string  `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Username         string  `protobuf:"bytes,3,opt,name=username,proto3" json:"username,omitempty"`
	FollowersCount   uint64  `protobuf:"varint,4,opt,name=followers_count,json=followersCount,proto3" json:"followers_count,omitempty"`
	TweetCount       uint64  `protobuf:"varint,5,opt,name=tweet_count,json=tweetCount,proto3" json:"tweet_count,omitempty"`
	TwitterCreatedAt uint64  `protobuf:"varint,6,opt,name=twitter_created_at,json=twitterCreatedAt,proto3" json:"twitter_created_at,omitempty"`
	Amount           float32 `protobuf:"fixed32,7,opt,name=amount,proto3" json:"amount,omitempty"`
	CreatedAt        uint64  `protobuf:"varint,8,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	Misesid          string  `protobuf:"bytes,9,opt,name=misesid,proto3" json:"misesid,omitempty"`
}

func (m *UserTwitterAuth) Reset()         { *m = UserTwitterAuth{} }
func (m *UserTwitterAuth) String() string { return proto.CompactTextString(m) }
func (*UserTwitterAuth) ProtoMessage()    {}
func (*UserTwitterAuth) Descriptor() ([]byte, []int) {
	return fileDescriptor_565883138c05ff17, []int{134}
}
func (m *UserTwitterAuth) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserTwitterAuth) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserTwitterAuth.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserTwitterAuth) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserTwitterAuth.Merge(m, src)
}
func (m *UserTwitterAuth) XXX_Size() int {
	return m.Size()
}
func (m *UserTwitterAuth) XXX_DiscardUnknown() {
	xxx_messageInfo_UserTwitterAuth.DiscardUnknown(m)
}

var xxx_messageInfo_UserTwitterAuth proto.InternalMessageInfo

func (m *UserTwitterAuth) GetTwitterUserId() string {
	if m != nil {
		return m.TwitterUserId
	}
	return ""
}

func (m *UserTwitterAuth) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UserTwitterAuth) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *UserTwitterAuth) GetFollowersCount() uint64 {
	if m != nil {
		return m.FollowersCount
	}
	return 0
}

func (m *UserTwitterAuth) GetTweetCount() uint64 {
	if m != nil {
		return m.TweetCount
	}
	return 0
}

func (m *UserTwitterAuth) GetTwitterCreatedAt() uint64 {
	if m != nil {
		return m.TwitterCreatedAt
	}
	return 0
}

func (m *UserTwitterAuth) GetAmount() float32 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *UserTwitterAuth) GetCreatedAt() uint64 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

func (m *UserTwitterAuth) GetMisesid() string {
	if m != nil {
		return m.Misesid
	}
	return ""
}

type Airdrop struct {
	Coin      float32 `protobuf:"fixed32,1,opt,name=coin,proto3" json:"coin,omitempty"`
	CreatedAt uint64  `protobuf:"varint,2,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	FinishAt  uint64  `protobuf:"varint,3,opt,name=finish_at,json=finishAt,proto3" json:"finish_at,omitempty"`
	Status    string  `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty"`
}

func (m *Airdrop) Reset()         { *m = Airdrop{} }
func (m *Airdrop) String() string { return proto.CompactTextString(m) }
func (*Airdrop) ProtoMessage()    {}
func (*Airdrop) Descriptor() ([]byte, []int) {
	return fileDescriptor_565883138c05ff17, []int{135}
}
func (m *Airdrop) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Airdrop) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Airdrop.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Airdrop) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Airdrop.Merge(m, src)
}
func (m *Airdrop) XXX_Size() int {
	return m.Size()
}
func (m *Airdrop) XXX_DiscardUnknown() {
	xxx_messageInfo_Airdrop.DiscardUnknown(m)
}

var xxx_messageInfo_Airdrop proto.InternalMessageInfo

func (m *Airdrop) GetCoin() float32 {
	if m != nil {
		return m.Coin
	}
	return 0
}

func (m *Airdrop) GetCreatedAt() uint64 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

func (m *Airdrop) GetFinishAt() uint64 {
	if m != nil {
		return m.FinishAt
	}
	return 0
}

func (m *Airdrop) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

type GetAirdropInfoRequest struct {
	CurrentUid uint64 `protobuf:"varint,1,opt,name=current_uid,json=currentUid,proto3" json:"current_uid,omitempty"`
}

func (m *GetAirdropInfoRequest) Reset()         { *m = GetAirdropInfoRequest{} }
func (m *GetAirdropInfoRequest) String() string { return proto.CompactTextString(m) }
func (*GetAirdropInfoRequest) ProtoMessage()    {}
func (*GetAirdropInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_565883138c05ff17, []int{136}
}
func (m *GetAirdropInfoRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetAirdropInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetAirdropInfoRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetAirdropInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAirdropInfoRequest.Merge(m, src)
}
func (m *GetAirdropInfoRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetAirdropInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAirdropInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetAirdropInfoRequest proto.InternalMessageInfo

func (m *GetAirdropInfoRequest) GetCurrentUid() uint64 {
	if m != nil {
		return m.CurrentUid
	}
	return 0
}

type GetAirdropInfoResponse struct {
	Code    uint64           `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Twitter *UserTwitterAuth `protobuf:"bytes,2,opt,name=twitter,proto3" json:"twitter,omitempty"`
	Airdrop *Airdrop         `protobuf:"bytes,3,opt,name=airdrop,proto3" json:"airdrop,omitempty"`
}

func (m *GetAirdropInfoResponse) Reset()         { *m = GetAirdropInfoResponse{} }
func (m *GetAirdropInfoResponse) String() string { return proto.CompactTextString(m) }
func (*GetAirdropInfoResponse) ProtoMessage()    {}
func (*GetAirdropInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_565883138c05ff17, []int{137}
}
func (m *GetAirdropInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetAirdropInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetAirdropInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetAirdropInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAirdropInfoResponse.Merge(m, src)
}
func (m *GetAirdropInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetAirdropInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAirdropInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetAirdropInfoResponse proto.InternalMessageInfo

func (m *GetAirdropInfoResponse) GetCode() uint64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *GetAirdropInfoResponse) GetTwitter() *UserTwitterAuth {
	if m != nil {
		return m.Twitter
	}
	return nil
}

func (m *GetAirdropInfoResponse) GetAirdrop() *Airdrop {
	if m != nil {
		return m.Airdrop
	}
	return nil
}

type TwitterCallbackRequest struct {
	CurrentUid    uint64 `protobuf:"varint,1,opt,name=current_uid,json=currentUid,proto3" json:"current_uid,omitempty"`
	OauthToken    string `protobuf:"bytes,2,opt,name=oauth_token,json=oauthToken,proto3" json:"oauth_token,omitempty"`
	OauthVerifier string `protobuf:"bytes,3,opt,name=oauth_verifier,json=oauthVerifier,proto3" json:"oauth_verifier,omitempty"`
}

func (m *TwitterCallbackRequest) Reset()         { *m = TwitterCallbackRequest{} }
func (m *TwitterCallbackRequest) String() string { return proto.CompactTextString(m) }
func (*TwitterCallbackRequest) ProtoMessage()    {}
func (*TwitterCallbackRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_565883138c05ff17, []int{138}
}
func (m *TwitterCallbackRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TwitterCallbackRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TwitterCallbackRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TwitterCallbackRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TwitterCallbackRequest.Merge(m, src)
}
func (m *TwitterCallbackRequest) XXX_Size() int {
	return m.Size()
}
func (m *TwitterCallbackRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TwitterCallbackRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TwitterCallbackRequest proto.InternalMessageInfo

func (m *TwitterCallbackRequest) GetCurrentUid() uint64 {
	if m != nil {
		return m.CurrentUid
	}
	return 0
}

func (m *TwitterCallbackRequest) GetOauthToken() string {
	if m != nil {
		return m.OauthToken
	}
	return ""
}

func (m *TwitterCallbackRequest) GetOauthVerifier() string {
	if m != nil {
		return m.OauthVerifier
	}
	return ""
}

type TwitterCallbackResponse struct {
	Code uint64 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Url  string `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
}

func (m *TwitterCallbackResponse) Reset()         { *m = TwitterCallbackResponse{} }
func (m *TwitterCallbackResponse) String() string { return proto.CompactTextString(m) }
func (*TwitterCallbackResponse) ProtoMessage()    {}
func (*TwitterCallbackResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_565883138c05ff17, []int{139}
}
func (m *TwitterCallbackResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TwitterCallbackResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TwitterCallbackResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TwitterCallbackResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TwitterCallbackResponse.Merge(m, src)
}
func (m *TwitterCallbackResponse) XXX_Size() int {
	return m.Size()
}
func (m *TwitterCallbackResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_TwitterCallbackResponse.DiscardUnknown(m)
}

var xxx_messageInfo_TwitterCallbackResponse proto.InternalMessageInfo

func (m *TwitterCallbackResponse) GetCode() uint64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *TwitterCallbackResponse) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

type ReceiveAirdropRequest struct {
	CurrentUid uint64 `protobuf:"varint,1,opt,name=current_uid,json=currentUid,proto3" json:"current_uid,omitempty"`
	Tweet      string `protobuf:"bytes,2,opt,name=tweet,proto3" json:"tweet,omitempty"`
}

func (m *ReceiveAirdropRequest) Reset()         { *m = ReceiveAirdropRequest{} }
func (m *ReceiveAirdropRequest) String() string { return proto.CompactTextString(m) }
func (*ReceiveAirdropRequest) ProtoMessage()    {}
func (*ReceiveAirdropRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_565883138c05ff17, []int{140}
}
func (m *ReceiveAirdropRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReceiveAirdropRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReceiveAirdropRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReceiveAirdropRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReceiveAirdropRequest.Merge(m, src)
}
func (m *ReceiveAirdropRequest) XXX_Size() int {
	return m.Size()
}
func (m *ReceiveAirdropRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ReceiveAirdropRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ReceiveAirdropRequest proto.InternalMessageInfo

func (m *ReceiveAirdropRequest) GetCurrentUid() uint64 {
	if m != nil {
		return m.CurrentUid
	}
	return 0
}

func (m *ReceiveAirdropRequest) GetTweet() string {
	if m != nil {
		return m.Tweet
	}
	return ""
}

type ReceiveAirdropResponse struct {
	Code uint64 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
}

func (m *ReceiveAirdropResponse) Reset()         { *m = ReceiveAirdropResponse{} }
func (m *ReceiveAirdropResponse) String() string { return proto.CompactTextString(m) }
func (*ReceiveAirdropResponse) ProtoMessage()    {}
func (*ReceiveAirdropResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_565883138c05ff17, []int{141}
}
func (m *ReceiveAirdropResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReceiveAirdropResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReceiveAirdropResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReceiveAirdropResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReceiveAirdropResponse.Merge(m, src)
}
func (m *ReceiveAirdropResponse) XXX_Size() int {
	return m.Size()
}
func (m *ReceiveAirdropResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ReceiveAirdropResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ReceiveAirdropResponse proto.InternalMessageInfo

func (m *ReceiveAirdropResponse) GetCode() uint64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func init() {
	proto.RegisterType((*SignInRequest)(nil), "socialsvc.SignInRequest")
	proto.RegisterType((*SignInResponse)(nil), "socialsvc.SignInResponse")
	proto.RegisterType((*ComplaintRequest)(nil), "socialsvc.ComplaintRequest")
	proto.RegisterType((*ComplaintResponse)(nil), "socialsvc.ComplaintResponse")
	proto.RegisterType((*UserAvatar)(nil), "socialsvc.UserAvatar")
	proto.RegisterType((*UserInfo)(nil), "socialsvc.UserInfo")
	proto.RegisterType((*FindMisesUserRequest)(nil), "socialsvc.FindMisesUserRequest")
	proto.RegisterType((*FindMisesUserResponse)(nil), "socialsvc.FindMisesUserResponse")
	proto.RegisterType((*FindUserRequest)(nil), "socialsvc.FindUserRequest")
	proto.RegisterType((*FindUserResponse)(nil), "socialsvc.FindUserResponse")
	proto.RegisterType((*UpdateUserProfileRequest)(nil), "socialsvc.UpdateUserProfileRequest")
	proto.RegisterType((*UpdateUserAvatarRequest)(nil), "socialsvc.UpdateUserAvatarRequest")
	proto.RegisterType((*UpdateUserNameRequest)(nil), "socialsvc.UpdateUserNameRequest")
	proto.RegisterType((*UpdateUserResponse)(nil), "socialsvc.UpdateUserResponse")
	proto.RegisterType((*LinkMetaInfo)(nil), "socialsvc.LinkMetaInfo")
	proto.RegisterType((*ImageMetaInfo)(nil), "socialsvc.ImageMetaInfo")
	proto.RegisterType((*StatusInfo)(nil), "socialsvc.StatusInfo")
	proto.RegisterType((*GetStatusRequest)(nil), "socialsvc.GetStatusRequest")
	proto.RegisterType((*GetStatusResponse)(nil), "socialsvc.GetStatusResponse")
	proto.RegisterType((*PageQuick)(nil), "socialsvc.PageQuick")
	proto.RegisterType((*Page)(nil), "socialsvc.Page")
	proto.RegisterType((*ListStatusRequest)(nil), "socialsvc.ListStatusRequest")
	proto.RegisterType((*ListStatusResponse)(nil), "socialsvc.ListStatusResponse")
	proto.RegisterType((*PageChannelUserRequest)(nil), "socialsvc.PageChannelUserRequest")
	proto.RegisterType((*ChannelUserInfo)(nil), "socialsvc.ChannelUserInfo")
	proto.RegisterType((*PageChannelUserResponse)(nil), "socialsvc.PageChannelUserResponse")
	proto.RegisterType((*NewListStatusRequest)(nil), "socialsvc.NewListStatusRequest")
	proto.RegisterType((*NewListStatusResponse)(nil), "socialsvc.NewListStatusResponse")
	proto.RegisterType((*NewRecommendNext)(nil), "socialsvc.NewRecommendNext")
	proto.RegisterType((*NewRecommendStatusRequest)(nil), "socialsvc.NewRecommendStatusRequest")
	proto.RegisterType((*NewRecommendStatusResponse)(nil), "socialsvc.NewRecommendStatusResponse")
	proto.RegisterType((*CreateStatusRequest)(nil), "socialsvc.CreateStatusRequest")
	proto.RegisterType((*UpdateStatusRequest)(nil), "socialsvc.UpdateStatusRequest")
	proto.RegisterType((*CreateStatusResponse)(nil), "socialsvc.CreateStatusResponse")
	proto.RegisterType((*UpdateStatusResponse)(nil), "socialsvc.UpdateStatusResponse")
	proto.RegisterType((*DeleteStatusRequest)(nil), "socialsvc.DeleteStatusRequest")
	proto.RegisterType((*SimpleResponse)(nil), "socialsvc.SimpleResponse")
	proto.RegisterType((*LikeStatusRequest)(nil), "socialsvc.LikeStatusRequest")
	proto.RegisterType((*UnLikeStatusRequest)(nil), "socialsvc.UnLikeStatusRequest")
	proto.RegisterType((*LikeNftAssetRequest)(nil), "socialsvc.LikeNftAssetRequest")
	proto.RegisterType((*UnLikeNftAssetRequest)(nil), "socialsvc.UnLikeNftAssetRequest")
	proto.RegisterType((*FollowRequest)(nil), "socialsvc.FollowRequest")
	proto.RegisterType((*UnFollowRequest)(nil), "socialsvc.UnFollowRequest")
	proto.RegisterType((*RelationInfo)(nil), "socialsvc.RelationInfo")
	proto.RegisterType((*ListRelationshipRequest)(nil), "socialsvc.ListRelationshipRequest")
	proto.RegisterType((*ListRelationshipResponse)(nil), "socialsvc.ListRelationshipResponse")
	proto.RegisterType((*Comment)(nil), "socialsvc.Comment")
	proto.RegisterType((*GetCommentRequest)(nil), "socialsvc.GetCommentRequest")
	proto.RegisterType((*GetCommentResponse)(nil), "socialsvc.GetCommentResponse")
	proto.RegisterType((*ListCommentRequest)(nil), "socialsvc.ListCommentRequest")
	proto.RegisterType((*ListCommentResponse)(nil), "socialsvc.ListCommentResponse")
	proto.RegisterType((*ListLikeUserRequest)(nil), "socialsvc.ListLikeUserRequest")
	proto.RegisterType((*Like)(nil), "socialsvc.Like")
	proto.RegisterType((*ListLikeUserResponse)(nil), "socialsvc.ListLikeUserResponse")
	proto.RegisterType((*CreateCommentRequest)(nil), "socialsvc.CreateCommentRequest")
	proto.RegisterType((*DeleteCommentRequest)(nil), "socialsvc.DeleteCommentRequest")
	proto.RegisterType((*CreateCommentResponse)(nil), "socialsvc.CreateCommentResponse")
	proto.RegisterType((*NewCommentMeta)(nil), "socialsvc.NewCommentMeta")
	proto.RegisterType((*NewNftCommentMeta)(nil), "socialsvc.NewNftCommentMeta")
	proto.RegisterType((*NewLikeNftCommentMeta)(nil), "socialsvc.NewLikeNftCommentMeta")
	proto.RegisterType((*NewLikeCommentMeta)(nil), "socialsvc.NewLikeCommentMeta")
	proto.RegisterType((*NewLikeNftMeta)(nil), "socialsvc.NewLikeNftMeta")
	proto.RegisterType((*NewLikeStatusMeta)(nil), "socialsvc.NewLikeStatusMeta")
	proto.RegisterType((*NewFansMeta)(nil), "socialsvc.NewFansMeta")
	proto.RegisterType((*NewForwardMeta)(nil), "socialsvc.NewForwardMeta")
	proto.RegisterType((*Message)(nil), "socialsvc.Message")
	proto.RegisterType((*ListMessageRequest)(nil), "socialsvc.ListMessageRequest")
	proto.RegisterType((*ListMessageResponse)(nil), "socialsvc.ListMessageResponse")
	proto.RegisterType((*ReadMessageRequest)(nil), "socialsvc.ReadMessageRequest")
	proto.RegisterType((*GetMessageSummaryRequest)(nil), "socialsvc.GetMessageSummaryRequest")
	proto.RegisterType((*MessageSummaryResponse)(nil), "socialsvc.MessageSummaryResponse")
	proto.RegisterType((*MessageSummary)(nil), "socialsvc.MessageSummary")
	proto.RegisterType((*LatestFollowingRequest)(nil), "socialsvc.LatestFollowingRequest")
	proto.RegisterType((*Following)(nil), "socialsvc.Following")
	proto.RegisterType((*LatestFollowingResponse)(nil), "socialsvc.LatestFollowingResponse")
	proto.RegisterType((*Blacklist)(nil), "socialsvc.Blacklist")
	proto.RegisterType((*ListBlacklistRequest)(nil), "socialsvc.ListBlacklistRequest")
	proto.RegisterType((*ListBlacklistResponse)(nil), "socialsvc.ListBlacklistResponse")
	proto.RegisterType((*CreateBlacklistRequest)(nil), "socialsvc.CreateBlacklistRequest")
	proto.RegisterType((*DeleteBlacklistRequest)(nil), "socialsvc.DeleteBlacklistRequest")
	proto.RegisterType((*ListLikeRequest)(nil), "socialsvc.ListLikeRequest")
	proto.RegisterType((*StatusLike)(nil), "socialsvc.StatusLike")
	proto.RegisterType((*ListLikeResponse)(nil), "socialsvc.ListLikeResponse")
	proto.RegisterType((*LikeCommentRequest)(nil), "socialsvc.LikeCommentRequest")
	proto.RegisterType((*UnlikeCommentRequest)(nil), "socialsvc.UnlikeCommentRequest")
	proto.RegisterType((*ShareTweetUrlRequest)(nil), "socialsvc.ShareTweetUrlRequest")
	proto.RegisterType((*ShareTweetUrlResponse)(nil), "socialsvc.ShareTweetUrlResponse")
	proto.RegisterType((*TwitterAuthRequest)(nil), "socialsvc.TwitterAuthRequest")
	proto.RegisterType((*TwitterAuthResponse)(nil), "socialsvc.TwitterAuthResponse")
	proto.RegisterType((*AirdropTwitterRequest)(nil), "socialsvc.AirdropTwitterRequest")
	proto.RegisterType((*AirdropTwitterResponse)(nil), "socialsvc.AirdropTwitterResponse")
	proto.RegisterType((*AirdropChannelRequest)(nil), "socialsvc.AirdropChannelRequest")
	proto.RegisterType((*AirdropChannelResponse)(nil), "socialsvc.AirdropChannelResponse")
	proto.RegisterType((*CreateAirdropTwitterRequest)(nil), "socialsvc.CreateAirdropTwitterRequest")
	proto.RegisterType((*CreateAirdropTwitterResponse)(nil), "socialsvc.CreateAirdropTwitterResponse")
	proto.RegisterType((*CreateChannelAirdropRequest)(nil), "socialsvc.CreateChannelAirdropRequest")
	proto.RegisterType((*CreateChannelAirdropResponse)(nil), "socialsvc.CreateChannelAirdropResponse")
	proto.RegisterType((*UserToChainRequest)(nil), "socialsvc.UserToChainRequest")
	proto.RegisterType((*UserToChainResponse)(nil), "socialsvc.UserToChainResponse")
	proto.RegisterType((*TwitterFollowRequest)(nil), "socialsvc.TwitterFollowRequest")
	proto.RegisterType((*TwitterFollowResponse)(nil), "socialsvc.TwitterFollowResponse")
	proto.RegisterType((*ChannelInfoRequest)(nil), "socialsvc.ChannelInfoRequest")
	proto.RegisterType((*ChannelInfoResponse)(nil), "socialsvc.ChannelInfoResponse")
	proto.RegisterType((*GetChannelUserRequest)(nil), "socialsvc.GetChannelUserRequest")
	proto.RegisterType((*GetChannelUserResponse)(nil), "socialsvc.GetChannelUserResponse")
	proto.RegisterType((*OpenseaAsset)(nil), "socialsvc.OpenseaAsset")
	proto.RegisterType((*GetOpenseaAssetRequest)(nil), "socialsvc.GetOpenseaAssetRequest")
	proto.RegisterType((*GetOpenseaAssetResponse)(nil), "socialsvc.GetOpenseaAssetResponse")
	proto.RegisterType((*GetOpenseaAssetContractRequest)(nil), "socialsvc.GetOpenseaAssetContractRequest")
	proto.RegisterType((*GetOpenseaAssetContractResponse)(nil), "socialsvc.GetOpenseaAssetContractResponse")
	proto.RegisterType((*ListOpenseaAssetRequest)(nil), "socialsvc.ListOpenseaAssetRequest")
	proto.RegisterType((*ListOpenseaAssetResponse)(nil), "socialsvc.ListOpenseaAssetResponse")
	proto.RegisterType((*NftCollection)(nil), "socialsvc.NftCollection")
	proto.RegisterType((*AssetContract)(nil), "socialsvc.AssetContract")
	proto.RegisterType((*NftAsset)(nil), "socialsvc.NftAsset")
	proto.RegisterType((*PageNftAssetRequest)(nil), "socialsvc.PageNftAssetRequest")
	proto.RegisterType((*PageNftAssetResponse)(nil), "socialsvc.PageNftAssetResponse")
	proto.RegisterType((*GetNftAssetRequest)(nil), "socialsvc.GetNftAssetRequest")
	proto.RegisterType((*GetNftAssetResponse)(nil), "socialsvc.GetNftAssetResponse")
	proto.RegisterType((*UserConfig)(nil), "socialsvc.UserConfig")
	proto.RegisterType((*UpdateUserConfigRequest)(nil), "socialsvc.UpdateUserConfigRequest")
	proto.RegisterType((*UpdateUserConfigResponse)(nil), "socialsvc.UpdateUserConfigResponse")
	proto.RegisterType((*GetUserConfigRequest)(nil), "socialsvc.GetUserConfigRequest")
	proto.RegisterType((*GetUserConfigResponse)(nil), "socialsvc.GetUserConfigResponse")
	proto.RegisterType((*NftAccount)(nil), "socialsvc.NftAccount")
	proto.RegisterType((*PaymentToken)(nil), "socialsvc.PaymentToken")
	proto.RegisterType((*Stats)(nil), "socialsvc.Stats")
	proto.RegisterType((*NftEvent)(nil), "socialsvc.NftEvent")
	proto.RegisterType((*PageNftEventRequest)(nil), "socialsvc.PageNftEventRequest")
	proto.RegisterType((*PageNftEventResponse)(nil), "socialsvc.PageNftEventResponse")
	proto.RegisterType((*UpdateOpenseaNftRequest)(nil), "socialsvc.UpdateOpenseaNftRequest")
	proto.RegisterType((*UpdateOpenseaNftResponse)(nil), "socialsvc.UpdateOpenseaNftResponse")
	proto.RegisterType((*GetTwitterAuthUrlRequest)(nil), "socialsvc.GetTwitterAuthUrlRequest")
	proto.RegisterType((*GetTwitterAuthUrlResponse)(nil), "socialsvc.GetTwitterAuthUrlResponse")
	proto.RegisterType((*UserTwitterAuth)(nil), "socialsvc.UserTwitterAuth")
	proto.RegisterType((*Airdrop)(nil), "socialsvc.Airdrop")
	proto.RegisterType((*GetAirdropInfoRequest)(nil), "socialsvc.GetAirdropInfoRequest")
	proto.RegisterType((*GetAirdropInfoResponse)(nil), "socialsvc.GetAirdropInfoResponse")
	proto.RegisterType((*TwitterCallbackRequest)(nil), "socialsvc.TwitterCallbackRequest")
	proto.RegisterType((*TwitterCallbackResponse)(nil), "socialsvc.TwitterCallbackResponse")
	proto.RegisterType((*ReceiveAirdropRequest)(nil), "socialsvc.ReceiveAirdropRequest")
	proto.RegisterType((*ReceiveAirdropResponse)(nil), "socialsvc.ReceiveAirdropResponse")
}

func init() { proto.RegisterFile("socialsvc.proto", fileDescriptor_565883138c05ff17) }

var fileDescriptor_565883138c05ff17 = []byte{
	// 6563 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe4, 0x7d, 0x5d, 0x6c, 0x23, 0xc9,
	0x71, 0xb0, 0x87, 0xa4, 0x24, 0xb2, 0xc4, 0x1f, 0xa9, 0x45, 0x51, 0x5c, 0xee, 0xff, 0xec, 0xed,
	0xed, 0xee, 0xfd, 0x2c, 0x7d, 0xeb, 0x35, 0xce, 0xf6, 0x7d, 0x5f, 0x0e, 0x7b, 0x3a, 0xdf, 0x41,
	0xc1, 0xde, 0xde, 0x1e, 0x77, 0x65, 0xc7, 0x82, 0x13, 0x62, 0x96, 0x6c, 0x49, 0x13, 0x0d, 0x67,
	0xe8, 0x99, 0xa1, 0x74, 0xeb, 0x38, 0xfe, 0xb9, 0xc4, 0x89, 0x7f, 0x12, 0xd8, 0x89, 0xf3, 0xe3,
	0xfc, 0xbd, 0x18, 0xf9, 0x79, 0x08, 0x9c, 0x87, 0x04, 0x08, 0x90, 0xbc, 0xfa, 0x25, 0x8f, 0x06,
	0xf2, 0x92, 0xc7, 0xc0, 0x4e, 0x00, 0xbf, 0x05, 0x08, 0x92, 0xb7, 0x3c, 0x04, 0x5d, 0xdd, 0x3d,
	0xd3, 0xdd, 0x33, 0xa4, 0x28, 0x9d, 0xce, 0x08, 0x92, 0x37, 0x75, 0x75, 0x4d, 0x75, 0x75, 0x75,
	0x75, 0x55, 0x75, 0x75, 0x35, 0x05, 0x8d, 0x28, 0x18, 0xb8, 0x8e, 0x17, 0x1d, 0x0e, 0x6e, 0x8f,
	0xc3, 0x20, 0x0e, 0x48, 0x25, 0x01, 0x74, 0x2e, 0xec, 0x05, 0xc1, 0x9e, 0x47, 0xbb, 0xce, 0xd8,
	0xed, 0x3a, 0xbe, 0x1f, 0xc4, 0x4e, 0xec, 0x06, 0x7e, 0xc4, 0x11, 0xed, 0x57, 0xa1, 0xf6, 0xc8,
	0xdd, 0xf3, 0xb7, 0xfc, 0x1e, 0xfd, 0xdc, 0x84, 0x46, 0x31, 0x21, 0x50, 0x72, 0x26, 0xf1, 0x7e,
	0xdb, 0xba, 0x62, 0xdd, 0xac, 0xf4, 0xf0, 0x6f, 0xd2, 0x81, 0x72, 0x48, 0x77, 0x69, 0x18, 0xd2,
	0xb0, 0x5d, 0x40, 0x78, 0xd2, 0xb6, 0xb7, 0xa1, 0x2e, 0x09, 0x44, 0xe3, 0xc0, 0x8f, 0x28, 0xa3,
	0x30, 0x08, 0x86, 0x14, 0x29, 0x94, 0x7a, 0xf8, 0x37, 0x59, 0x81, 0xe2, 0x2f, 0x1e, 0xc5, 0xe2,
	0x63, 0xf6, 0x27, 0xb9, 0x08, 0xe0, 0x46, 0xfd, 0x41, 0x48, 0x9d, 0x98, 0x0e, 0xdb, 0xc5, 0x2b,
	0xd6, 0xcd, 0x72, 0xaf, 0xe2, 0x46, 0x9b, 0x1c, 0x60, 0x7f, 0xdd, 0x82, 0x95, 0xcd, 0x60, 0x34,
	0xf6, 0x1c, 0xd7, 0x8f, 0x25, 0x6f, 0x97, 0x61, 0x79, 0x30, 0x09, 0x43, 0xea, 0xc7, 0xfd, 0x89,
	0x3b, 0x14, 0x03, 0x80, 0x00, 0x6d, 0xbb, 0x43, 0x86, 0x10, 0x3b, 0xe1, 0x1e, 0x8d, 0xfb, 0xf1,
	0xd3, 0x31, 0x15, 0xc3, 0x01, 0x07, 0x3d, 0x7e, 0x3a, 0xa6, 0xe4, 0x3c, 0x54, 0x04, 0x82, 0xcb,
	0x07, 0xad, 0xf4, 0xca, 0x1c, 0xb0, 0x35, 0x24, 0x2d, 0x58, 0x0c, 0xa9, 0x13, 0x05, 0x7e, 0xbb,
	0x84, 0x3d, 0xa2, 0x65, 0xdf, 0x80, 0x55, 0x85, 0x95, 0xe9, 0xb3, 0xb4, 0x43, 0x80, 0xed, 0x88,
	0x86, 0xf7, 0x0e, 0x9d, 0xd8, 0x09, 0x49, 0x13, 0x16, 0xa2, 0x91, 0xe3, 0x79, 0x42, 0x94, 0xbc,
	0xc1, 0x06, 0x19, 0xd1, 0xa1, 0x3b, 0x19, 0x09, 0xee, 0x44, 0x8b, 0x61, 0x7b, 0x8c, 0x11, 0xc1,
	0x15, 0x6f, 0x90, 0x2b, 0x50, 0xf5, 0x77, 0xe3, 0xbe, 0x13, 0x45, 0x9c, 0x65, 0xce, 0x18, 0xf8,
	0xbb, 0xf1, 0x3d, 0x06, 0xda, 0x1a, 0xda, 0xff, 0x59, 0x82, 0x32, 0x1b, 0x74, 0xcb, 0xdf, 0x0d,
	0x98, 0x98, 0x53, 0xc1, 0xb0, 0x3f, 0xd9, 0xd2, 0x4d, 0x22, 0x1a, 0xfa, 0xce, 0x48, 0x8a, 0x23,
	0x69, 0x93, 0x36, 0x2c, 0x8d, 0xdc, 0x88, 0x46, 0x89, 0x28, 0x64, 0x93, 0x31, 0xb9, 0x47, 0xfd,
	0x21, 0x0d, 0xa5, 0x24, 0x78, 0x0b, 0x99, 0x0f, 0x9e, 0xb8, 0x1e, 0x6d, 0x2f, 0x08, 0xe6, 0xb1,
	0xc5, 0x98, 0xa7, 0x23, 0xc7, 0xf5, 0xda, 0x8b, 0x9c, 0x79, 0x6c, 0x30, 0xfa, 0xce, 0x70, 0x18,
	0xd2, 0x28, 0x6a, 0x2f, 0x71, 0xfa, 0xa2, 0xc9, 0xe8, 0x38, 0x28, 0xa4, 0x76, 0x99, 0xd3, 0xe1,
	0x2d, 0xb6, 0x7e, 0x6e, 0xd4, 0xdf, 0x0d, 0x3c, 0x2f, 0x38, 0xa2, 0xc3, 0x76, 0x05, 0xb5, 0x02,
	0xdc, 0xe8, 0x0d, 0x01, 0x11, 0x5a, 0xf3, 0xc4, 0x0b, 0x06, 0x07, 0x74, 0xd8, 0x06, 0xa9, 0x35,
	0xaf, 0x71, 0x00, 0xb9, 0x05, 0x2b, 0xfc, 0x63, 0xd7, 0xdf, 0x8b, 0xfa, 0x83, 0x60, 0xe2, 0xc7,
	0xed, 0xe5, 0x2b, 0xd6, 0xcd, 0x5a, 0xaf, 0x91, 0xc2, 0x37, 0x19, 0x98, 0x51, 0xda, 0x75, 0x7c,
	0x89, 0x54, 0x45, 0xa4, 0x0a, 0x83, 0xf0, 0xee, 0xcb, 0xb0, 0xec, 0xb9, 0x07, 0x74, 0x28, 0xfa,
	0x6b, 0xd8, 0x0f, 0x08, 0xe2, 0x08, 0xcf, 0x40, 0xdd, 0xa7, 0x47, 0x7d, 0x85, 0x46, 0x1d, 0x71,
	0xaa, 0x3e, 0x3d, 0x7a, 0x23, 0x21, 0x73, 0x17, 0x80, 0x4f, 0xad, 0x3f, 0x09, 0xbd, 0x76, 0xe3,
	0x8a, 0x75, 0x73, 0xf9, 0xce, 0xfa, 0xed, 0x74, 0xb7, 0xa6, 0xea, 0xd2, 0xab, 0x70, 0xc4, 0xed,
	0xd0, 0x23, 0xd7, 0xa0, 0xe6, 0x46, 0x7d, 0xc7, 0x0d, 0x87, 0x61, 0x30, 0x1e, 0xd3, 0x61, 0x7b,
	0x05, 0x27, 0x5a, 0x75, 0xa3, 0x7b, 0x09, 0x8c, 0x5c, 0x87, 0xba, 0xc0, 0xe8, 0x47, 0xb1, 0x13,
	0x4f, 0xa2, 0xf6, 0x2a, 0x62, 0xd5, 0x04, 0xf4, 0x11, 0x02, 0x85, 0xc4, 0xbc, 0x60, 0xcf, 0xf5,
	0xe9, 0xb0, 0x4d, 0xa4, 0xc4, 0xee, 0x73, 0x00, 0xb9, 0x0a, 0xd5, 0x7d, 0xea, 0x8d, 0xfb, 0x52,
	0x11, 0xd6, 0x70, 0x3d, 0x96, 0x19, 0xec, 0x2d, 0xa1, 0x0c, 0x4d, 0x58, 0x70, 0xfd, 0x38, 0x0c,
	0xda, 0x4d, 0xbe, 0xb8, 0xd8, 0xb0, 0xdf, 0x81, 0xe6, 0x1b, 0xae, 0x3f, 0x44, 0x24, 0x36, 0x0b,
	0xb9, 0x47, 0x15, 0xa5, 0xb2, 0x74, 0xa5, 0x32, 0x76, 0x6f, 0xc1, 0xdc, 0xbd, 0xf6, 0x04, 0xd6,
	0x0d, 0x92, 0x33, 0x2c, 0xca, 0x0d, 0x28, 0x31, 0x45, 0x46, 0x32, 0xcb, 0x77, 0xd6, 0x0c, 0x99,
	0xb2, 0xdd, 0xd0, 0x43, 0x04, 0x53, 0xa7, 0x8a, 0xa6, 0x4e, 0xd9, 0xaf, 0x43, 0x83, 0x0d, 0xab,
	0x4e, 0x22, 0xbb, 0x8f, 0x8e, 0x65, 0x7e, 0x0c, 0x2b, 0x29, 0x95, 0x9f, 0x0a, 0xdf, 0xdf, 0xb3,
	0xa0, 0xbd, 0x3d, 0x1e, 0x3a, 0x31, 0x65, 0x5f, 0x3e, 0x0c, 0x83, 0x5d, 0xd7, 0xa3, 0xd3, 0x67,
	0x90, 0xee, 0xe9, 0xc2, 0x94, 0x3d, 0x5d, 0xcc, 0xdf, 0xd3, 0xa5, 0x29, 0x7b, 0x7a, 0x41, 0xdf,
	0xd3, 0x89, 0x9a, 0x2c, 0xaa, 0x6a, 0x72, 0x08, 0x1b, 0x29, 0x8f, 0x42, 0xd3, 0xa7, 0xb2, 0x78,
	0x03, 0x1a, 0x4e, 0x1c, 0x3b, 0x83, 0xfd, 0x11, 0x93, 0xf3, 0xd8, 0x89, 0xf7, 0x05, 0xaf, 0xf5,
	0x14, 0xfc, 0xd0, 0x89, 0xf7, 0x33, 0x66, 0xb1, 0x98, 0x31, 0x8b, 0x9f, 0x84, 0xf5, 0x74, 0xdc,
	0x07, 0xce, 0x68, 0x86, 0x60, 0x66, 0x98, 0x48, 0xfb, 0x1d, 0x20, 0x29, 0x99, 0x33, 0x59, 0x57,
	0xfb, 0x6b, 0x16, 0x54, 0xef, 0xbb, 0xfe, 0xc1, 0x5b, 0x34, 0x76, 0xd0, 0x68, 0x37, 0x61, 0x21,
	0x76, 0x63, 0x8f, 0x4a, 0x3f, 0x81, 0x0d, 0x36, 0xc6, 0x7e, 0x10, 0x49, 0x97, 0x89, 0x7f, 0x33,
	0x98, 0xe7, 0xfa, 0x07, 0x62, 0xba, 0xf8, 0x37, 0xee, 0xef, 0x91, 0xb3, 0x47, 0xb9, 0xb8, 0xf8,
	0x5a, 0x55, 0x10, 0x82, 0x92, 0x3a, 0x0f, 0xbc, 0x81, 0xf6, 0x87, 0xaf, 0x58, 0x19, 0x01, 0xdb,
	0xa1, 0x67, 0xff, 0x2c, 0xd4, 0xb6, 0xd8, 0xdf, 0x09, 0x2b, 0x2d, 0x58, 0xc4, 0xce, 0xa8, 0x6d,
	0x5d, 0x29, 0x32, 0x5d, 0xe0, 0x2d, 0x66, 0x25, 0xe2, 0xfd, 0xc9, 0xe8, 0x49, 0x5f, 0xf4, 0x16,
	0xb0, 0x77, 0x19, 0x61, 0x48, 0x21, 0xb2, 0xff, 0x6e, 0x01, 0x80, 0x9b, 0x1c, 0xa4, 0x54, 0x87,
	0x42, 0x62, 0x01, 0x0a, 0xb8, 0xb4, 0x73, 0xaa, 0x7d, 0x1b, 0x96, 0x06, 0x81, 0x1f, 0x53, 0x3f,
	0x96, 0x4e, 0x49, 0x34, 0xd9, 0x54, 0x76, 0xc3, 0x60, 0xc4, 0x5d, 0x3b, 0x9f, 0x68, 0x99, 0x01,
	0xd0, 0xb1, 0x5f, 0x86, 0x65, 0x6e, 0x05, 0x79, 0x37, 0x9f, 0x29, 0x70, 0x10, 0x22, 0xbc, 0x08,
	0x8b, 0x63, 0x87, 0x6d, 0x56, 0xd4, 0x4f, 0xdd, 0x0a, 0xa7, 0x7c, 0xf7, 0x04, 0x12, 0x43, 0x0f,
	0x42, 0x77, 0xcf, 0xf5, 0xd1, 0x75, 0x4d, 0x47, 0xe7, 0x48, 0xcc, 0x62, 0x0f, 0x82, 0x11, 0xaa,
	0x2d, 0x77, 0x06, 0x65, 0x54, 0x8d, 0xaa, 0x00, 0x26, 0x2e, 0x87, 0x39, 0x10, 0x81, 0x51, 0x41,
	0x8c, 0x0a, 0x83, 0xf0, 0xee, 0x6b, 0x50, 0xdb, 0x0d, 0xc2, 0x23, 0x27, 0x94, 0x4e, 0x07, 0x38,
	0x0d, 0x01, 0xe4, 0x48, 0xe7, 0xa0, 0xcc, 0xcc, 0x39, 0xf3, 0x43, 0xe8, 0xd9, 0xca, 0xbd, 0x25,
	0x37, 0xba, 0xcf, 0x9a, 0xe4, 0x2e, 0x54, 0x98, 0x46, 0xf4, 0x47, 0x34, 0x76, 0xd0, 0xa1, 0x2d,
	0xdf, 0xd9, 0x50, 0xb8, 0x56, 0x75, 0xae, 0x57, 0xf6, 0x44, 0x8b, 0x31, 0x25, 0x82, 0xb0, 0xbe,
	0xc3, 0xfd, 0x5c, 0xa9, 0x57, 0x11, 0x90, 0x7b, 0x31, 0x79, 0x59, 0xaa, 0x17, 0x52, 0xad, 0x23,
	0xd5, 0xb6, 0x42, 0x55, 0xd3, 0x1f, 0xa1, 0x78, 0x48, 0x97, 0x29, 0x5e, 0xd4, 0x1f, 0x4f, 0x9e,
	0x78, 0xee, 0x00, 0x1d, 0x5f, 0xb9, 0x57, 0x76, 0xa3, 0x87, 0xd8, 0x66, 0x9d, 0xfb, 0xee, 0x90,
	0xf6, 0x63, 0x77, 0x44, 0xd1, 0xb9, 0x95, 0x7a, 0x65, 0x06, 0x78, 0xec, 0x8e, 0x28, 0x79, 0x19,
	0xda, 0x7c, 0x11, 0x84, 0x5f, 0xeb, 0xbb, 0x51, 0x7f, 0x48, 0x3d, 0xca, 0xe2, 0x44, 0xee, 0xe2,
	0xd6, 0x79, 0xbf, 0x58, 0x87, 0xe8, 0x75, 0xde, 0x99, 0xfb, 0xe1, 0x13, 0xcf, 0xc1, 0x50, 0x81,
	0xe4, 0x7d, 0xf8, 0x1a, 0xef, 0xb4, 0xdf, 0x86, 0x95, 0x37, 0xa9, 0x80, 0xce, 0x1d, 0x6b, 0x76,
	0xa0, 0xcc, 0x87, 0x11, 0xee, 0xa0, 0xd2, 0x4b, 0xda, 0xf6, 0xa7, 0x60, 0x55, 0x21, 0x38, 0xc3,
	0x6a, 0xbc, 0x08, 0x8b, 0xc2, 0x79, 0x17, 0x66, 0xaa, 0x19, 0x47, 0xb2, 0x1f, 0x42, 0xe5, 0xa1,
	0xb3, 0x47, 0xdf, 0x99, 0xb8, 0x83, 0x03, 0x8c, 0x18, 0xdd, 0x91, 0x1b, 0x0b, 0x82, 0xbc, 0x41,
	0x36, 0x60, 0xc9, 0xa7, 0xef, 0xa2, 0x55, 0x14, 0x76, 0x9e, 0x35, 0xb7, 0xd0, 0x8d, 0xc7, 0x41,
	0xec, 0x78, 0xb8, 0xad, 0x4a, 0x3d, 0xde, 0xb0, 0xdf, 0xb3, 0xa0, 0xc4, 0x48, 0x32, 0xed, 0x43,
	0x48, 0x3f, 0xa4, 0x83, 0x20, 0x1c, 0x46, 0x82, 0x6a, 0x15, 0x81, 0x3d, 0x0e, 0x63, 0xeb, 0x36,
	0x66, 0xca, 0x10, 0xb9, 0x9f, 0xa7, 0xc2, 0x07, 0x96, 0x19, 0xe0, 0x91, 0xfb, 0x79, 0xca, 0x54,
	0x13, 0x3b, 0xfd, 0xc9, 0x48, 0x8c, 0xb1, 0xc4, 0xda, 0x0f, 0x26, 0x23, 0xa6, 0x64, 0x9c, 0x38,
	0x03, 0xe0, 0xde, 0x2d, 0xf5, 0x2a, 0x08, 0x61, 0x63, 0xdb, 0x3f, 0xb0, 0x60, 0xf5, 0xbe, 0x1b,
	0x9d, 0x74, 0x05, 0x18, 0x55, 0x1e, 0xcc, 0xa7, 0x2e, 0x59, 0x84, 0xf7, 0xac, 0x1b, 0x99, 0xc5,
	0xcf, 0xd3, 0x58, 0x9f, 0x03, 0xb6, 0xf0, 0xdb, 0xc4, 0x98, 0x44, 0xed, 0x12, 0xda, 0xb3, 0x8a,
	0xb4, 0x26, 0x11, 0xb9, 0x83, 0x13, 0x75, 0x7d, 0x27, 0x0e, 0x42, 0x34, 0x26, 0xcb, 0x77, 0x9a,
	0xca, 0xd2, 0x24, 0x8b, 0xd0, 0x4b, 0xd1, 0xec, 0x6f, 0x59, 0x40, 0xd4, 0x59, 0xcc, 0x58, 0xf6,
	0x97, 0xa4, 0xee, 0x08, 0x5b, 0x3a, 0x75, 0xe1, 0x13, 0x34, 0x9d, 0xa3, 0xe2, 0x7c, 0x1c, 0x39,
	0xd0, 0x62, 0xf0, 0xcd, 0x7d, 0xc7, 0xf7, 0xa9, 0x37, 0x5f, 0x94, 0xf6, 0xa2, 0x3a, 0x0e, 0x57,
	0xca, 0x86, 0x31, 0x8e, 0x3a, 0xc4, 0x4f, 0x0a, 0xd0, 0x50, 0xe8, 0xe7, 0xda, 0x7e, 0x66, 0x62,
	0x38, 0x4a, 0xaa, 0x95, 0x15, 0x01, 0xd9, 0xc2, 0xd0, 0xea, 0xd0, 0xf1, 0xdc, 0x21, 0xee, 0x5a,
	0x1e, 0x85, 0x2c, 0xf4, 0x00, 0x41, 0x4c, 0x12, 0x14, 0x4f, 0x0b, 0x23, 0xb4, 0x88, 0x5c, 0x73,
	0x44, 0x8b, 0xac, 0xc1, 0x42, 0xfc, 0x2e, 0x23, 0xc9, 0xad, 0x7d, 0x29, 0x7e, 0x77, 0x2b, 0x75,
	0x34, 0x8b, 0xc7, 0x39, 0x9a, 0x6b, 0x50, 0x53, 0xe3, 0x67, 0x8a, 0x86, 0x7e, 0xa1, 0x57, 0x55,
	0xc2, 0x67, 0xca, 0x1c, 0x9f, 0x44, 0x42, 0x5b, 0xc5, 0xcd, 0xfa, 0xb2, 0x80, 0xa1, 0xb9, 0xd2,
	0x0d, 0x68, 0xc5, 0x34, 0xa0, 0x4c, 0x8b, 0xc5, 0xe4, 0x99, 0x96, 0x82, 0xd0, 0x62, 0x21, 0x32,
	0x1e, 0xf4, 0x48, 0x04, 0xb9, 0x24, 0xcb, 0x3c, 0xe8, 0x11, 0x60, 0x11, 0x87, 0xdb, 0x7f, 0x62,
	0xc1, 0x46, 0x66, 0x39, 0x67, 0x28, 0xd9, 0xab, 0x50, 0x4b, 0x46, 0x8e, 0x68, 0x28, 0x35, 0xad,
	0xa3, 0x88, 0xc4, 0x58, 0xb9, 0x5e, 0x75, 0x90, 0x02, 0x22, 0x5d, 0x15, 0x8a, 0xc7, 0xaa, 0xc2,
	0xf7, 0x2c, 0x68, 0x3e, 0xa0, 0x47, 0x67, 0xbf, 0x91, 0x57, 0xa0, 0xe8, 0x0e, 0xa3, 0x76, 0x11,
	0x37, 0x29, 0xfb, 0x93, 0x99, 0x1a, 0xcf, 0x8d, 0x62, 0x34, 0x35, 0x5c, 0x27, 0x96, 0x58, 0x5b,
	0x98, 0x1a, 0x65, 0x63, 0x2f, 0x18, 0x1b, 0xdb, 0xfe, 0x05, 0x58, 0x37, 0x78, 0x3c, 0xd3, 0x6d,
	0xca, 0xec, 0xe9, 0xca, 0x03, 0x7a, 0xc4, 0x0c, 0x26, 0xf3, 0xfc, 0xc3, 0x07, 0xf4, 0xdd, 0x78,
	0x8a, 0xa5, 0xbe, 0x0d, 0x6b, 0x9e, 0x13, 0xc5, 0x68, 0x70, 0x11, 0x97, 0xab, 0x18, 0x9b, 0x7e,
	0xb1, 0xb7, 0xca, 0xba, 0x12, 0x2a, 0xa8, 0x68, 0x37, 0x61, 0x05, 0xf1, 0x19, 0x2c, 0xf0, 0x39,
	0x72, 0x11, 0x91, 0xeb, 0x0c, 0xbe, 0x89, 0x60, 0x86, 0x69, 0xff, 0x9e, 0x05, 0xe7, 0x54, 0x26,
	0x4e, 0xb8, 0x1c, 0x1f, 0x1c, 0x63, 0x7f, 0x6e, 0x41, 0x27, 0x8f, 0xb1, 0xb3, 0x35, 0x95, 0x5d,
	0x28, 0x31, 0x9f, 0x27, 0x54, 0xf6, 0xbc, 0x82, 0x6e, 0xae, 0x4c, 0x0f, 0x11, 0x99, 0x82, 0xa5,
	0x9a, 0xc4, 0xfe, 0xb4, 0xff, 0xa8, 0x00, 0x6b, 0x3c, 0x15, 0x75, 0x42, 0xd9, 0x19, 0x71, 0x68,
	0x21, 0x13, 0x87, 0xce, 0xf4, 0x4a, 0x4a, 0xf0, 0x5b, 0xd2, 0x83, 0x5f, 0x02, 0x25, 0x8c, 0xc0,
	0x84, 0xa9, 0x1b, 0x89, 0x10, 0x2b, 0x0d, 0x88, 0x17, 0x8d, 0x80, 0x38, 0x0d, 0xe5, 0x97, 0xb4,
	0x50, 0x9e, 0xe7, 0x03, 0xc6, 0xa1, 0x7b, 0xc8, 0x6c, 0x5e, 0x59, 0xe6, 0x03, 0x1e, 0x72, 0x00,
	0xb3, 0x8a, 0xd1, 0x7e, 0x70, 0xd4, 0x1f, 0x4e, 0x42, 0xcc, 0x13, 0x0a, 0x83, 0x56, 0x65, 0xc0,
	0xd7, 0x05, 0xcc, 0xfe, 0x7d, 0x0b, 0xd6, 0xf8, 0xb1, 0xe8, 0x84, 0xd2, 0x39, 0x0f, 0x15, 0x19,
	0x9a, 0x19, 0x41, 0xd3, 0xd6, 0xd0, 0xe0, 0xac, 0x78, 0x2c, 0x67, 0xa5, 0x1c, 0xce, 0x3e, 0x03,
	0x4d, 0x7d, 0xd9, 0xce, 0x2e, 0xf6, 0xfa, 0x0c, 0x34, 0xf5, 0x39, 0x9f, 0x1d, 0xe9, 0x1e, 0xac,
	0xf1, 0x18, 0xf6, 0x0c, 0x43, 0xd0, 0x67, 0xa0, 0xfe, 0xc8, 0x1d, 0x8d, 0x3d, 0x7a, 0x4c, 0xc6,
	0x72, 0x95, 0x1d, 0x1e, 0xce, 0x6e, 0xdc, 0x39, 0x8e, 0xe6, 0x31, 0xac, 0x6d, 0xfb, 0x3f, 0xf5,
	0x51, 0x7f, 0x0e, 0xd6, 0xd8, 0x98, 0x0f, 0x04, 0x64, 0xee, 0x51, 0x4d, 0xca, 0x85, 0x0c, 0xe5,
	0x1d, 0x58, 0xe7, 0xf3, 0xf9, 0x00, 0x68, 0xbf, 0x0d, 0x35, 0x9e, 0xef, 0x39, 0x23, 0x5f, 0x6a,
	0xbf, 0x03, 0x8d, 0x6d, 0xff, 0x6c, 0x49, 0xfe, 0x12, 0x54, 0x7b, 0xd4, 0xc3, 0xfd, 0x87, 0xe1,
	0x9f, 0x8c, 0xc0, 0xac, 0x39, 0x22, 0xb0, 0x50, 0x7c, 0xa8, 0x5a, 0xcb, 0xaa, 0x04, 0xa2, 0x1d,
	0xd3, 0xc3, 0xab, 0xa2, 0x11, 0x5e, 0xd9, 0x7f, 0x66, 0xc1, 0x06, 0xf3, 0xe6, 0x92, 0x83, 0x68,
	0xdf, 0x1d, 0xcf, 0x3d, 0x31, 0x91, 0x0b, 0x2a, 0xa4, 0xb9, 0xa0, 0x0c, 0x4b, 0xc5, 0x1c, 0x96,
	0xb4, 0x50, 0xbc, 0x34, 0x5f, 0x28, 0xfe, 0x07, 0x16, 0xb4, 0xb3, 0x7c, 0xce, 0x30, 0x21, 0x1f,
	0x85, 0x8a, 0x1c, 0x54, 0x3a, 0x3e, 0xf5, 0x34, 0xaf, 0x4a, 0xbc, 0x97, 0x62, 0x9e, 0xea, 0x98,
	0xf0, 0xaf, 0x45, 0x58, 0xda, 0xe4, 0x89, 0x8a, 0x4c, 0xec, 0x9e, 0x15, 0x91, 0x66, 0xc3, 0x8b,
	0x86, 0x0d, 0xd7, 0xbc, 0x5b, 0xc9, 0xf0, 0x6e, 0xe7, 0xa0, 0xbc, 0x17, 0x06, 0x93, 0x71, 0x1a,
	0xb2, 0x2f, 0x61, 0x9b, 0x9f, 0x01, 0x82, 0xf1, 0x38, 0xf0, 0xc5, 0x97, 0x8b, 0x7c, 0xa9, 0x24,
	0x48, 0xf7, 0x8c, 0x4b, 0xba, 0x67, 0xbc, 0x0d, 0x65, 0x91, 0x65, 0x89, 0xda, 0x65, 0x94, 0x13,
	0x51, 0x23, 0x5c, 0xde, 0xd5, 0x4b, 0x70, 0x12, 0xf5, 0xac, 0x1c, 0xa7, 0x9e, 0x5d, 0x28, 0x4b,
	0x06, 0x30, 0x6c, 0x9f, 0x82, 0x9c, 0x20, 0x65, 0x93, 0x40, 0xcb, 0xc7, 0x26, 0x81, 0xaa, 0x66,
	0x12, 0xe8, 0x98, 0x74, 0x8c, 0x9a, 0xfe, 0xa9, 0xeb, 0xe9, 0x1f, 0xd3, 0x98, 0x34, 0x32, 0xc6,
	0xe4, 0x11, 0x66, 0x25, 0xa4, 0x44, 0x4e, 0xb0, 0xfb, 0xe5, 0xac, 0x94, 0xd3, 0x1b, 0x87, 0x6c,
	0x0d, 0xed, 0x4f, 0x01, 0x51, 0x89, 0xce, 0xd0, 0xe8, 0x17, 0xd8, 0x12, 0x22, 0x9a, 0xf0, 0x8a,
	0x79, 0xeb, 0x24, 0x51, 0xec, 0x1f, 0x88, 0xd3, 0xf4, 0x49, 0xd9, 0x9d, 0x19, 0x62, 0x9c, 0x83,
	0x72, 0x1c, 0x8c, 0xdd, 0x41, 0xaa, 0xba, 0x4b, 0xd8, 0xde, 0x1a, 0x9e, 0x66, 0x53, 0x67, 0x44,
	0xbe, 0x90, 0x11, 0xf9, 0x6f, 0x5a, 0xcc, 0xed, 0x44, 0x73, 0xc9, 0x47, 0x55, 0xe4, 0xc2, 0x1c,
	0x8a, 0x7c, 0x9a, 0xad, 0xfe, 0xeb, 0x82, 0x1f, 0xa6, 0x32, 0x6a, 0x3e, 0x60, 0x1e, 0xb1, 0xa2,
	0xc5, 0x0f, 0x15, 0xb1, 0x72, 0x80, 0x29, 0xbb, 0x39, 0x39, 0x79, 0x15, 0x4a, 0x8c, 0x89, 0x53,
	0x27, 0x8a, 0xed, 0xaf, 0x5a, 0xd0, 0xd4, 0xa7, 0x32, 0x43, 0xb6, 0xd7, 0xd9, 0x09, 0xec, 0x20,
	0x39, 0x42, 0x34, 0xb4, 0xbc, 0xe8, 0x01, 0xed, 0xf1, 0xde, 0x53, 0x4d, 0xe4, 0xfb, 0x96, 0x8c,
	0x39, 0xcf, 0x54, 0x55, 0x4f, 0x79, 0x4e, 0x38, 0x5e, 0x25, 0xdf, 0x84, 0x26, 0x0f, 0x36, 0x4f,
	0xca, 0x2e, 0x5f, 0xa9, 0x82, 0x5c, 0x29, 0xfb, 0x33, 0xb0, 0x6e, 0xcc, 0xfb, 0xcc, 0x36, 0xff,
	0x5f, 0x14, 0xa0, 0xfe, 0x80, 0x1e, 0x09, 0x38, 0xe6, 0x93, 0xb3, 0xf7, 0x36, 0xaa, 0x3b, 0x29,
	0xe8, 0xee, 0x44, 0xb7, 0x59, 0x45, 0xc3, 0x66, 0xcd, 0x10, 0xdf, 0x75, 0xa8, 0x0b, 0xa9, 0x4b,
	0x04, 0x2e, 0xc0, 0x1a, 0x87, 0x6e, 0x0a, 0xb4, 0x9b, 0xb0, 0x22, 0xd0, 0x98, 0x2a, 0xf6, 0xf1,
	0xea, 0x88, 0x1f, 0xc0, 0xc4, 0xe7, 0xf2, 0xd6, 0x89, 0xdc, 0x85, 0x96, 0x58, 0x63, 0x41, 0xb0,
	0x1f, 0x4d, 0x46, 0x23, 0x27, 0x7c, 0x2a, 0xdc, 0x58, 0x93, 0xf7, 0x0a, 0xc2, 0x8f, 0x78, 0x1f,
	0xa3, 0x2f, 0x35, 0x23, 0xb9, 0xbc, 0xe1, 0x37, 0xe5, 0x75, 0xa1, 0x20, 0xf2, 0x0a, 0xe7, 0xbb,
	0x05, 0x58, 0x7d, 0x40, 0x8f, 0x1e, 0xec, 0xc6, 0xff, 0x0b, 0x84, 0xf5, 0x0c, 0xd4, 0x53, 0xe5,
	0x45, 0x3c, 0x2e, 0xa4, 0xaa, 0x54, 0x5f, 0xc4, 0x7a, 0x16, 0x1a, 0x8a, 0x8a, 0x33, 0x41, 0x08,
	0xd9, 0xd4, 0x12, 0x2d, 0x67, 0x40, 0xfb, 0x8f, 0x2d, 0x91, 0xeb, 0xc1, 0xc8, 0x7c, 0xb6, 0x78,
	0x66, 0x3b, 0x39, 0x72, 0x0b, 0x56, 0x64, 0x77, 0x72, 0x55, 0xc8, 0x05, 0xd5, 0x10, 0xf0, 0x6d,
	0x59, 0x54, 0x71, 0x03, 0x1a, 0x69, 0x10, 0xa0, 0x8a, 0xad, 0x9e, 0x84, 0x01, 0x08, 0x65, 0x11,
	0x21, 0x11, 0xec, 0xfd, 0x8f, 0xe3, 0xed, 0xb7, 0x2d, 0xdc, 0x7f, 0x42, 0x74, 0x53, 0xf8, 0x3a,
	0xf6, 0xf4, 0x92, 0xb3, 0x9e, 0xc5, 0xf9, 0xd6, 0xb3, 0x94, 0xb7, 0x9e, 0xdf, 0xb1, 0x50, 0xd5,
	0xd3, 0x93, 0xe3, 0x14, 0xbe, 0x66, 0x9a, 0xd5, 0xeb, 0x50, 0xd7, 0xf7, 0xa3, 0x60, 0xa9, 0xa6,
	0xed, 0xc3, 0xdc, 0x0d, 0x58, 0xca, 0xdd, 0x80, 0xaf, 0xc1, 0xf2, 0x03, 0x5e, 0xf1, 0x31, 0x85,
	0x9d, 0xab, 0x50, 0xdd, 0x75, 0xfc, 0xbe, 0x71, 0xc5, 0xbc, 0xbc, 0xeb, 0xf8, 0x72, 0x5d, 0xec,
	0xbf, 0xe2, 0xe2, 0x7e, 0x83, 0x5f, 0xf4, 0x9d, 0x66, 0x5a, 0x37, 0xa0, 0x91, 0xde, 0x1d, 0xaa,
	0xf3, 0xaa, 0x27, 0xb7, 0x87, 0x7c, 0x62, 0xa8, 0x02, 0xba, 0x21, 0x4a, 0x54, 0x40, 0x33, 0x41,
	0x33, 0x2f, 0x8e, 0xff, 0x76, 0x09, 0x96, 0xde, 0xa2, 0x51, 0xe4, 0xec, 0xd1, 0x39, 0x4e, 0x0c,
	0x57, 0xa1, 0x3a, 0xe2, 0xc8, 0xea, 0x99, 0x6a, 0x59, 0xc0, 0xf0, 0x48, 0xd5, 0x84, 0x05, 0x9e,
	0x84, 0x17, 0xc5, 0x06, 0xd8, 0x20, 0x1f, 0x16, 0x09, 0x2e, 0x0c, 0x08, 0x16, 0x66, 0x84, 0xe0,
	0x0c, 0x8b, 0xb5, 0x8c, 0xf0, 0x79, 0xd1, 0x0c, 0x9f, 0xd3, 0xbc, 0xcc, 0xd2, 0x1c, 0x79, 0x19,
	0xf2, 0x1c, 0xac, 0x66, 0xaf, 0x20, 0x79, 0xca, 0xac, 0x11, 0x19, 0x97, 0x8f, 0x2f, 0x00, 0x49,
	0x76, 0x69, 0x8a, 0xcc, 0x2b, 0x98, 0xe4, 0x06, 0x4d, 0xb1, 0x37, 0x61, 0xc5, 0xa7, 0x47, 0x7d,
	0xf9, 0x05, 0xa6, 0xf6, 0xd6, 0x91, 0xa5, 0x73, 0x7a, 0xba, 0x52, 0x31, 0x0d, 0xbd, 0xba, 0xaf,
	0xbb, 0xc4, 0xb7, 0xa0, 0xc9, 0x88, 0xe0, 0x71, 0x42, 0xf0, 0x89, 0x84, 0x5a, 0x48, 0xe8, 0x82,
	0x4e, 0x48, 0xdf, 0x36, 0xbd, 0x55, 0x3f, 0xb3, 0x93, 0x3e, 0x01, 0xb5, 0xa4, 0xa2, 0x09, 0xe9,
	0x6c, 0x20, 0x9d, 0x96, 0x4e, 0x47, 0x6a, 0x7a, 0x6f, 0xd9, 0x57, 0xd4, 0x5e, 0xcc, 0x47, 0xea,
	0x20, 0x7e, 0xde, 0xce, 0x9b, 0x8f, 0xa2, 0xe3, 0x38, 0x1f, 0x55, 0xe7, 0x1f, 0xc2, 0x7a, 0x32,
	0x1f, 0x4d, 0x32, 0xe7, 0x90, 0xd2, 0xc5, 0xec, 0x84, 0x54, 0xe9, 0x10, 0x3f, 0x6b, 0x4c, 0x5f,
	0x87, 0x06, 0xa3, 0xc8, 0xcc, 0x8b, 0x8c, 0x3e, 0x3a, 0x79, 0xc2, 0xd1, 0xfd, 0x43, 0x8f, 0xc9,
	0x21, 0x05, 0x91, 0x57, 0xa0, 0x9a, 0xf0, 0xe5, 0xef, 0xc6, 0xed, 0xf3, 0x79, 0x13, 0x53, 0x6c,
	0x65, 0x0f, 0xfc, 0xa4, 0x4d, 0x76, 0xe0, 0x9c, 0xfa, 0xb1, 0x3e, 0xb1, 0x0b, 0x48, 0xe9, 0x4a,
	0x2e, 0x25, 0x95, 0xa1, 0x75, 0x3f, 0xd7, 0x8f, 0x7d, 0x18, 0x2a, 0x89, 0xe5, 0x6c, 0x5f, 0xcc,
	0xec, 0x8f, 0x24, 0x1f, 0x55, 0x96, 0x86, 0xd4, 0xfe, 0x12, 0x3f, 0x54, 0x89, 0xbd, 0x3b, 0x77,
	0xe8, 0x97, 0x6c, 0xcf, 0x82, 0xba, 0x3d, 0x4f, 0x13, 0x2d, 0xcb, 0x03, 0x51, 0xc2, 0xc1, 0xec,
	0x03, 0x91, 0xb0, 0x11, 0x79, 0x07, 0x22, 0x49, 0x21, 0xc1, 0x39, 0x15, 0x3f, 0x03, 0x20, 0x3d,
	0xea, 0x0c, 0x4f, 0x2a, 0x90, 0x0e, 0x94, 0x3d, 0x27, 0xa6, 0x51, 0xbc, 0xf5, 0xba, 0xb4, 0xc5,
	0xb2, 0x9d, 0xbd, 0xae, 0xb2, 0x5f, 0x81, 0xf6, 0x9b, 0x54, 0x4e, 0x59, 0x18, 0xd8, 0x79, 0x87,
	0xb2, 0x1d, 0x68, 0x99, 0x5f, 0xce, 0x90, 0xd9, 0x47, 0x60, 0x49, 0xda, 0xf5, 0x42, 0x46, 0x4d,
	0x0d, 0x3a, 0x12, 0xd3, 0xfe, 0x1b, 0x0b, 0xea, 0x7a, 0x1f, 0xf9, 0x38, 0xd4, 0xf9, 0x84, 0xfa,
	0x42, 0xbc, 0x22, 0x9d, 0x97, 0xb7, 0x02, 0x35, 0x8e, 0x29, 0x1d, 0x42, 0x52, 0x68, 0x50, 0xc0,
	0x82, 0x48, 0xde, 0x20, 0x5d, 0x58, 0xf3, 0x83, 0xd8, 0xdd, 0x75, 0x07, 0x3c, 0x53, 0x25, 0x12,
	0x20, 0x45, 0xc4, 0x21, 0x5a, 0x57, 0x52, 0x81, 0x89, 0xd7, 0x96, 0x02, 0xb1, 0xc4, 0x2b, 0x30,
	0x11, 0x84, 0x08, 0xf6, 0xc7, 0xa1, 0x75, 0x1f, 0x07, 0x7e, 0x43, 0x96, 0x76, 0xce, 0x2d, 0xd3,
	0xfb, 0x50, 0x49, 0x3e, 0x9a, 0x3f, 0x5f, 0xd9, 0x82, 0xc5, 0x89, 0x1f, 0x52, 0x87, 0x3b, 0xb7,
	0x72, 0x4f, 0xb4, 0xec, 0x01, 0x6c, 0x64, 0x18, 0x99, 0xb1, 0x44, 0x77, 0x01, 0xd2, 0x62, 0x54,
	0xa1, 0xd8, 0xaa, 0x9e, 0xa6, 0x54, 0x14, 0x3c, 0xfb, 0x11, 0x54, 0xb0, 0x5c, 0xc5, 0x73, 0xa3,
	0x78, 0x7e, 0x96, 0x75, 0x7f, 0x58, 0x30, 0xb3, 0xa7, 0x9f, 0xe5, 0x47, 0xe8, 0x84, 0xf0, 0xf4,
	0x22, 0xb9, 0x3b, 0xd9, 0xb2, 0x80, 0x63, 0xf7, 0xd6, 0xef, 0x5a, 0xb0, 0x6e, 0x90, 0x9f, 0x2d,
	0x96, 0x27, 0x12, 0x31, 0x4f, 0x2c, 0x29, 0x15, 0x05, 0xef, 0x54, 0x7b, 0x7e, 0x0b, 0x5a, 0xfc,
	0xe0, 0x3a, 0xc7, 0xbc, 0x8f, 0xc9, 0x7d, 0x6f, 0x41, 0x8b, 0xbb, 0xf4, 0xf7, 0x4f, 0xea, 0x5d,
	0x68, 0xc8, 0x74, 0xc6, 0xe9, 0xcb, 0x50, 0x4f, 0x25, 0x8f, 0x1d, 0x59, 0xb9, 0x87, 0x09, 0x99,
	0x34, 0x46, 0xb2, 0xe6, 0x89, 0x91, 0x66, 0x27, 0x2c, 0x99, 0xbd, 0x5f, 0x49, 0xa7, 0xf5, 0x3e,
	0xef, 0x79, 0x91, 0xc8, 0xfb, 0x2b, 0x89, 0x79, 0xcc, 0x1c, 0xe0, 0x01, 0x3d, 0xf3, 0x24, 0x68,
	0x73, 0xdb, 0xf7, 0xce, 0x9e, 0xee, 0xcb, 0xd0, 0x7c, 0xb4, 0xef, 0x84, 0xf4, 0xf1, 0x11, 0xa5,
	0xf1, 0x76, 0xe8, 0xcd, 0x6d, 0xe0, 0xfe, 0x3f, 0xac, 0x1b, 0x1f, 0xce, 0x7e, 0x9c, 0xc1, 0x82,
	0x7c, 0xf1, 0x38, 0x63, 0x12, 0x7a, 0x76, 0x13, 0xc8, 0xe3, 0x23, 0x37, 0x8e, 0x69, 0x78, 0x6f,
	0x12, 0xef, 0x8b, 0x51, 0xed, 0x75, 0x58, 0xd3, 0xa0, 0x9c, 0xa4, 0xfd, 0x12, 0xac, 0x8b, 0xb2,
	0x74, 0xd1, 0x7b, 0x6c, 0x91, 0x91, 0xdd, 0x86, 0x96, 0xf9, 0x89, 0x20, 0xb6, 0x91, 0x10, 0x13,
	0xb5, 0x29, 0x72, 0xf0, 0xf4, 0x93, 0xa4, 0x43, 0x7c, 0x72, 0x11, 0xce, 0xf3, 0xed, 0x9c, 0xcb,
	0x85, 0x7d, 0x09, 0x2e, 0xe4, 0x77, 0x9b, 0x9f, 0x0b, 0xba, 0x02, 0x2d, 0xf3, 0xb9, 0xd9, 0x2d,
	0x3e, 0x6f, 0x02, 0x61, 0x36, 0xf7, 0x71, 0xb0, 0xb9, 0xef, 0xb8, 0xbe, 0x22, 0x2a, 0x0d, 0x2a,
	0x90, 0x5b, 0xd0, 0x14, 0xc3, 0x6b, 0x57, 0x70, 0xf6, 0xf3, 0xb0, 0x6e, 0xc0, 0x67, 0xdc, 0xd9,
	0xee, 0x00, 0x11, 0xbc, 0xe0, 0x46, 0x3c, 0xb6, 0xa2, 0x8b, 0x40, 0x49, 0xb9, 0x5d, 0xc3, 0xbf,
	0x95, 0x57, 0x28, 0x45, 0xf5, 0x15, 0x8a, 0xfd, 0xef, 0x16, 0xac, 0x69, 0xc4, 0x4f, 0xa2, 0x36,
	0xec, 0x0c, 0xc4, 0xcb, 0xfc, 0xd4, 0xba, 0x23, 0x71, 0x67, 0xb7, 0x82, 0x3d, 0x4a, 0xc1, 0x91,
	0xfa, 0x80, 0x41, 0x29, 0xef, 0x2a, 0x24, 0x0f, 0x18, 0xee, 0x8d, 0xe4, 0x8d, 0x08, 0x67, 0x4e,
	0x39, 0x89, 0x56, 0x38, 0x64, 0x3b, 0xf4, 0xf0, 0x46, 0x24, 0x88, 0xfa, 0x58, 0x17, 0xcd, 0xb3,
	0x4a, 0x4b, 0x6e, 0x10, 0xdd, 0x77, 0xfd, 0x03, 0xf2, 0x2c, 0x34, 0x58, 0x97, 0xf8, 0x1a, 0x31,
	0x78, 0x3e, 0xa9, 0xe6, 0x06, 0xd1, 0x5b, 0x08, 0x65, 0x78, 0x4c, 0x81, 0xdf, 0xa4, 0xf1, 0x49,
	0xaa, 0xe4, 0x6c, 0x17, 0x5a, 0xe6, 0x27, 0x33, 0x24, 0xf5, 0x0a, 0xaf, 0x01, 0x93, 0x02, 0xe1,
	0xee, 0x73, 0x56, 0x1d, 0x16, 0x70, 0x74, 0xd6, 0xb6, 0xdf, 0x86, 0xea, 0xdb, 0x63, 0xea, 0x47,
	0xd4, 0xc1, 0x10, 0x5e, 0x39, 0x6f, 0x97, 0xf0, 0xbc, 0xad, 0x1d, 0xd4, 0x0b, 0xfa, 0x41, 0x9d,
	0x71, 0xa3, 0xe4, 0x5d, 0xf0, 0x6f, 0xfb, 0x3f, 0x2c, 0x64, 0x5e, 0x25, 0x2a, 0x27, 0x7c, 0x17,
	0x5a, 0x3c, 0x0d, 0x33, 0x08, 0xfc, 0x38, 0x74, 0x06, 0x71, 0x5f, 0x16, 0xfb, 0xf3, 0xf9, 0x37,
	0xb1, 0x77, 0x53, 0x74, 0xde, 0x13, 0x95, 0xff, 0x78, 0xab, 0x72, 0x40, 0x7d, 0x25, 0xb7, 0x88,
	0x6d, 0x9e, 0x97, 0x70, 0x06, 0x18, 0xc0, 0x25, 0x94, 0x44, 0x5e, 0x42, 0x80, 0x25, 0x8d, 0xeb,
	0x50, 0x77, 0xfd, 0x81, 0x37, 0x19, 0xd2, 0x7e, 0x10, 0x0e, 0x69, 0x18, 0xc9, 0x1c, 0x90, 0x80,
	0xbe, 0x8d, 0x40, 0xb6, 0x22, 0x3e, 0x8d, 0x8f, 0x82, 0xf0, 0x40, 0xde, 0x20, 0x8a, 0xa6, 0x69,
	0x12, 0x17, 0x33, 0x26, 0xb1, 0x07, 0x1b, 0x99, 0x59, 0xcf, 0x58, 0xb3, 0x6b, 0x50, 0x0b, 0x38,
	0xae, 0x38, 0x5f, 0x89, 0xcb, 0xe9, 0x40, 0x21, 0x60, 0xff, 0x97, 0x05, 0x97, 0x0c, 0xa2, 0x52,
	0x38, 0xff, 0x17, 0x44, 0xba, 0x03, 0x97, 0xa7, 0xce, 0xfe, 0xfd, 0x8a, 0xf6, 0xbb, 0xe2, 0x62,
	0x3f, 0x4f, 0x4d, 0x9b, 0xb0, 0x10, 0x1c, 0xf9, 0x22, 0xfe, 0xad, 0xf4, 0x78, 0x23, 0xad, 0xb2,
	0x2b, 0xa8, 0x55, 0x76, 0x2d, 0x58, 0x1c, 0x4c, 0xc2, 0x48, 0x44, 0x08, 0x95, 0x9e, 0x68, 0xa9,
	0xd3, 0x2e, 0xcd, 0x9c, 0xf6, 0x42, 0x66, 0xda, 0x87, 0xfc, 0x2a, 0x7f, 0x6e, 0x55, 0x6a, 0xc1,
	0x22, 0xce, 0x33, 0x92, 0x15, 0xd9, 0xbc, 0x85, 0x9b, 0x53, 0xd6, 0xa9, 0x55, 0x44, 0x29, 0x5a,
	0x07, 0xca, 0xe3, 0x90, 0x1e, 0xba, 0xc1, 0x24, 0x4a, 0xee, 0xcf, 0x45, 0xdb, 0xfe, 0xbe, 0x05,
	0x35, 0xcc, 0x00, 0x78, 0x1e, 0x1d, 0xb0, 0x93, 0x52, 0x26, 0xf7, 0x26, 0xb7, 0x7b, 0x21, 0xdd,
	0xee, 0x0c, 0x16, 0x79, 0x93, 0x3d, 0x39, 0x0a, 0xfb, 0x9b, 0x3c, 0xcb, 0xcf, 0xf3, 0x91, 0xb8,
	0xe8, 0x5c, 0x31, 0x22, 0xad, 0x88, 0x9f, 0xf0, 0x23, 0xf2, 0xff, 0xa0, 0x36, 0x76, 0x9e, 0x62,
	0x78, 0x82, 0xea, 0x87, 0xf5, 0x94, 0x7a, 0x21, 0xc2, 0x43, 0xde, 0xff, 0x98, 0x75, 0xf7, 0xaa,
	0x63, 0xa5, 0x65, 0xdf, 0x82, 0x9a, 0xa6, 0x14, 0xea, 0xe3, 0x21, 0x4b, 0x7b, 0x3c, 0x64, 0xff,
	0xa4, 0x08, 0x65, 0x99, 0xae, 0xc8, 0xcc, 0x6a, 0xa6, 0x85, 0x7b, 0x0e, 0x56, 0xc5, 0xfb, 0x17,
	0x26, 0x26, 0x7a, 0x84, 0x48, 0x22, 0xff, 0xcd, 0x9f, 0xc1, 0x70, 0x38, 0xc3, 0xbd, 0x0d, 0x6b,
	0x1c, 0x17, 0x1f, 0xae, 0xf8, 0x8e, 0xeb, 0x29, 0x89, 0x5d, 0x4e, 0xe6, 0xb1, 0xec, 0x61, 0xf8,
	0x17, 0x01, 0xc6, 0x34, 0x1c, 0x39, 0xdc, 0x77, 0x08, 0xd7, 0x83, 0x10, 0xf4, 0x2f, 0xe2, 0x8d,
	0xa0, 0x3c, 0xa1, 0x8a, 0xfd, 0x81, 0x20, 0x7e, 0x84, 0xbd, 0x0e, 0x32, 0xb1, 0x2e, 0x71, 0x96,
	0x10, 0x47, 0x96, 0x09, 0x44, 0xc9, 0x9b, 0x8e, 0x64, 0xb3, 0x97, 0xf5, 0xcd, 0x2e, 0x17, 0xb4,
	0xa2, 0x2c, 0xe8, 0xc7, 0x58, 0xcc, 0x28, 0x55, 0x40, 0x54, 0x26, 0xb4, 0xf5, 0xb4, 0x4f, 0xaa,
	0x22, 0x3d, 0x05, 0x97, 0xbc, 0x0a, 0x75, 0xdd, 0x16, 0x61, 0x85, 0x82, 0xfe, 0xb5, 0xbe, 0x8d,
	0x6b, 0x9a, 0x75, 0xd2, 0xca, 0x0f, 0xaa, 0x7a, 0xf9, 0x81, 0x3c, 0x92, 0xd6, 0x8e, 0xbb, 0xb7,
	0xfd, 0x4b, 0x0b, 0xd6, 0x58, 0x68, 0x7e, 0xe2, 0x6a, 0xa9, 0x6c, 0x62, 0xf9, 0x14, 0x07, 0x00,
	0xb2, 0x01, 0x4b, 0x51, 0x10, 0xc6, 0xfd, 0x27, 0x32, 0xf1, 0xbd, 0xc8, 0x9a, 0xaf, 0x3d, 0xc5,
	0x1c, 0xd7, 0x80, 0xfa, 0xf2, 0xed, 0x10, 0x6f, 0xd8, 0xdf, 0xb4, 0xa0, 0xa9, 0x73, 0x3b, 0x63,
	0xa3, 0x3f, 0xaf, 0x6c, 0xf4, 0xe2, 0xb4, 0x64, 0x9c, 0xdc, 0xfd, 0xa7, 0x39, 0xbd, 0x7c, 0x1a,
	0x8b, 0x2d, 0x3e, 0x80, 0x3a, 0xb3, 0xc7, 0xb0, 0xa6, 0x11, 0x9e, 0x31, 0xc9, 0x5b, 0xb0, 0x90,
	0x5a, 0xed, 0x29, 0x73, 0xe4, 0x18, 0xf6, 0x2d, 0xfe, 0x1e, 0x7a, 0x33, 0xf0, 0x77, 0xdd, 0x3d,
	0xb6, 0x8d, 0x19, 0x17, 0x3c, 0x91, 0x68, 0xf1, 0x17, 0x41, 0xfe, 0x2e, 0xd6, 0x61, 0x53, 0xfb,
	0xd3, 0xea, 0x3b, 0x41, 0xfe, 0xc1, 0x49, 0xee, 0xd1, 0x53, 0xc2, 0x05, 0x83, 0xf0, 0xcf, 0xab,
	0x8f, 0x24, 0x25, 0xe1, 0xd9, 0xa5, 0x9b, 0x03, 0xc4, 0xca, 0x29, 0xdd, 0x54, 0x48, 0x08, 0x24,
	0x7b, 0x0b, 0x9a, 0x6f, 0xd2, 0xf8, 0x14, 0x4c, 0x67, 0xb4, 0xd9, 0xde, 0xc1, 0x30, 0xf4, 0x83,
	0x61, 0xf3, 0x3d, 0x0b, 0x80, 0xad, 0x0e, 0x8f, 0x10, 0xa6, 0x1b, 0x62, 0x72, 0x07, 0x00, 0x63,
	0xdc, 0xfe, 0x71, 0x45, 0x18, 0x95, 0x91, 0x7c, 0xa6, 0xcb, 0xe2, 0xec, 0x31, 0x7f, 0x7d, 0xda,
	0x77, 0x47, 0x7b, 0x8a, 0x01, 0xae, 0x09, 0xf0, 0xd6, 0x68, 0x6f, 0x3b, 0xf4, 0xec, 0xbf, 0xb7,
	0xa0, 0xaa, 0xba, 0x8b, 0x4c, 0x28, 0xdb, 0x82, 0xc5, 0xe8, 0xe9, 0xe8, 0x49, 0x20, 0xad, 0xbc,
	0x68, 0xa9, 0xec, 0x16, 0x75, 0x76, 0xa5, 0x7d, 0x2c, 0x29, 0xf6, 0xf1, 0x3c, 0x54, 0x68, 0xbc,
	0xdf, 0x1f, 0x87, 0xee, 0x40, 0x6e, 0xe6, 0x32, 0x8d, 0xf7, 0x1f, 0xb2, 0x36, 0xeb, 0x9c, 0x44,
	0x43, 0xd1, 0xb9, 0x28, 0x5f, 0x7b, 0x0e, 0x79, 0x67, 0x07, 0xca, 0x43, 0x3a, 0x70, 0x47, 0x8e,
	0xc7, 0x2f, 0x88, 0x8a, 0xbd, 0xa4, 0x6d, 0xdf, 0x84, 0x05, 0x74, 0x8d, 0x6c, 0x65, 0x77, 0xbd,
	0x20, 0x08, 0x05, 0x0d, 0x0b, 0xcf, 0x2c, 0x80, 0x20, 0xa4, 0x62, 0x7f, 0xa3, 0x80, 0xbe, 0xec,
	0x93, 0x87, 0x79, 0xf5, 0x74, 0x17, 0x01, 0xe8, 0x21, 0xfa, 0xd3, 0xf4, 0x48, 0x56, 0x41, 0x08,
	0xde, 0x83, 0x7d, 0x0c, 0xaa, 0x78, 0xe3, 0x25, 0x42, 0x39, 0x61, 0x17, 0xd6, 0x8d, 0x3d, 0xc6,
	0x3b, 0x7b, 0xcb, 0x0c, 0x55, 0x2e, 0xe9, 0x5d, 0x80, 0x38, 0x48, 0xbe, 0x2b, 0xcd, 0xfa, 0xae,
	0x12, 0x07, 0xf2, 0xab, 0xab, 0x50, 0x95, 0xd9, 0x1b, 0xb6, 0x47, 0x84, 0xb8, 0x96, 0x05, 0xec,
	0x75, 0x27, 0xa6, 0xd9, 0x18, 0x60, 0x31, 0xf3, 0xb4, 0x70, 0x46, 0x0c, 0xf0, 0x1b, 0xa9, 0xb5,
	0x47, 0x81, 0x9c, 0x9d, 0xcd, 0x3a, 0x95, 0x01, 0xfd, 0x7a, 0x6a, 0xce, 0x05, 0x3b, 0xb3, 0x2d,
	0x1d, 0xae, 0x4c, 0xbe, 0x35, 0xe7, 0xdf, 0x73, 0x8c, 0x53, 0xf1, 0x72, 0x4e, 0x9a, 0x3c, 0x11,
	0x48, 0x3e, 0xd8, 0x95, 0xd2, 0xb1, 0x6f, 0x4b, 0xa3, 0xa5, 0x76, 0xcd, 0x48, 0x09, 0xf0, 0x0b,
	0x06, 0x25, 0x39, 0x73, 0x92, 0x5c, 0xd1, 0x3d, 0x38, 0x97, 0xf3, 0xf1, 0x89, 0xf2, 0x45, 0x7f,
	0x5d, 0x80, 0x06, 0xe6, 0x3b, 0x52, 0x22, 0xcc, 0x2a, 0xc4, 0xbc, 0xc9, 0xeb, 0x3e, 0x92, 0x6d,
	0x50, 0x13, 0x60, 0x34, 0x25, 0xf9, 0x31, 0xab, 0xfa, 0x24, 0xbb, 0x68, 0xfc, 0x6a, 0x05, 0x5e,
	0x75, 0xe3, 0x13, 0x78, 0xed, 0x6e, 0xa0, 0xd4, 0xab, 0x27, 0xe0, 0xe4, 0x02, 0x21, 0x3e, 0xa2,
	0x54, 0x16, 0x63, 0x8a, 0x38, 0x1e, 0x41, 0x1c, 0xe1, 0x05, 0x20, 0x92, 0xc3, 0xcc, 0xa5, 0xf1,
	0x8a, 0xe8, 0xd9, 0x4c, 0xee, 0x8e, 0xd3, 0x57, 0x68, 0x4b, 0xb8, 0xe5, 0xe5, 0x2b, 0x34, 0x3d,
	0x01, 0x5a, 0x36, 0xaf, 0x9c, 0x95, 0x1c, 0x42, 0x45, 0xcf, 0x21, 0x7c, 0x0e, 0x96, 0x44, 0x32,
	0x89, 0x4b, 0xd9, 0xf5, 0x85, 0x31, 0xc1, 0xbf, 0x8f, 0x49, 0xdd, 0xe3, 0xe3, 0x0f, 0xd7, 0x77,
	0xa3, 0xfd, 0xb4, 0x2c, 0xba, 0xcc, 0x01, 0x9c, 0x57, 0x91, 0xc3, 0x95, 0x31, 0x0e, 0x7f, 0x68,
	0xf0, 0x31, 0x74, 0x31, 0x62, 0x54, 0x35, 0x7b, 0x74, 0xac, 0x92, 0x7c, 0x9b, 0x27, 0x0d, 0xb4,
	0x4f, 0x67, 0x26, 0xf3, 0x97, 0x84, 0x00, 0x73, 0xb2, 0x1d, 0x86, 0xa6, 0xf4, 0x24, 0x2a, 0x79,
	0x01, 0x96, 0x44, 0xee, 0x47, 0xec, 0x21, 0xf5, 0xb6, 0x49, 0x26, 0xde, 0x24, 0x8a, 0xfd, 0x15,
	0x0b, 0x5a, 0x82, 0xcc, 0xa6, 0xe3, 0x79, 0x4f, 0x9c, 0xc1, 0xc1, 0x49, 0x9e, 0xe9, 0x04, 0xce,
	0x24, 0xde, 0x17, 0x26, 0x4d, 0x18, 0x17, 0x04, 0x71, 0xd7, 0x74, 0x1d, 0xea, 0x1c, 0xe1, 0x90,
	0x86, 0xee, 0xae, 0x4b, 0xe5, 0xf1, 0xb1, 0x86, 0xd0, 0x4f, 0x09, 0xa0, 0xfd, 0x2a, 0x6c, 0x64,
	0x58, 0x38, 0xd1, 0xce, 0x79, 0x00, 0xeb, 0x3d, 0x3a, 0xa0, 0xee, 0x21, 0xd5, 0xf3, 0x8e, 0x73,
	0xdd, 0xc9, 0xa2, 0x2e, 0xcb, 0x3b, 0x59, 0x6c, 0xd8, 0x2f, 0x40, 0xcb, 0xa4, 0x37, 0x9d, 0x9f,
	0x3b, 0xff, 0xf6, 0x33, 0xb0, 0xf8, 0x08, 0x25, 0x4c, 0x76, 0x60, 0x91, 0xff, 0x8e, 0x0f, 0x51,
	0x4f, 0x03, 0xda, 0x6f, 0x03, 0x75, 0xce, 0xe5, 0xf4, 0x88, 0xcc, 0xe6, 0xf9, 0xf7, 0xfe, 0xf1,
	0x5f, 0xbe, 0x53, 0x58, 0x27, 0x4b, 0xdd, 0xc8, 0xdd, 0xf3, 0x5d, 0x7f, 0x07, 0x48, 0x59, 0xfc,
	0xd9, 0x25, 0x9f, 0x85, 0xb2, 0xfc, 0x6d, 0x0c, 0xa2, 0x2a, 0x82, 0xf1, 0xb3, 0x1b, 0x9d, 0xf3,
	0xb9, 0x7d, 0x32, 0x33, 0x8c, 0x23, 0xac, 0x92, 0x85, 0x2e, 0x33, 0x05, 0x3b, 0x65, 0xb2, 0x88,
	0x7f, 0x74, 0xc9, 0x11, 0xd4, 0xb4, 0x9f, 0x0d, 0x21, 0x97, 0x0d, 0x32, 0xe6, 0x6f, 0x94, 0x74,
	0xae, 0x4c, 0x47, 0x10, 0x83, 0x5d, 0xc3, 0xc1, 0x2e, 0x92, 0xe5, 0x6e, 0x1a, 0x0d, 0xed, 0xd4,
	0x49, 0x55, 0x69, 0x76, 0xc9, 0xaf, 0x59, 0xb0, 0x9a, 0xf9, 0x01, 0x0e, 0x72, 0x4d, 0xd5, 0xf4,
	0x29, 0x3f, 0xcf, 0xd1, 0xb9, 0x98, 0x8b, 0x94, 0x0c, 0xff, 0x22, 0x0e, 0x7f, 0xc3, 0xae, 0xf1,
	0x29, 0x8a, 0x30, 0xea, 0x13, 0xd6, 0x73, 0x3b, 0x6b, 0x76, 0x5d, 0x83, 0x75, 0x3f, 0x61, 0x3d,
	0x47, 0xde, 0xb3, 0x60, 0xc5, 0xfc, 0x95, 0x0d, 0x62, 0xe7, 0x0e, 0xa1, 0xfd, 0x04, 0xc7, 0x71,
	0x6c, 0x3c, 0x8f, 0x6c, 0x5c, 0xb7, 0xab, 0x7c, 0x48, 0xfe, 0x03, 0x35, 0x8c, 0x0b, 0x22, 0x39,
	0xe3, 0x20, 0xc9, 0x44, 0x5d, 0xff, 0xc9, 0x0d, 0x72, 0x25, 0x97, 0xbc, 0xf2, 0x6b, 0x1c, 0xc7,
	0x31, 0xd0, 0x45, 0x06, 0x6e, 0xc9, 0x39, 0x4b, 0x1f, 0xc0, 0x58, 0x68, 0xda, 0x0d, 0x1d, 0x88,
	0x4c, 0x7c, 0xd9, 0x82, 0xaa, 0xfa, 0x00, 0x8c, 0x5c, 0x52, 0xb3, 0xac, 0xd9, 0x07, 0x7d, 0x9d,
	0xcb, 0x53, 0xfb, 0x33, 0x2c, 0x70, 0x1b, 0xda, 0xe5, 0x26, 0x58, 0xb2, 0xa0, 0x01, 0x13, 0x16,
	0xd4, 0x87, 0x62, 0x1a, 0x0b, 0x39, 0xaf, 0xe6, 0x34, 0x16, 0xf2, 0x5e, 0x98, 0x65, 0x59, 0x98,
	0x20, 0x96, 0xc1, 0x02, 0x07, 0x22, 0x0b, 0x9f, 0x87, 0xaa, 0xfa, 0x9e, 0x4c, 0xe3, 0x20, 0xe7,
	0xa1, 0x99, 0xb1, 0xaf, 0xd5, 0x47, 0x63, 0xd9, 0xb1, 0x79, 0x65, 0x93, 0x31, 0x36, 0x07, 0xe2,
	0xd8, 0x21, 0x40, 0x5a, 0x57, 0x44, 0x2e, 0x18, 0x85, 0xd6, 0x73, 0x8f, 0x9b, 0xaa, 0x9e, 0x18,
	0xc2, 0x73, 0x0f, 0xa8, 0x54, 0x3d, 0x05, 0x24, 0xe7, 0xab, 0xbe, 0x28, 0xd3, 0x25, 0xee, 0x9f,
	0x68, 0xdc, 0xac, 0xac, 0x7d, 0x39, 0xb2, 0x2a, 0x6b, 0x3f, 0x19, 0xfb, 0x29, 0xd4, 0xe5, 0xfd,
	0xa6, 0x18, 0xbd, 0xa3, 0xcd, 0x59, 0xbb, 0xd1, 0xd5, 0x2c, 0x9c, 0x79, 0x2d, 0x6a, 0xdf, 0xc6,
	0xb1, 0x6f, 0x92, 0x55, 0x6d, 0x82, 0x9e, 0x1b, 0xc5, 0x3b, 0x6b, 0x39, 0x40, 0xf2, 0x05, 0xa8,
	0xaa, 0xcf, 0xce, 0xb4, 0x69, 0xe7, 0xbc, 0x47, 0x9b, 0x35, 0xed, 0x97, 0x70, 0xe8, 0xe7, 0xed,
	0x46, 0x37, 0x09, 0xba, 0x13, 0x89, 0xaf, 0xdb, 0x2b, 0x06, 0x14, 0x27, 0xfe, 0xab, 0x6c, 0xbf,
	0xa3, 0x1c, 0x12, 0x06, 0xae, 0x64, 0xe4, 0x7e, 0x02, 0x16, 0x3e, 0x8a, 0x2c, 0x74, 0xed, 0x55,
	0x65, 0xb0, 0x54, 0xf8, 0x1b, 0x36, 0xc9, 0xc0, 0x91, 0x8d, 0x01, 0x54, 0x92, 0x9f, 0xda, 0x20,
	0xaa, 0x78, 0xcd, 0x5f, 0xf4, 0xe8, 0x5c, 0xc8, 0xef, 0xcc, 0x3a, 0x30, 0xec, 0xe0, 0x0e, 0x8c,
	0x8b, 0x9c, 0x8c, 0x99, 0x52, 0xcb, 0x27, 0xe3, 0x86, 0x52, 0x1b, 0xaf, 0xdd, 0x35, 0x93, 0x96,
	0x7d, 0x67, 0x6e, 0x5f, 0xc7, 0x71, 0x2e, 0x13, 0x45, 0xb1, 0xa3, 0x78, 0xa7, 0x41, 0x6a, 0x6a,
	0xbb, 0x4b, 0xbe, 0x62, 0x41, 0x4d, 0x7b, 0xa8, 0xae, 0x79, 0xb5, 0xbc, 0x67, 0xf6, 0x9d, 0x2b,
	0xd3, 0x11, 0x74, 0xb7, 0x42, 0x56, 0xe4, 0x58, 0xbc, 0x32, 0x4d, 0xd7, 0x2f, 0x09, 0xeb, 0x92,
	0x5f, 0xb1, 0x78, 0x49, 0x42, 0xf2, 0x64, 0x9a, 0x0e, 0xdf, 0xdf, 0xdc, 0x3f, 0x82, 0xe3, 0xbf,
	0x48, 0xd6, 0xe4, 0x58, 0x61, 0x4a, 0x79, 0xa7, 0x45, 0x9a, 0x39, 0xe0, 0x2e, 0xf9, 0x22, 0x2f,
	0x20, 0xc0, 0xa0, 0xd1, 0x1d, 0x51, 0xcf, 0xf5, 0xe9, 0xfb, 0xe3, 0x22, 0x23, 0x85, 0x58, 0x90,
	0x55, 0xa5, 0x20, 0x61, 0x5d, 0xf2, 0x75, 0x26, 0x05, 0xbd, 0xbc, 0x87, 0x5c, 0x55, 0x47, 0xc8,
	0xad, 0x41, 0xea, 0xd8, 0xb3, 0x50, 0x74, 0x63, 0x43, 0x56, 0xbb, 0x49, 0xa1, 0x4f, 0x97, 0xd7,
	0x52, 0xed, 0x34, 0x09, 0xc9, 0x00, 0x31, 0xe2, 0x58, 0x31, 0x5f, 0x11, 0x6a, 0x8e, 0x7e, 0xca,
	0x53, 0xc8, 0xce, 0xb5, 0x99, 0x38, 0x82, 0x9d, 0x5b, 0xc8, 0xce, 0x35, 0x52, 0xef, 0xca, 0xf7,
	0x84, 0x5c, 0x39, 0x57, 0x49, 0x43, 0x87, 0x74, 0x49, 0x08, 0x8b, 0x7c, 0x3a, 0x5a, 0xb4, 0xa8,
	0x5d, 0x6a, 0xcf, 0xda, 0xeb, 0x42, 0x11, 0xec, 0x95, 0x94, 0x2e, 0x9f, 0x2c, 0xdb, 0xea, 0x2d,
	0x7b, 0xd5, 0x04, 0x0b, 0x2b, 0x5f, 0x96, 0x4f, 0x57, 0x35, 0x1b, 0x6b, 0xbc, 0x67, 0x9d, 0x35,
	0xee, 0xcb, 0x38, 0xee, 0x4b, 0x36, 0x49, 0x07, 0x98, 0xf8, 0xe9, 0xc8, 0x6d, 0x7b, 0x2d, 0xdb,
	0x81, 0x63, 0x4f, 0x60, 0x59, 0xa9, 0x5a, 0x24, 0xa6, 0x86, 0xe9, 0xe5, 0x83, 0x9d, 0x4b, 0xd3,
	0xba, 0x05, 0x1b, 0x37, 0x90, 0x8d, 0xab, 0xa4, 0xd6, 0x15, 0xc5, 0x75, 0x5c, 0xce, 0x2b, 0xa4,
	0xae, 0x01, 0xba, 0xe4, 0x10, 0x96, 0x95, 0xea, 0x44, 0x6d, 0xd8, 0x6c, 0xd5, 0xe2, 0xac, 0x89,
	0xa7, 0x01, 0xa5, 0x1c, 0x20, 0xa4, 0xce, 0x50, 0x06, 0x94, 0x2a, 0x0c, 0xa7, 0xfb, 0x0d, 0x0b,
	0x9f, 0x0a, 0x1a, 0x35, 0x81, 0xd7, 0x74, 0x03, 0x9a, 0x5b, 0xcf, 0xd8, 0xb9, 0x3a, 0xbd, 0xde,
	0x30, 0xbb, 0x01, 0xe5, 0xc0, 0xa2, 0x10, 0x11, 0x37, 0xa0, 0x01, 0xeb, 0x4a, 0xd9, 0xcb, 0x6a,
	0x5c, 0x53, 0xf6, 0x7a, 0xc9, 0x4d, 0x46, 0xf6, 0xc6, 0xe3, 0x24, 0x45, 0xf6, 0xe2, 0x12, 0x26,
	0x95, 0xbd, 0x0a, 0xe8, 0x12, 0x1f, 0xca, 0xd2, 0x43, 0x93, 0x4b, 0x39, 0x6e, 0x5b, 0x3d, 0x50,
	0x5c, 0x9e, 0xda, 0x2f, 0x46, 0xbd, 0x8a, 0xa3, 0x9e, 0x27, 0xa0, 0xf8, 0xf4, 0x1a, 0x59, 0x4e,
	0x5b, 0x5d, 0xb2, 0x0f, 0x90, 0x3e, 0xa4, 0x24, 0x86, 0xb3, 0x32, 0x26, 0x79, 0x71, 0x4a, 0xaf,
	0x2c, 0x69, 0xc1, 0xd1, 0x36, 0x48, 0x59, 0x4e, 0x69, 0x67, 0x99, 0x54, 0x92, 0xe9, 0x91, 0x3f,
	0xe4, 0x2f, 0x4f, 0x8c, 0x5f, 0xe1, 0x20, 0xcf, 0x4c, 0xf9, 0xa1, 0x0c, 0xdd, 0xb8, 0x5e, 0x3f,
	0x06, 0x4b, 0xdf, 0x69, 0x64, 0x5d, 0x75, 0x2b, 0x89, 0x5d, 0xdf, 0x69, 0x93, 0x56, 0x6e, 0x47,
	0x97, 0x7c, 0xd5, 0x82, 0x9a, 0xf6, 0xac, 0x8c, 0x64, 0x43, 0x74, 0x43, 0x1a, 0x57, 0xa6, 0x23,
	0x64, 0xc2, 0x1b, 0x29, 0x84, 0x34, 0x8a, 0x67, 0xe1, 0x8d, 0x0e, 0xc5, 0x2d, 0xf0, 0x45, 0xa8,
	0x69, 0xcf, 0xe4, 0x34, 0x36, 0xf2, 0x1e, 0xd0, 0xcd, 0x17, 0x5e, 0xc9, 0x91, 0xd2, 0x30, 0x5a,
	0x1d, 0x5f, 0x89, 0xa3, 0x0f, 0x99, 0xd6, 0x27, 0x05, 0x65, 0x86, 0xd6, 0x1f, 0x9c, 0x60, 0xec,
	0x74, 0xeb, 0xa7, 0xfa, 0x7d, 0x90, 0x9c, 0x25, 0x55, 0x98, 0x9c, 0xb7, 0x56, 0xca, 0xa6, 0xcd,
	0x3b, 0xaf, 0xc8, 0xed, 0x64, 0xf3, 0x4e, 0x23, 0x3a, 0x75, 0xde, 0x4a, 0x3c, 0xf7, 0x35, 0x0b,
	0x6a, 0x5a, 0xd1, 0x28, 0x31, 0x37, 0x97, 0x59, 0x6a, 0xa9, 0xad, 0x7f, 0x6e, 0xbd, 0xa9, 0x7d,
	0x17, 0xf9, 0xb8, 0x4d, 0x9a, 0xfc, 0xc8, 0x98, 0xd4, 0x8f, 0xf2, 0x8d, 0xd8, 0xca, 0x87, 0x93,
	0x6f, 0x5b, 0xd0, 0x30, 0x0a, 0x45, 0x35, 0xcf, 0x9f, 0x5f, 0x44, 0x3a, 0x4b, 0x1e, 0xaf, 0x22,
	0x1f, 0x1f, 0xb7, 0x5b, 0xe6, 0x78, 0xa9, 0x3a, 0x5e, 0xb0, 0x37, 0xf2, 0x3b, 0x51, 0x3a, 0x8c,
	0x25, 0xa3, 0xe0, 0x54, 0x63, 0x29, 0xbf, 0x18, 0xf5, 0x54, 0x2c, 0xa5, 0x1a, 0x9a, 0xc3, 0x92,
	0xa2, 0xa8, 0xbf, 0x0c, 0x35, 0xad, 0xd4, 0x50, 0x5b, 0xaf, 0xbc, 0xea, 0x45, 0x6d, 0xbd, 0x72,
	0xab, 0x14, 0x95, 0x48, 0x24, 0x62, 0xfd, 0x5d, 0x91, 0x20, 0xc4, 0x48, 0x44, 0x83, 0xa0, 0x77,
	0x50, 0xb3, 0xce, 0xea, 0x3e, 0xc9, 0x96, 0x30, 0x6a, 0xde, 0x21, 0xaf, 0x96, 0x31, 0xf5, 0x0e,
	0x72, 0x00, 0x67, 0x12, 0xef, 0xa3, 0x77, 0x50, 0x01, 0x5d, 0x3c, 0xfd, 0xe8, 0x05, 0x85, 0xda,
	0xe9, 0x27, 0xb7, 0x14, 0x51, 0xf3, 0x8d, 0x53, 0xaa, 0x11, 0x53, 0xdf, 0x28, 0xd2, 0x9c, 0xc9,
	0xdc, 0x99, 0x6f, 0x34, 0x60, 0x1a, 0x1b, 0xa2, 0x86, 0x2c, 0x8f, 0x0d, 0xbd, 0x94, 0x32, 0x8f,
	0x0d, 0xb3, 0xa6, 0x32, 0xcb, 0x86, 0x28, 0xe9, 0xd3, 0xd8, 0x10, 0xb0, 0x2e, 0xf9, 0x9d, 0xe4,
	0x0d, 0xb4, 0x21, 0x93, 0x67, 0x33, 0xdb, 0x25, 0x5f, 0x32, 0x37, 0x8e, 0xc5, 0xd3, 0xf3, 0x02,
	0xa4, 0x91, 0x32, 0x81, 0xe8, 0x3b, 0x44, 0xe5, 0x95, 0x6f, 0x18, 0xf2, 0xa7, 0xe9, 0xd3, 0x6c,
	0xad, 0x78, 0x33, 0x87, 0xad, 0xdc, 0xe2, 0xcf, 0x1c, 0xb6, 0xa6, 0x54, 0x81, 0xbe, 0x82, 0x6c,
	0x7d, 0x94, 0x6c, 0x48, 0x99, 0xf4, 0x0d, 0xf6, 0x3a, 0xa4, 0x3d, 0xa5, 0xab, 0x4b, 0x8e, 0x60,
	0x59, 0x29, 0x16, 0xd5, 0x54, 0x38, 0x5b, 0x5a, 0xaa, 0xa9, 0x70, 0x5e, 0x8d, 0x69, 0xba, 0x77,
	0x70, 0xcf, 0xc6, 0x41, 0x7f, 0xc0, 0xfa, 0x71, 0xef, 0x68, 0x10, 0xdc, 0x3b, 0x4a, 0xb1, 0xa7,
	0x36, 0x70, 0xb6, 0xc2, 0x54, 0x1b, 0x38, 0xa7, 0x46, 0x54, 0x8d, 0xac, 0x84, 0x5e, 0xb8, 0xfe,
	0x6e, 0xc0, 0x23, 0x2b, 0x05, 0xd0, 0x25, 0xdf, 0xb4, 0xa0, 0x61, 0xfc, 0x90, 0x9d, 0x66, 0xc4,
	0xf2, 0x7f, 0xb3, 0x50, 0x3b, 0x51, 0x4d, 0xf9, 0x1d, 0x3c, 0xe9, 0x70, 0x08, 0xe9, 0xaa, 0x25,
	0xa8, 0xdd, 0xb1, 0xb3, 0x47, 0x77, 0xd6, 0xc9, 0x5a, 0x16, 0xca, 0xce, 0x97, 0x75, 0xbd, 0x94,
	0x53, 0xdb, 0x41, 0xb9, 0x85, 0xa1, 0xda, 0x0e, 0xca, 0xaf, 0x03, 0xcd, 0x4a, 0x83, 0xe7, 0x90,
	0x15, 0x69, 0x88, 0x2c, 0xf2, 0x6f, 0x59, 0xd0, 0x30, 0xaa, 0xe8, 0x88, 0x41, 0x3f, 0xa7, 0x06,
	0x4e, 0x93, 0xc6, 0x94, 0xba, 0x46, 0x25, 0x08, 0x13, 0xa5, 0x75, 0xdd, 0xc8, 0xf5, 0xf7, 0x3c,
	0xca, 0xb3, 0x28, 0x18, 0x84, 0xe5, 0x75, 0x74, 0x99, 0x13, 0x5e, 0x31, 0x4b, 0xdc, 0x32, 0xe7,
	0xcc, 0x3c, 0xae, 0xae, 0xcd, 0xc4, 0xc9, 0xec, 0x61, 0x39, 0x3a, 0x2f, 0x89, 0xc1, 0x3d, 0xac,
	0x83, 0xba, 0xe4, 0xfb, 0x56, 0xa6, 0x6e, 0x33, 0x29, 0x47, 0xba, 0x35, 0x5d, 0x06, 0x46, 0x19,
	0x66, 0xe7, 0xb9, 0x79, 0x50, 0x33, 0x9b, 0x59, 0x63, 0x26, 0xa9, 0x9a, 0xc2, 0xcd, 0x9c, 0xdf,
	0xd5, 0x25, 0x5f, 0x80, 0xaa, 0x5a, 0x2f, 0xa4, 0x1d, 0x1d, 0x72, 0xca, 0x9e, 0xb4, 0xa3, 0x43,
	0x5e, 0xa1, 0x91, 0x22, 0xad, 0x34, 0xff, 0x85, 0xfa, 0xcc, 0xa4, 0xa5, 0x83, 0xd0, 0x94, 0x28,
	0x75, 0x3c, 0xc4, 0x38, 0x27, 0x98, 0x63, 0x5f, 0x9a, 0xd6, 0x9d, 0x31, 0x25, 0xe9, 0x38, 0x7b,
	0x94, 0x27, 0x04, 0x34, 0x88, 0x3a, 0x6d, 0x5e, 0xf7, 0x90, 0x33, 0x6d, 0xf5, 0xfe, 0x3f, 0x6f,
	0xda, 0xda, 0x85, 0xbc, 0x31, 0x6d, 0xbc, 0x65, 0xd7, 0xa7, 0x9d, 0x82, 0xb8, 0xbe, 0x9a, 0x55,
	0x3e, 0x53, 0x2e, 0x40, 0xb4, 0x32, 0x9d, 0xce, 0xb5, 0x99, 0x38, 0xf9, 0xd7, 0x20, 0xbc, 0xa4,
	0x46, 0xbb, 0x06, 0xe1, 0x20, 0x91, 0x0f, 0xae, 0x24, 0xff, 0x2c, 0x42, 0xcb, 0x47, 0x9a, 0xff,
	0xcd, 0x42, 0xcb, 0x47, 0x66, 0xfe, 0xbf, 0x84, 0x12, 0x3a, 0x8b, 0x11, 0x04, 0x82, 0x0c, 0x9d,
	0x75, 0xa8, 0x18, 0xba, 0xa6, 0x15, 0x10, 0x69, 0x91, 0x58, 0x5e, 0x95, 0x52, 0xe7, 0xca, 0x74,
	0x84, 0x4c, 0xba, 0x52, 0x99, 0x28, 0xa6, 0x2b, 0xd5, 0x89, 0x93, 0x2f, 0x27, 0x0b, 0x90, 0x56,
	0x2c, 0xe4, 0x2c, 0x40, 0xa6, 0xd2, 0x21, 0x67, 0x01, 0xb2, 0x25, 0x0f, 0xca, 0x6d, 0x9c, 0xbf,
	0x1b, 0x8b, 0x8b, 0x0e, 0xbc, 0x8d, 0x4b, 0x9b, 0x5d, 0xf2, 0x2d, 0x9e, 0xb3, 0xd0, 0xeb, 0x18,
	0xcc, 0x9c, 0x45, 0x6e, 0x89, 0x44, 0xe7, 0x99, 0xd9, 0x48, 0x99, 0x6c, 0x9d, 0x1a, 0x0a, 0xf6,
	0x27, 0xa1, 0x87, 0xd9, 0x3a, 0x13, 0x28, 0x3d, 0x8b, 0x72, 0x65, 0x6e, 0x7a, 0x96, 0xec, 0x45,
	0xbc, 0xe9, 0x59, 0x72, 0xee, 0xdb, 0x15, 0xcf, 0x22, 0x03, 0x89, 0xc4, 0xcf, 0xaa, 0x00, 0x9e,
	0xb9, 0x34, 0x6e, 0xa7, 0x35, 0xcf, 0x92, 0x7f, 0x79, 0xae, 0x79, 0x96, 0x29, 0x97, 0xdb, 0x39,
	0xb2, 0x18, 0x08, 0x14, 0x4d, 0x16, 0x12, 0xd8, 0x25, 0x5f, 0x82, 0x9a, 0xf6, 0xc2, 0x45, 0xd3,
	0xcd, 0xbc, 0x37, 0x31, 0x9a, 0x6e, 0xe6, 0x3e, 0x8e, 0x51, 0x4c, 0x84, 0x1c, 0x8f, 0x67, 0xec,
	0xd0, 0x44, 0xe8, 0x20, 0x1e, 0x29, 0xeb, 0x37, 0xe3, 0xda, 0x6a, 0xe4, 0x5e, 0xc2, 0x6b, 0xab,
	0x91, 0x7f, 0xad, 0x9e, 0x13, 0x29, 0x87, 0x1c, 0x51, 0x8b, 0x94, 0x05, 0xac, 0xfb, 0x5a, 0xfb,
	0x1f, 0x7e, 0x74, 0xc9, 0xfa, 0xe1, 0x8f, 0x2e, 0x59, 0xff, 0xfc, 0xa3, 0x4b, 0xd6, 0xb7, 0x7f,
	0x7c, 0xe9, 0x43, 0x3f, 0xfc, 0xf1, 0xa5, 0x0f, 0xfd, 0xd3, 0x8f, 0x2f, 0x7d, 0xe8, 0xc9, 0x22,
	0xfe, 0x43, 0x9e, 0x8f, 0xfc, 0x77, 0x00, 0x00, 0x00, 0xff, 0xff, 0xc0, 0x26, 0x64, 0x26, 0xcc,
	0x67, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// SocialClient is the client API for Social service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SocialClient interface {
	// SignIn verify the user auth and return a jwt
	SignIn(ctx context.Context, in *SignInRequest, opts ...grpc.CallOption) (*SignInResponse, error)
	//Find a user info by uid
	FindUser(ctx context.Context, in *FindUserRequest, opts ...grpc.CallOption) (*FindUserResponse, error)
	FindMisesUser(ctx context.Context, in *FindMisesUserRequest, opts ...grpc.CallOption) (*FindMisesUserResponse, error)
	//update user info
	UpdateUserProfile(ctx context.Context, in *UpdateUserProfileRequest, opts ...grpc.CallOption) (*UpdateUserResponse, error)
	//update user avatar
	UpdateUserAvatar(ctx context.Context, in *UpdateUserAvatarRequest, opts ...grpc.CallOption) (*UpdateUserResponse, error)
	//update user username
	UpdateUserName(ctx context.Context, in *UpdateUserNameRequest, opts ...grpc.CallOption) (*UpdateUserResponse, error)
	//create new status
	CreateStatus(ctx context.Context, in *CreateStatusRequest, opts ...grpc.CallOption) (*CreateStatusResponse, error)
	// update status
	UpdateStatus(ctx context.Context, in *UpdateStatusRequest, opts ...grpc.CallOption) (*UpdateStatusResponse, error)
	//delete a status
	DeleteStatus(ctx context.Context, in *DeleteStatusRequest, opts ...grpc.CallOption) (*SimpleResponse, error)
	//like a status
	LikeStatus(ctx context.Context, in *LikeStatusRequest, opts ...grpc.CallOption) (*SimpleResponse, error)
	//unlike a status
	UnLikeStatus(ctx context.Context, in *UnLikeStatusRequest, opts ...grpc.CallOption) (*SimpleResponse, error)
	// list like status
	ListLikeStatus(ctx context.Context, in *ListLikeRequest, opts ...grpc.CallOption) (*ListLikeResponse, error)
	//like a nft_asset
	LikeNftAsset(ctx context.Context, in *LikeNftAssetRequest, opts ...grpc.CallOption) (*SimpleResponse, error)
	//unlike a nft_asset
	UnlikeNftAsset(ctx context.Context, in *UnLikeNftAssetRequest, opts ...grpc.CallOption) (*SimpleResponse, error)
	//query single status
	GetStatus(ctx context.Context, in *GetStatusRequest, opts ...grpc.CallOption) (*GetStatusResponse, error)
	//query batch status
	ListStatus(ctx context.Context, in *ListStatusRequest, opts ...grpc.CallOption) (*ListStatusResponse, error)
	//query batch status
	NewListStatus(ctx context.Context, in *NewListStatusRequest, opts ...grpc.CallOption) (*NewListStatusResponse, error)
	//query recommended status
	ListRecommended(ctx context.Context, in *ListStatusRequest, opts ...grpc.CallOption) (*ListStatusResponse, error)
	//query time line
	ListUserTimeline(ctx context.Context, in *ListStatusRequest, opts ...grpc.CallOption) (*ListStatusResponse, error)
	//query following users order by update time
	LatestFollowing(ctx context.Context, in *LatestFollowingRequest, opts ...grpc.CallOption) (*LatestFollowingResponse, error)
	//query related users
	ListRelationship(ctx context.Context, in *ListRelationshipRequest, opts ...grpc.CallOption) (*ListRelationshipResponse, error)
	//like a status
	Follow(ctx context.Context, in *FollowRequest, opts ...grpc.CallOption) (*SimpleResponse, error)
	//unlike a status
	UnFollow(ctx context.Context, in *UnFollowRequest, opts ...grpc.CallOption) (*SimpleResponse, error)
	ListMessage(ctx context.Context, in *ListMessageRequest, opts ...grpc.CallOption) (*ListMessageResponse, error)
	ReadMessage(ctx context.Context, in *ReadMessageRequest, opts ...grpc.CallOption) (*SimpleResponse, error)
	GetMessageSummary(ctx context.Context, in *GetMessageSummaryRequest, opts ...grpc.CallOption) (*MessageSummaryResponse, error)
	ListComment(ctx context.Context, in *ListCommentRequest, opts ...grpc.CallOption) (*ListCommentResponse, error)
	ListLike(ctx context.Context, in *ListLikeUserRequest, opts ...grpc.CallOption) (*ListLikeUserResponse, error)
	GetComment(ctx context.Context, in *GetCommentRequest, opts ...grpc.CallOption) (*GetCommentResponse, error)
	NewRecommendStatus(ctx context.Context, in *NewRecommendStatusRequest, opts ...grpc.CallOption) (*NewRecommendStatusResponse, error)
	CreateComment(ctx context.Context, in *CreateCommentRequest, opts ...grpc.CallOption) (*CreateCommentResponse, error)
	DeleteComment(ctx context.Context, in *DeleteCommentRequest, opts ...grpc.CallOption) (*SimpleResponse, error)
	//like a comment
	LikeComment(ctx context.Context, in *LikeCommentRequest, opts ...grpc.CallOption) (*SimpleResponse, error)
	//unlike a status
	UnlikeComment(ctx context.Context, in *UnlikeCommentRequest, opts ...grpc.CallOption) (*SimpleResponse, error)
	ListBlacklist(ctx context.Context, in *ListBlacklistRequest, opts ...grpc.CallOption) (*ListBlacklistResponse, error)
	CreateBlacklist(ctx context.Context, in *CreateBlacklistRequest, opts ...grpc.CallOption) (*SimpleResponse, error)
	DeleteBlacklist(ctx context.Context, in *DeleteBlacklistRequest, opts ...grpc.CallOption) (*SimpleResponse, error)
	ShareTweetUrl(ctx context.Context, in *ShareTweetUrlRequest, opts ...grpc.CallOption) (*ShareTweetUrlResponse, error)
	TwitterAuth(ctx context.Context, in *TwitterAuthRequest, opts ...grpc.CallOption) (*TwitterAuthResponse, error)
	AirdropTwitter(ctx context.Context, in *AirdropTwitterRequest, opts ...grpc.CallOption) (*AirdropTwitterResponse, error)
	AirdropChannel(ctx context.Context, in *AirdropChannelRequest, opts ...grpc.CallOption) (*AirdropChannelResponse, error)
	CreateAirdropTwitter(ctx context.Context, in *CreateAirdropTwitterRequest, opts ...grpc.CallOption) (*CreateAirdropTwitterResponse, error)
	CreateChannelAirdrop(ctx context.Context, in *CreateChannelAirdropRequest, opts ...grpc.CallOption) (*CreateChannelAirdropResponse, error)
	UserToChain(ctx context.Context, in *UserToChainRequest, opts ...grpc.CallOption) (*UserToChainResponse, error)
	ChannelInfo(ctx context.Context, in *ChannelInfoRequest, opts ...grpc.CallOption) (*ChannelInfoResponse, error)
	PageChannelUser(ctx context.Context, in *PageChannelUserRequest, opts ...grpc.CallOption) (*PageChannelUserResponse, error)
	GetChannelUser(ctx context.Context, in *GetChannelUserRequest, opts ...grpc.CallOption) (*GetChannelUserResponse, error)
	GetOpenseaAsset(ctx context.Context, in *GetOpenseaAssetRequest, opts ...grpc.CallOption) (*GetOpenseaAssetResponse, error)
	ListOpenseaAsset(ctx context.Context, in *ListOpenseaAssetRequest, opts ...grpc.CallOption) (*ListOpenseaAssetResponse, error)
	GetOpenseaAssetContract(ctx context.Context, in *GetOpenseaAssetContractRequest, opts ...grpc.CallOption) (*GetOpenseaAssetContractResponse, error)
	PageNftAsset(ctx context.Context, in *PageNftAssetRequest, opts ...grpc.CallOption) (*PageNftAssetResponse, error)
	GetNftAsset(ctx context.Context, in *GetNftAssetRequest, opts ...grpc.CallOption) (*GetNftAssetResponse, error)
	PageNftEvent(ctx context.Context, in *PageNftEventRequest, opts ...grpc.CallOption) (*PageNftEventResponse, error)
	UpdateUserConfig(ctx context.Context, in *UpdateUserConfigRequest, opts ...grpc.CallOption) (*UpdateUserConfigResponse, error)
	Complaint(ctx context.Context, in *ComplaintRequest, opts ...grpc.CallOption) (*ComplaintResponse, error)
	GetUserConfig(ctx context.Context, in *GetUserConfigRequest, opts ...grpc.CallOption) (*GetUserConfigResponse, error)
	UpdateOpenseaNft(ctx context.Context, in *UpdateOpenseaNftRequest, opts ...grpc.CallOption) (*UpdateOpenseaNftResponse, error)
	GetTwitterAuthUrl(ctx context.Context, in *GetTwitterAuthUrlRequest, opts ...grpc.CallOption) (*GetTwitterAuthUrlResponse, error)
	GetAirdropInfo(ctx context.Context, in *GetAirdropInfoRequest, opts ...grpc.CallOption) (*GetAirdropInfoResponse, error)
	TwitterCallback(ctx context.Context, in *TwitterCallbackRequest, opts ...grpc.CallOption) (*TwitterCallbackResponse, error)
	TwitterFollow(ctx context.Context, in *TwitterFollowRequest, opts ...grpc.CallOption) (*TwitterFollowResponse, error)
	ReceiveAirdrop(ctx context.Context, in *ReceiveAirdropRequest, opts ...grpc.CallOption) (*ReceiveAirdropResponse, error)
}

type socialClient struct {
	cc *grpc.ClientConn
}

func NewSocialClient(cc *grpc.ClientConn) SocialClient {
	return &socialClient{cc}
}

func (c *socialClient) SignIn(ctx context.Context, in *SignInRequest, opts ...grpc.CallOption) (*SignInResponse, error) {
	out := new(SignInResponse)
	err := c.cc.Invoke(ctx, "/socialsvc.Social/SignIn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialClient) FindUser(ctx context.Context, in *FindUserRequest, opts ...grpc.CallOption) (*FindUserResponse, error) {
	out := new(FindUserResponse)
	err := c.cc.Invoke(ctx, "/socialsvc.Social/FindUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialClient) FindMisesUser(ctx context.Context, in *FindMisesUserRequest, opts ...grpc.CallOption) (*FindMisesUserResponse, error) {
	out := new(FindMisesUserResponse)
	err := c.cc.Invoke(ctx, "/socialsvc.Social/FindMisesUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialClient) UpdateUserProfile(ctx context.Context, in *UpdateUserProfileRequest, opts ...grpc.CallOption) (*UpdateUserResponse, error) {
	out := new(UpdateUserResponse)
	err := c.cc.Invoke(ctx, "/socialsvc.Social/UpdateUserProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialClient) UpdateUserAvatar(ctx context.Context, in *UpdateUserAvatarRequest, opts ...grpc.CallOption) (*UpdateUserResponse, error) {
	out := new(UpdateUserResponse)
	err := c.cc.Invoke(ctx, "/socialsvc.Social/UpdateUserAvatar", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialClient) UpdateUserName(ctx context.Context, in *UpdateUserNameRequest, opts ...grpc.CallOption) (*UpdateUserResponse, error) {
	out := new(UpdateUserResponse)
	err := c.cc.Invoke(ctx, "/socialsvc.Social/UpdateUserName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialClient) CreateStatus(ctx context.Context, in *CreateStatusRequest, opts ...grpc.CallOption) (*CreateStatusResponse, error) {
	out := new(CreateStatusResponse)
	err := c.cc.Invoke(ctx, "/socialsvc.Social/CreateStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialClient) UpdateStatus(ctx context.Context, in *UpdateStatusRequest, opts ...grpc.CallOption) (*UpdateStatusResponse, error) {
	out := new(UpdateStatusResponse)
	err := c.cc.Invoke(ctx, "/socialsvc.Social/UpdateStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialClient) DeleteStatus(ctx context.Context, in *DeleteStatusRequest, opts ...grpc.CallOption) (*SimpleResponse, error) {
	out := new(SimpleResponse)
	err := c.cc.Invoke(ctx, "/socialsvc.Social/DeleteStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialClient) LikeStatus(ctx context.Context, in *LikeStatusRequest, opts ...grpc.CallOption) (*SimpleResponse, error) {
	out := new(SimpleResponse)
	err := c.cc.Invoke(ctx, "/socialsvc.Social/LikeStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialClient) UnLikeStatus(ctx context.Context, in *UnLikeStatusRequest, opts ...grpc.CallOption) (*SimpleResponse, error) {
	out := new(SimpleResponse)
	err := c.cc.Invoke(ctx, "/socialsvc.Social/UnLikeStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialClient) ListLikeStatus(ctx context.Context, in *ListLikeRequest, opts ...grpc.CallOption) (*ListLikeResponse, error) {
	out := new(ListLikeResponse)
	err := c.cc.Invoke(ctx, "/socialsvc.Social/ListLikeStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialClient) LikeNftAsset(ctx context.Context, in *LikeNftAssetRequest, opts ...grpc.CallOption) (*SimpleResponse, error) {
	out := new(SimpleResponse)
	err := c.cc.Invoke(ctx, "/socialsvc.Social/LikeNftAsset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialClient) UnlikeNftAsset(ctx context.Context, in *UnLikeNftAssetRequest, opts ...grpc.CallOption) (*SimpleResponse, error) {
	out := new(SimpleResponse)
	err := c.cc.Invoke(ctx, "/socialsvc.Social/UnlikeNftAsset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialClient) GetStatus(ctx context.Context, in *GetStatusRequest, opts ...grpc.CallOption) (*GetStatusResponse, error) {
	out := new(GetStatusResponse)
	err := c.cc.Invoke(ctx, "/socialsvc.Social/GetStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialClient) ListStatus(ctx context.Context, in *ListStatusRequest, opts ...grpc.CallOption) (*ListStatusResponse, error) {
	out := new(ListStatusResponse)
	err := c.cc.Invoke(ctx, "/socialsvc.Social/ListStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialClient) NewListStatus(ctx context.Context, in *NewListStatusRequest, opts ...grpc.CallOption) (*NewListStatusResponse, error) {
	out := new(NewListStatusResponse)
	err := c.cc.Invoke(ctx, "/socialsvc.Social/NewListStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialClient) ListRecommended(ctx context.Context, in *ListStatusRequest, opts ...grpc.CallOption) (*ListStatusResponse, error) {
	out := new(ListStatusResponse)
	err := c.cc.Invoke(ctx, "/socialsvc.Social/ListRecommended", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialClient) ListUserTimeline(ctx context.Context, in *ListStatusRequest, opts ...grpc.CallOption) (*ListStatusResponse, error) {
	out := new(ListStatusResponse)
	err := c.cc.Invoke(ctx, "/socialsvc.Social/ListUserTimeline", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialClient) LatestFollowing(ctx context.Context, in *LatestFollowingRequest, opts ...grpc.CallOption) (*LatestFollowingResponse, error) {
	out := new(LatestFollowingResponse)
	err := c.cc.Invoke(ctx, "/socialsvc.Social/LatestFollowing", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialClient) ListRelationship(ctx context.Context, in *ListRelationshipRequest, opts ...grpc.CallOption) (*ListRelationshipResponse, error) {
	out := new(ListRelationshipResponse)
	err := c.cc.Invoke(ctx, "/socialsvc.Social/ListRelationship", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialClient) Follow(ctx context.Context, in *FollowRequest, opts ...grpc.CallOption) (*SimpleResponse, error) {
	out := new(SimpleResponse)
	err := c.cc.Invoke(ctx, "/socialsvc.Social/Follow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialClient) UnFollow(ctx context.Context, in *UnFollowRequest, opts ...grpc.CallOption) (*SimpleResponse, error) {
	out := new(SimpleResponse)
	err := c.cc.Invoke(ctx, "/socialsvc.Social/UnFollow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialClient) ListMessage(ctx context.Context, in *ListMessageRequest, opts ...grpc.CallOption) (*ListMessageResponse, error) {
	out := new(ListMessageResponse)
	err := c.cc.Invoke(ctx, "/socialsvc.Social/ListMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialClient) ReadMessage(ctx context.Context, in *ReadMessageRequest, opts ...grpc.CallOption) (*SimpleResponse, error) {
	out := new(SimpleResponse)
	err := c.cc.Invoke(ctx, "/socialsvc.Social/ReadMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialClient) GetMessageSummary(ctx context.Context, in *GetMessageSummaryRequest, opts ...grpc.CallOption) (*MessageSummaryResponse, error) {
	out := new(MessageSummaryResponse)
	err := c.cc.Invoke(ctx, "/socialsvc.Social/GetMessageSummary", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialClient) ListComment(ctx context.Context, in *ListCommentRequest, opts ...grpc.CallOption) (*ListCommentResponse, error) {
	out := new(ListCommentResponse)
	err := c.cc.Invoke(ctx, "/socialsvc.Social/ListComment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialClient) ListLike(ctx context.Context, in *ListLikeUserRequest, opts ...grpc.CallOption) (*ListLikeUserResponse, error) {
	out := new(ListLikeUserResponse)
	err := c.cc.Invoke(ctx, "/socialsvc.Social/ListLike", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialClient) GetComment(ctx context.Context, in *GetCommentRequest, opts ...grpc.CallOption) (*GetCommentResponse, error) {
	out := new(GetCommentResponse)
	err := c.cc.Invoke(ctx, "/socialsvc.Social/GetComment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialClient) NewRecommendStatus(ctx context.Context, in *NewRecommendStatusRequest, opts ...grpc.CallOption) (*NewRecommendStatusResponse, error) {
	out := new(NewRecommendStatusResponse)
	err := c.cc.Invoke(ctx, "/socialsvc.Social/NewRecommendStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialClient) CreateComment(ctx context.Context, in *CreateCommentRequest, opts ...grpc.CallOption) (*CreateCommentResponse, error) {
	out := new(CreateCommentResponse)
	err := c.cc.Invoke(ctx, "/socialsvc.Social/CreateComment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialClient) DeleteComment(ctx context.Context, in *DeleteCommentRequest, opts ...grpc.CallOption) (*SimpleResponse, error) {
	out := new(SimpleResponse)
	err := c.cc.Invoke(ctx, "/socialsvc.Social/DeleteComment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialClient) LikeComment(ctx context.Context, in *LikeCommentRequest, opts ...grpc.CallOption) (*SimpleResponse, error) {
	out := new(SimpleResponse)
	err := c.cc.Invoke(ctx, "/socialsvc.Social/LikeComment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialClient) UnlikeComment(ctx context.Context, in *UnlikeCommentRequest, opts ...grpc.CallOption) (*SimpleResponse, error) {
	out := new(SimpleResponse)
	err := c.cc.Invoke(ctx, "/socialsvc.Social/UnlikeComment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialClient) ListBlacklist(ctx context.Context, in *ListBlacklistRequest, opts ...grpc.CallOption) (*ListBlacklistResponse, error) {
	out := new(ListBlacklistResponse)
	err := c.cc.Invoke(ctx, "/socialsvc.Social/ListBlacklist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialClient) CreateBlacklist(ctx context.Context, in *CreateBlacklistRequest, opts ...grpc.CallOption) (*SimpleResponse, error) {
	out := new(SimpleResponse)
	err := c.cc.Invoke(ctx, "/socialsvc.Social/CreateBlacklist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialClient) DeleteBlacklist(ctx context.Context, in *DeleteBlacklistRequest, opts ...grpc.CallOption) (*SimpleResponse, error) {
	out := new(SimpleResponse)
	err := c.cc.Invoke(ctx, "/socialsvc.Social/DeleteBlacklist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialClient) ShareTweetUrl(ctx context.Context, in *ShareTweetUrlRequest, opts ...grpc.CallOption) (*ShareTweetUrlResponse, error) {
	out := new(ShareTweetUrlResponse)
	err := c.cc.Invoke(ctx, "/socialsvc.Social/ShareTweetUrl", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialClient) TwitterAuth(ctx context.Context, in *TwitterAuthRequest, opts ...grpc.CallOption) (*TwitterAuthResponse, error) {
	out := new(TwitterAuthResponse)
	err := c.cc.Invoke(ctx, "/socialsvc.Social/TwitterAuth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialClient) AirdropTwitter(ctx context.Context, in *AirdropTwitterRequest, opts ...grpc.CallOption) (*AirdropTwitterResponse, error) {
	out := new(AirdropTwitterResponse)
	err := c.cc.Invoke(ctx, "/socialsvc.Social/AirdropTwitter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialClient) AirdropChannel(ctx context.Context, in *AirdropChannelRequest, opts ...grpc.CallOption) (*AirdropChannelResponse, error) {
	out := new(AirdropChannelResponse)
	err := c.cc.Invoke(ctx, "/socialsvc.Social/AirdropChannel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialClient) CreateAirdropTwitter(ctx context.Context, in *CreateAirdropTwitterRequest, opts ...grpc.CallOption) (*CreateAirdropTwitterResponse, error) {
	out := new(CreateAirdropTwitterResponse)
	err := c.cc.Invoke(ctx, "/socialsvc.Social/CreateAirdropTwitter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialClient) CreateChannelAirdrop(ctx context.Context, in *CreateChannelAirdropRequest, opts ...grpc.CallOption) (*CreateChannelAirdropResponse, error) {
	out := new(CreateChannelAirdropResponse)
	err := c.cc.Invoke(ctx, "/socialsvc.Social/CreateChannelAirdrop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialClient) UserToChain(ctx context.Context, in *UserToChainRequest, opts ...grpc.CallOption) (*UserToChainResponse, error) {
	out := new(UserToChainResponse)
	err := c.cc.Invoke(ctx, "/socialsvc.Social/UserToChain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialClient) ChannelInfo(ctx context.Context, in *ChannelInfoRequest, opts ...grpc.CallOption) (*ChannelInfoResponse, error) {
	out := new(ChannelInfoResponse)
	err := c.cc.Invoke(ctx, "/socialsvc.Social/ChannelInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialClient) PageChannelUser(ctx context.Context, in *PageChannelUserRequest, opts ...grpc.CallOption) (*PageChannelUserResponse, error) {
	out := new(PageChannelUserResponse)
	err := c.cc.Invoke(ctx, "/socialsvc.Social/PageChannelUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialClient) GetChannelUser(ctx context.Context, in *GetChannelUserRequest, opts ...grpc.CallOption) (*GetChannelUserResponse, error) {
	out := new(GetChannelUserResponse)
	err := c.cc.Invoke(ctx, "/socialsvc.Social/GetChannelUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialClient) GetOpenseaAsset(ctx context.Context, in *GetOpenseaAssetRequest, opts ...grpc.CallOption) (*GetOpenseaAssetResponse, error) {
	out := new(GetOpenseaAssetResponse)
	err := c.cc.Invoke(ctx, "/socialsvc.Social/GetOpenseaAsset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialClient) ListOpenseaAsset(ctx context.Context, in *ListOpenseaAssetRequest, opts ...grpc.CallOption) (*ListOpenseaAssetResponse, error) {
	out := new(ListOpenseaAssetResponse)
	err := c.cc.Invoke(ctx, "/socialsvc.Social/ListOpenseaAsset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialClient) GetOpenseaAssetContract(ctx context.Context, in *GetOpenseaAssetContractRequest, opts ...grpc.CallOption) (*GetOpenseaAssetContractResponse, error) {
	out := new(GetOpenseaAssetContractResponse)
	err := c.cc.Invoke(ctx, "/socialsvc.Social/GetOpenseaAssetContract", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialClient) PageNftAsset(ctx context.Context, in *PageNftAssetRequest, opts ...grpc.CallOption) (*PageNftAssetResponse, error) {
	out := new(PageNftAssetResponse)
	err := c.cc.Invoke(ctx, "/socialsvc.Social/PageNftAsset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialClient) GetNftAsset(ctx context.Context, in *GetNftAssetRequest, opts ...grpc.CallOption) (*GetNftAssetResponse, error) {
	out := new(GetNftAssetResponse)
	err := c.cc.Invoke(ctx, "/socialsvc.Social/GetNftAsset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialClient) PageNftEvent(ctx context.Context, in *PageNftEventRequest, opts ...grpc.CallOption) (*PageNftEventResponse, error) {
	out := new(PageNftEventResponse)
	err := c.cc.Invoke(ctx, "/socialsvc.Social/PageNftEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialClient) UpdateUserConfig(ctx context.Context, in *UpdateUserConfigRequest, opts ...grpc.CallOption) (*UpdateUserConfigResponse, error) {
	out := new(UpdateUserConfigResponse)
	err := c.cc.Invoke(ctx, "/socialsvc.Social/UpdateUserConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialClient) Complaint(ctx context.Context, in *ComplaintRequest, opts ...grpc.CallOption) (*ComplaintResponse, error) {
	out := new(ComplaintResponse)
	err := c.cc.Invoke(ctx, "/socialsvc.Social/Complaint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialClient) GetUserConfig(ctx context.Context, in *GetUserConfigRequest, opts ...grpc.CallOption) (*GetUserConfigResponse, error) {
	out := new(GetUserConfigResponse)
	err := c.cc.Invoke(ctx, "/socialsvc.Social/GetUserConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialClient) UpdateOpenseaNft(ctx context.Context, in *UpdateOpenseaNftRequest, opts ...grpc.CallOption) (*UpdateOpenseaNftResponse, error) {
	out := new(UpdateOpenseaNftResponse)
	err := c.cc.Invoke(ctx, "/socialsvc.Social/UpdateOpenseaNft", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialClient) GetTwitterAuthUrl(ctx context.Context, in *GetTwitterAuthUrlRequest, opts ...grpc.CallOption) (*GetTwitterAuthUrlResponse, error) {
	out := new(GetTwitterAuthUrlResponse)
	err := c.cc.Invoke(ctx, "/socialsvc.Social/GetTwitterAuthUrl", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialClient) GetAirdropInfo(ctx context.Context, in *GetAirdropInfoRequest, opts ...grpc.CallOption) (*GetAirdropInfoResponse, error) {
	out := new(GetAirdropInfoResponse)
	err := c.cc.Invoke(ctx, "/socialsvc.Social/GetAirdropInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialClient) TwitterCallback(ctx context.Context, in *TwitterCallbackRequest, opts ...grpc.CallOption) (*TwitterCallbackResponse, error) {
	out := new(TwitterCallbackResponse)
	err := c.cc.Invoke(ctx, "/socialsvc.Social/TwitterCallback", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialClient) TwitterFollow(ctx context.Context, in *TwitterFollowRequest, opts ...grpc.CallOption) (*TwitterFollowResponse, error) {
	out := new(TwitterFollowResponse)
	err := c.cc.Invoke(ctx, "/socialsvc.Social/TwitterFollow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *socialClient) ReceiveAirdrop(ctx context.Context, in *ReceiveAirdropRequest, opts ...grpc.CallOption) (*ReceiveAirdropResponse, error) {
	out := new(ReceiveAirdropResponse)
	err := c.cc.Invoke(ctx, "/socialsvc.Social/ReceiveAirdrop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SocialServer is the server API for Social service.
type SocialServer interface {
	// SignIn verify the user auth and return a jwt
	SignIn(context.Context, *SignInRequest) (*SignInResponse, error)
	//Find a user info by uid
	FindUser(context.Context, *FindUserRequest) (*FindUserResponse, error)
	FindMisesUser(context.Context, *FindMisesUserRequest) (*FindMisesUserResponse, error)
	//update user info
	UpdateUserProfile(context.Context, *UpdateUserProfileRequest) (*UpdateUserResponse, error)
	//update user avatar
	UpdateUserAvatar(context.Context, *UpdateUserAvatarRequest) (*UpdateUserResponse, error)
	//update user username
	UpdateUserName(context.Context, *UpdateUserNameRequest) (*UpdateUserResponse, error)
	//create new status
	CreateStatus(context.Context, *CreateStatusRequest) (*CreateStatusResponse, error)
	// update status
	UpdateStatus(context.Context, *UpdateStatusRequest) (*UpdateStatusResponse, error)
	//delete a status
	DeleteStatus(context.Context, *DeleteStatusRequest) (*SimpleResponse, error)
	//like a status
	LikeStatus(context.Context, *LikeStatusRequest) (*SimpleResponse, error)
	//unlike a status
	UnLikeStatus(context.Context, *UnLikeStatusRequest) (*SimpleResponse, error)
	// list like status
	ListLikeStatus(context.Context, *ListLikeRequest) (*ListLikeResponse, error)
	//like a nft_asset
	LikeNftAsset(context.Context, *LikeNftAssetRequest) (*SimpleResponse, error)
	//unlike a nft_asset
	UnlikeNftAsset(context.Context, *UnLikeNftAssetRequest) (*SimpleResponse, error)
	//query single status
	GetStatus(context.Context, *GetStatusRequest) (*GetStatusResponse, error)
	//query batch status
	ListStatus(context.Context, *ListStatusRequest) (*ListStatusResponse, error)
	//query batch status
	NewListStatus(context.Context, *NewListStatusRequest) (*NewListStatusResponse, error)
	//query recommended status
	ListRecommended(context.Context, *ListStatusRequest) (*ListStatusResponse, error)
	//query time line
	ListUserTimeline(context.Context, *ListStatusRequest) (*ListStatusResponse, error)
	//query following users order by update time
	LatestFollowing(context.Context, *LatestFollowingRequest) (*LatestFollowingResponse, error)
	//query related users
	ListRelationship(context.Context, *ListRelationshipRequest) (*ListRelationshipResponse, error)
	//like a status
	Follow(context.Context, *FollowRequest) (*SimpleResponse, error)
	//unlike a status
	UnFollow(context.Context, *UnFollowRequest) (*SimpleResponse, error)
	ListMessage(context.Context, *ListMessageRequest) (*ListMessageResponse, error)
	ReadMessage(context.Context, *ReadMessageRequest) (*SimpleResponse, error)
	GetMessageSummary(context.Context, *GetMessageSummaryRequest) (*MessageSummaryResponse, error)
	ListComment(context.Context, *ListCommentRequest) (*ListCommentResponse, error)
	ListLike(context.Context, *ListLikeUserRequest) (*ListLikeUserResponse, error)
	GetComment(context.Context, *GetCommentRequest) (*GetCommentResponse, error)
	NewRecommendStatus(context.Context, *NewRecommendStatusRequest) (*NewRecommendStatusResponse, error)
	CreateComment(context.Context, *CreateCommentRequest) (*CreateCommentResponse, error)
	DeleteComment(context.Context, *DeleteCommentRequest) (*SimpleResponse, error)
	//like a comment
	LikeComment(context.Context, *LikeCommentRequest) (*SimpleResponse, error)
	//unlike a status
	UnlikeComment(context.Context, *UnlikeCommentRequest) (*SimpleResponse, error)
	ListBlacklist(context.Context, *ListBlacklistRequest) (*ListBlacklistResponse, error)
	CreateBlacklist(context.Context, *CreateBlacklistRequest) (*SimpleResponse, error)
	DeleteBlacklist(context.Context, *DeleteBlacklistRequest) (*SimpleResponse, error)
	ShareTweetUrl(context.Context, *ShareTweetUrlRequest) (*ShareTweetUrlResponse, error)
	TwitterAuth(context.Context, *TwitterAuthRequest) (*TwitterAuthResponse, error)
	AirdropTwitter(context.Context, *AirdropTwitterRequest) (*AirdropTwitterResponse, error)
	AirdropChannel(context.Context, *AirdropChannelRequest) (*AirdropChannelResponse, error)
	CreateAirdropTwitter(context.Context, *CreateAirdropTwitterRequest) (*CreateAirdropTwitterResponse, error)
	CreateChannelAirdrop(context.Context, *CreateChannelAirdropRequest) (*CreateChannelAirdropResponse, error)
	UserToChain(context.Context, *UserToChainRequest) (*UserToChainResponse, error)
	ChannelInfo(context.Context, *ChannelInfoRequest) (*ChannelInfoResponse, error)
	PageChannelUser(context.Context, *PageChannelUserRequest) (*PageChannelUserResponse, error)
	GetChannelUser(context.Context, *GetChannelUserRequest) (*GetChannelUserResponse, error)
	GetOpenseaAsset(context.Context, *GetOpenseaAssetRequest) (*GetOpenseaAssetResponse, error)
	ListOpenseaAsset(context.Context, *ListOpenseaAssetRequest) (*ListOpenseaAssetResponse, error)
	GetOpenseaAssetContract(context.Context, *GetOpenseaAssetContractRequest) (*GetOpenseaAssetContractResponse, error)
	PageNftAsset(context.Context, *PageNftAssetRequest) (*PageNftAssetResponse, error)
	GetNftAsset(context.Context, *GetNftAssetRequest) (*GetNftAssetResponse, error)
	PageNftEvent(context.Context, *PageNftEventRequest) (*PageNftEventResponse, error)
	UpdateUserConfig(context.Context, *UpdateUserConfigRequest) (*UpdateUserConfigResponse, error)
	Complaint(context.Context, *ComplaintRequest) (*ComplaintResponse, error)
	GetUserConfig(context.Context, *GetUserConfigRequest) (*GetUserConfigResponse, error)
	UpdateOpenseaNft(context.Context, *UpdateOpenseaNftRequest) (*UpdateOpenseaNftResponse, error)
	GetTwitterAuthUrl(context.Context, *GetTwitterAuthUrlRequest) (*GetTwitterAuthUrlResponse, error)
	GetAirdropInfo(context.Context, *GetAirdropInfoRequest) (*GetAirdropInfoResponse, error)
	TwitterCallback(context.Context, *TwitterCallbackRequest) (*TwitterCallbackResponse, error)
	TwitterFollow(context.Context, *TwitterFollowRequest) (*TwitterFollowResponse, error)
	ReceiveAirdrop(context.Context, *ReceiveAirdropRequest) (*ReceiveAirdropResponse, error)
}

// UnimplementedSocialServer can be embedded to have forward compatible implementations.
type UnimplementedSocialServer struct {
}

func (*UnimplementedSocialServer) SignIn(ctx context.Context, req *SignInRequest) (*SignInResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignIn not implemented")
}
func (*UnimplementedSocialServer) FindUser(ctx context.Context, req *FindUserRequest) (*FindUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindUser not implemented")
}
func (*UnimplementedSocialServer) FindMisesUser(ctx context.Context, req *FindMisesUserRequest) (*FindMisesUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindMisesUser not implemented")
}
func (*UnimplementedSocialServer) UpdateUserProfile(ctx context.Context, req *UpdateUserProfileRequest) (*UpdateUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserProfile not implemented")
}
func (*UnimplementedSocialServer) UpdateUserAvatar(ctx context.Context, req *UpdateUserAvatarRequest) (*UpdateUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserAvatar not implemented")
}
func (*UnimplementedSocialServer) UpdateUserName(ctx context.Context, req *UpdateUserNameRequest) (*UpdateUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserName not implemented")
}
func (*UnimplementedSocialServer) CreateStatus(ctx context.Context, req *CreateStatusRequest) (*CreateStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateStatus not implemented")
}
func (*UnimplementedSocialServer) UpdateStatus(ctx context.Context, req *UpdateStatusRequest) (*UpdateStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStatus not implemented")
}
func (*UnimplementedSocialServer) DeleteStatus(ctx context.Context, req *DeleteStatusRequest) (*SimpleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteStatus not implemented")
}
func (*UnimplementedSocialServer) LikeStatus(ctx context.Context, req *LikeStatusRequest) (*SimpleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LikeStatus not implemented")
}
func (*UnimplementedSocialServer) UnLikeStatus(ctx context.Context, req *UnLikeStatusRequest) (*SimpleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnLikeStatus not implemented")
}
func (*UnimplementedSocialServer) ListLikeStatus(ctx context.Context, req *ListLikeRequest) (*ListLikeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListLikeStatus not implemented")
}
func (*UnimplementedSocialServer) LikeNftAsset(ctx context.Context, req *LikeNftAssetRequest) (*SimpleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LikeNftAsset not implemented")
}
func (*UnimplementedSocialServer) UnlikeNftAsset(ctx context.Context, req *UnLikeNftAssetRequest) (*SimpleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnlikeNftAsset not implemented")
}
func (*UnimplementedSocialServer) GetStatus(ctx context.Context, req *GetStatusRequest) (*GetStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStatus not implemented")
}
func (*UnimplementedSocialServer) ListStatus(ctx context.Context, req *ListStatusRequest) (*ListStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListStatus not implemented")
}
func (*UnimplementedSocialServer) NewListStatus(ctx context.Context, req *NewListStatusRequest) (*NewListStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewListStatus not implemented")
}
func (*UnimplementedSocialServer) ListRecommended(ctx context.Context, req *ListStatusRequest) (*ListStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRecommended not implemented")
}
func (*UnimplementedSocialServer) ListUserTimeline(ctx context.Context, req *ListStatusRequest) (*ListStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUserTimeline not implemented")
}
func (*UnimplementedSocialServer) LatestFollowing(ctx context.Context, req *LatestFollowingRequest) (*LatestFollowingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LatestFollowing not implemented")
}
func (*UnimplementedSocialServer) ListRelationship(ctx context.Context, req *ListRelationshipRequest) (*ListRelationshipResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRelationship not implemented")
}
func (*UnimplementedSocialServer) Follow(ctx context.Context, req *FollowRequest) (*SimpleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Follow not implemented")
}
func (*UnimplementedSocialServer) UnFollow(ctx context.Context, req *UnFollowRequest) (*SimpleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnFollow not implemented")
}
func (*UnimplementedSocialServer) ListMessage(ctx context.Context, req *ListMessageRequest) (*ListMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMessage not implemented")
}
func (*UnimplementedSocialServer) ReadMessage(ctx context.Context, req *ReadMessageRequest) (*SimpleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadMessage not implemented")
}
func (*UnimplementedSocialServer) GetMessageSummary(ctx context.Context, req *GetMessageSummaryRequest) (*MessageSummaryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMessageSummary not implemented")
}
func (*UnimplementedSocialServer) ListComment(ctx context.Context, req *ListCommentRequest) (*ListCommentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListComment not implemented")
}
func (*UnimplementedSocialServer) ListLike(ctx context.Context, req *ListLikeUserRequest) (*ListLikeUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListLike not implemented")
}
func (*UnimplementedSocialServer) GetComment(ctx context.Context, req *GetCommentRequest) (*GetCommentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetComment not implemented")
}
func (*UnimplementedSocialServer) NewRecommendStatus(ctx context.Context, req *NewRecommendStatusRequest) (*NewRecommendStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewRecommendStatus not implemented")
}
func (*UnimplementedSocialServer) CreateComment(ctx context.Context, req *CreateCommentRequest) (*CreateCommentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateComment not implemented")
}
func (*UnimplementedSocialServer) DeleteComment(ctx context.Context, req *DeleteCommentRequest) (*SimpleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteComment not implemented")
}
func (*UnimplementedSocialServer) LikeComment(ctx context.Context, req *LikeCommentRequest) (*SimpleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LikeComment not implemented")
}
func (*UnimplementedSocialServer) UnlikeComment(ctx context.Context, req *UnlikeCommentRequest) (*SimpleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnlikeComment not implemented")
}
func (*UnimplementedSocialServer) ListBlacklist(ctx context.Context, req *ListBlacklistRequest) (*ListBlacklistResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBlacklist not implemented")
}
func (*UnimplementedSocialServer) CreateBlacklist(ctx context.Context, req *CreateBlacklistRequest) (*SimpleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBlacklist not implemented")
}
func (*UnimplementedSocialServer) DeleteBlacklist(ctx context.Context, req *DeleteBlacklistRequest) (*SimpleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBlacklist not implemented")
}
func (*UnimplementedSocialServer) ShareTweetUrl(ctx context.Context, req *ShareTweetUrlRequest) (*ShareTweetUrlResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShareTweetUrl not implemented")
}
func (*UnimplementedSocialServer) TwitterAuth(ctx context.Context, req *TwitterAuthRequest) (*TwitterAuthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TwitterAuth not implemented")
}
func (*UnimplementedSocialServer) AirdropTwitter(ctx context.Context, req *AirdropTwitterRequest) (*AirdropTwitterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AirdropTwitter not implemented")
}
func (*UnimplementedSocialServer) AirdropChannel(ctx context.Context, req *AirdropChannelRequest) (*AirdropChannelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AirdropChannel not implemented")
}
func (*UnimplementedSocialServer) CreateAirdropTwitter(ctx context.Context, req *CreateAirdropTwitterRequest) (*CreateAirdropTwitterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAirdropTwitter not implemented")
}
func (*UnimplementedSocialServer) CreateChannelAirdrop(ctx context.Context, req *CreateChannelAirdropRequest) (*CreateChannelAirdropResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateChannelAirdrop not implemented")
}
func (*UnimplementedSocialServer) UserToChain(ctx context.Context, req *UserToChainRequest) (*UserToChainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserToChain not implemented")
}
func (*UnimplementedSocialServer) ChannelInfo(ctx context.Context, req *ChannelInfoRequest) (*ChannelInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelInfo not implemented")
}
func (*UnimplementedSocialServer) PageChannelUser(ctx context.Context, req *PageChannelUserRequest) (*PageChannelUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PageChannelUser not implemented")
}
func (*UnimplementedSocialServer) GetChannelUser(ctx context.Context, req *GetChannelUserRequest) (*GetChannelUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChannelUser not implemented")
}
func (*UnimplementedSocialServer) GetOpenseaAsset(ctx context.Context, req *GetOpenseaAssetRequest) (*GetOpenseaAssetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOpenseaAsset not implemented")
}
func (*UnimplementedSocialServer) ListOpenseaAsset(ctx context.Context, req *ListOpenseaAssetRequest) (*ListOpenseaAssetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOpenseaAsset not implemented")
}
func (*UnimplementedSocialServer) GetOpenseaAssetContract(ctx context.Context, req *GetOpenseaAssetContractRequest) (*GetOpenseaAssetContractResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOpenseaAssetContract not implemented")
}
func (*UnimplementedSocialServer) PageNftAsset(ctx context.Context, req *PageNftAssetRequest) (*PageNftAssetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PageNftAsset not implemented")
}
func (*UnimplementedSocialServer) GetNftAsset(ctx context.Context, req *GetNftAssetRequest) (*GetNftAssetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNftAsset not implemented")
}
func (*UnimplementedSocialServer) PageNftEvent(ctx context.Context, req *PageNftEventRequest) (*PageNftEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PageNftEvent not implemented")
}
func (*UnimplementedSocialServer) UpdateUserConfig(ctx context.Context, req *UpdateUserConfigRequest) (*UpdateUserConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserConfig not implemented")
}
func (*UnimplementedSocialServer) Complaint(ctx context.Context, req *ComplaintRequest) (*ComplaintResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Complaint not implemented")
}
func (*UnimplementedSocialServer) GetUserConfig(ctx context.Context, req *GetUserConfigRequest) (*GetUserConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserConfig not implemented")
}
func (*UnimplementedSocialServer) UpdateOpenseaNft(ctx context.Context, req *UpdateOpenseaNftRequest) (*UpdateOpenseaNftResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOpenseaNft not implemented")
}
func (*UnimplementedSocialServer) GetTwitterAuthUrl(ctx context.Context, req *GetTwitterAuthUrlRequest) (*GetTwitterAuthUrlResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTwitterAuthUrl not implemented")
}
func (*UnimplementedSocialServer) GetAirdropInfo(ctx context.Context, req *GetAirdropInfoRequest) (*GetAirdropInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAirdropInfo not implemented")
}
func (*UnimplementedSocialServer) TwitterCallback(ctx context.Context, req *TwitterCallbackRequest) (*TwitterCallbackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TwitterCallback not implemented")
}
func (*UnimplementedSocialServer) TwitterFollow(ctx context.Context, req *TwitterFollowRequest) (*TwitterFollowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TwitterFollow not implemented")
}
func (*UnimplementedSocialServer) ReceiveAirdrop(ctx context.Context, req *ReceiveAirdropRequest) (*ReceiveAirdropResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReceiveAirdrop not implemented")
}

func RegisterSocialServer(s *grpc.Server, srv SocialServer) {
	s.RegisterService(&_Social_serviceDesc, srv)
}

func _Social_SignIn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignInRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServer).SignIn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/socialsvc.Social/SignIn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServer).SignIn(ctx, req.(*SignInRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Social_FindUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServer).FindUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/socialsvc.Social/FindUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServer).FindUser(ctx, req.(*FindUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Social_FindMisesUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindMisesUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServer).FindMisesUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/socialsvc.Social/FindMisesUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServer).FindMisesUser(ctx, req.(*FindMisesUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Social_UpdateUserProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServer).UpdateUserProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/socialsvc.Social/UpdateUserProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServer).UpdateUserProfile(ctx, req.(*UpdateUserProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Social_UpdateUserAvatar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserAvatarRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServer).UpdateUserAvatar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/socialsvc.Social/UpdateUserAvatar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServer).UpdateUserAvatar(ctx, req.(*UpdateUserAvatarRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Social_UpdateUserName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServer).UpdateUserName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/socialsvc.Social/UpdateUserName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServer).UpdateUserName(ctx, req.(*UpdateUserNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Social_CreateStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServer).CreateStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/socialsvc.Social/CreateStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServer).CreateStatus(ctx, req.(*CreateStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Social_UpdateStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServer).UpdateStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/socialsvc.Social/UpdateStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServer).UpdateStatus(ctx, req.(*UpdateStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Social_DeleteStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServer).DeleteStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/socialsvc.Social/DeleteStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServer).DeleteStatus(ctx, req.(*DeleteStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Social_LikeStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LikeStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServer).LikeStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/socialsvc.Social/LikeStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServer).LikeStatus(ctx, req.(*LikeStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Social_UnLikeStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnLikeStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServer).UnLikeStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/socialsvc.Social/UnLikeStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServer).UnLikeStatus(ctx, req.(*UnLikeStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Social_ListLikeStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListLikeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServer).ListLikeStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/socialsvc.Social/ListLikeStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServer).ListLikeStatus(ctx, req.(*ListLikeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Social_LikeNftAsset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LikeNftAssetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServer).LikeNftAsset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/socialsvc.Social/LikeNftAsset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServer).LikeNftAsset(ctx, req.(*LikeNftAssetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Social_UnlikeNftAsset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnLikeNftAssetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServer).UnlikeNftAsset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/socialsvc.Social/UnlikeNftAsset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServer).UnlikeNftAsset(ctx, req.(*UnLikeNftAssetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Social_GetStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServer).GetStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/socialsvc.Social/GetStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServer).GetStatus(ctx, req.(*GetStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Social_ListStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServer).ListStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/socialsvc.Social/ListStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServer).ListStatus(ctx, req.(*ListStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Social_NewListStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewListStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServer).NewListStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/socialsvc.Social/NewListStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServer).NewListStatus(ctx, req.(*NewListStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Social_ListRecommended_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServer).ListRecommended(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/socialsvc.Social/ListRecommended",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServer).ListRecommended(ctx, req.(*ListStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Social_ListUserTimeline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServer).ListUserTimeline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/socialsvc.Social/ListUserTimeline",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServer).ListUserTimeline(ctx, req.(*ListStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Social_LatestFollowing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LatestFollowingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServer).LatestFollowing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/socialsvc.Social/LatestFollowing",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServer).LatestFollowing(ctx, req.(*LatestFollowingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Social_ListRelationship_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRelationshipRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServer).ListRelationship(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/socialsvc.Social/ListRelationship",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServer).ListRelationship(ctx, req.(*ListRelationshipRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Social_Follow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FollowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServer).Follow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/socialsvc.Social/Follow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServer).Follow(ctx, req.(*FollowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Social_UnFollow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnFollowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServer).UnFollow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/socialsvc.Social/UnFollow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServer).UnFollow(ctx, req.(*UnFollowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Social_ListMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServer).ListMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/socialsvc.Social/ListMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServer).ListMessage(ctx, req.(*ListMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Social_ReadMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServer).ReadMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/socialsvc.Social/ReadMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServer).ReadMessage(ctx, req.(*ReadMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Social_GetMessageSummary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMessageSummaryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServer).GetMessageSummary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/socialsvc.Social/GetMessageSummary",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServer).GetMessageSummary(ctx, req.(*GetMessageSummaryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Social_ListComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServer).ListComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/socialsvc.Social/ListComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServer).ListComment(ctx, req.(*ListCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Social_ListLike_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListLikeUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServer).ListLike(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/socialsvc.Social/ListLike",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServer).ListLike(ctx, req.(*ListLikeUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Social_GetComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServer).GetComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/socialsvc.Social/GetComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServer).GetComment(ctx, req.(*GetCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Social_NewRecommendStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewRecommendStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServer).NewRecommendStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/socialsvc.Social/NewRecommendStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServer).NewRecommendStatus(ctx, req.(*NewRecommendStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Social_CreateComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServer).CreateComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/socialsvc.Social/CreateComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServer).CreateComment(ctx, req.(*CreateCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Social_DeleteComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServer).DeleteComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/socialsvc.Social/DeleteComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServer).DeleteComment(ctx, req.(*DeleteCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Social_LikeComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LikeCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServer).LikeComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/socialsvc.Social/LikeComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServer).LikeComment(ctx, req.(*LikeCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Social_UnlikeComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnlikeCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServer).UnlikeComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/socialsvc.Social/UnlikeComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServer).UnlikeComment(ctx, req.(*UnlikeCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Social_ListBlacklist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBlacklistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServer).ListBlacklist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/socialsvc.Social/ListBlacklist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServer).ListBlacklist(ctx, req.(*ListBlacklistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Social_CreateBlacklist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBlacklistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServer).CreateBlacklist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/socialsvc.Social/CreateBlacklist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServer).CreateBlacklist(ctx, req.(*CreateBlacklistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Social_DeleteBlacklist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBlacklistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServer).DeleteBlacklist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/socialsvc.Social/DeleteBlacklist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServer).DeleteBlacklist(ctx, req.(*DeleteBlacklistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Social_ShareTweetUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShareTweetUrlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServer).ShareTweetUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/socialsvc.Social/ShareTweetUrl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServer).ShareTweetUrl(ctx, req.(*ShareTweetUrlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Social_TwitterAuth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TwitterAuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServer).TwitterAuth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/socialsvc.Social/TwitterAuth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServer).TwitterAuth(ctx, req.(*TwitterAuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Social_AirdropTwitter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AirdropTwitterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServer).AirdropTwitter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/socialsvc.Social/AirdropTwitter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServer).AirdropTwitter(ctx, req.(*AirdropTwitterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Social_AirdropChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AirdropChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServer).AirdropChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/socialsvc.Social/AirdropChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServer).AirdropChannel(ctx, req.(*AirdropChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Social_CreateAirdropTwitter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAirdropTwitterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServer).CreateAirdropTwitter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/socialsvc.Social/CreateAirdropTwitter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServer).CreateAirdropTwitter(ctx, req.(*CreateAirdropTwitterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Social_CreateChannelAirdrop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateChannelAirdropRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServer).CreateChannelAirdrop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/socialsvc.Social/CreateChannelAirdrop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServer).CreateChannelAirdrop(ctx, req.(*CreateChannelAirdropRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Social_UserToChain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserToChainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServer).UserToChain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/socialsvc.Social/UserToChain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServer).UserToChain(ctx, req.(*UserToChainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Social_ChannelInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChannelInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServer).ChannelInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/socialsvc.Social/ChannelInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServer).ChannelInfo(ctx, req.(*ChannelInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Social_PageChannelUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PageChannelUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServer).PageChannelUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/socialsvc.Social/PageChannelUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServer).PageChannelUser(ctx, req.(*PageChannelUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Social_GetChannelUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChannelUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServer).GetChannelUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/socialsvc.Social/GetChannelUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServer).GetChannelUser(ctx, req.(*GetChannelUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Social_GetOpenseaAsset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOpenseaAssetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServer).GetOpenseaAsset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/socialsvc.Social/GetOpenseaAsset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServer).GetOpenseaAsset(ctx, req.(*GetOpenseaAssetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Social_ListOpenseaAsset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOpenseaAssetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServer).ListOpenseaAsset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/socialsvc.Social/ListOpenseaAsset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServer).ListOpenseaAsset(ctx, req.(*ListOpenseaAssetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Social_GetOpenseaAssetContract_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOpenseaAssetContractRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServer).GetOpenseaAssetContract(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/socialsvc.Social/GetOpenseaAssetContract",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServer).GetOpenseaAssetContract(ctx, req.(*GetOpenseaAssetContractRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Social_PageNftAsset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PageNftAssetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServer).PageNftAsset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/socialsvc.Social/PageNftAsset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServer).PageNftAsset(ctx, req.(*PageNftAssetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Social_GetNftAsset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNftAssetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServer).GetNftAsset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/socialsvc.Social/GetNftAsset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServer).GetNftAsset(ctx, req.(*GetNftAssetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Social_PageNftEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PageNftEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServer).PageNftEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/socialsvc.Social/PageNftEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServer).PageNftEvent(ctx, req.(*PageNftEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Social_UpdateUserConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServer).UpdateUserConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/socialsvc.Social/UpdateUserConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServer).UpdateUserConfig(ctx, req.(*UpdateUserConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Social_Complaint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ComplaintRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServer).Complaint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/socialsvc.Social/Complaint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServer).Complaint(ctx, req.(*ComplaintRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Social_GetUserConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServer).GetUserConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/socialsvc.Social/GetUserConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServer).GetUserConfig(ctx, req.(*GetUserConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Social_UpdateOpenseaNft_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOpenseaNftRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServer).UpdateOpenseaNft(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/socialsvc.Social/UpdateOpenseaNft",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServer).UpdateOpenseaNft(ctx, req.(*UpdateOpenseaNftRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Social_GetTwitterAuthUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTwitterAuthUrlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServer).GetTwitterAuthUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/socialsvc.Social/GetTwitterAuthUrl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServer).GetTwitterAuthUrl(ctx, req.(*GetTwitterAuthUrlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Social_GetAirdropInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAirdropInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServer).GetAirdropInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/socialsvc.Social/GetAirdropInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServer).GetAirdropInfo(ctx, req.(*GetAirdropInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Social_TwitterCallback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TwitterCallbackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServer).TwitterCallback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/socialsvc.Social/TwitterCallback",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServer).TwitterCallback(ctx, req.(*TwitterCallbackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Social_TwitterFollow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TwitterFollowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServer).TwitterFollow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/socialsvc.Social/TwitterFollow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServer).TwitterFollow(ctx, req.(*TwitterFollowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Social_ReceiveAirdrop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReceiveAirdropRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SocialServer).ReceiveAirdrop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/socialsvc.Social/ReceiveAirdrop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SocialServer).ReceiveAirdrop(ctx, req.(*ReceiveAirdropRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Social_serviceDesc = grpc.ServiceDesc{
	ServiceName: "socialsvc.Social",
	HandlerType: (*SocialServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SignIn",
			Handler:    _Social_SignIn_Handler,
		},
		{
			MethodName: "FindUser",
			Handler:    _Social_FindUser_Handler,
		},
		{
			MethodName: "FindMisesUser",
			Handler:    _Social_FindMisesUser_Handler,
		},
		{
			MethodName: "UpdateUserProfile",
			Handler:    _Social_UpdateUserProfile_Handler,
		},
		{
			MethodName: "UpdateUserAvatar",
			Handler:    _Social_UpdateUserAvatar_Handler,
		},
		{
			MethodName: "UpdateUserName",
			Handler:    _Social_UpdateUserName_Handler,
		},
		{
			MethodName: "CreateStatus",
			Handler:    _Social_CreateStatus_Handler,
		},
		{
			MethodName: "UpdateStatus",
			Handler:    _Social_UpdateStatus_Handler,
		},
		{
			MethodName: "DeleteStatus",
			Handler:    _Social_DeleteStatus_Handler,
		},
		{
			MethodName: "LikeStatus",
			Handler:    _Social_LikeStatus_Handler,
		},
		{
			MethodName: "UnLikeStatus",
			Handler:    _Social_UnLikeStatus_Handler,
		},
		{
			MethodName: "ListLikeStatus",
			Handler:    _Social_ListLikeStatus_Handler,
		},
		{
			MethodName: "LikeNftAsset",
			Handler:    _Social_LikeNftAsset_Handler,
		},
		{
			MethodName: "UnlikeNftAsset",
			Handler:    _Social_UnlikeNftAsset_Handler,
		},
		{
			MethodName: "GetStatus",
			Handler:    _Social_GetStatus_Handler,
		},
		{
			MethodName: "ListStatus",
			Handler:    _Social_ListStatus_Handler,
		},
		{
			MethodName: "NewListStatus",
			Handler:    _Social_NewListStatus_Handler,
		},
		{
			MethodName: "ListRecommended",
			Handler:    _Social_ListRecommended_Handler,
		},
		{
			MethodName: "ListUserTimeline",
			Handler:    _Social_ListUserTimeline_Handler,
		},
		{
			MethodName: "LatestFollowing",
			Handler:    _Social_LatestFollowing_Handler,
		},
		{
			MethodName: "ListRelationship",
			Handler:    _Social_ListRelationship_Handler,
		},
		{
			MethodName: "Follow",
			Handler:    _Social_Follow_Handler,
		},
		{
			MethodName: "UnFollow",
			Handler:    _Social_UnFollow_Handler,
		},
		{
			MethodName: "ListMessage",
			Handler:    _Social_ListMessage_Handler,
		},
		{
			MethodName: "ReadMessage",
			Handler:    _Social_ReadMessage_Handler,
		},
		{
			MethodName: "GetMessageSummary",
			Handler:    _Social_GetMessageSummary_Handler,
		},
		{
			MethodName: "ListComment",
			Handler:    _Social_ListComment_Handler,
		},
		{
			MethodName: "ListLike",
			Handler:    _Social_ListLike_Handler,
		},
		{
			MethodName: "GetComment",
			Handler:    _Social_GetComment_Handler,
		},
		{
			MethodName: "NewRecommendStatus",
			Handler:    _Social_NewRecommendStatus_Handler,
		},
		{
			MethodName: "CreateComment",
			Handler:    _Social_CreateComment_Handler,
		},
		{
			MethodName: "DeleteComment",
			Handler:    _Social_DeleteComment_Handler,
		},
		{
			MethodName: "LikeComment",
			Handler:    _Social_LikeComment_Handler,
		},
		{
			MethodName: "UnlikeComment",
			Handler:    _Social_UnlikeComment_Handler,
		},
		{
			MethodName: "ListBlacklist",
			Handler:    _Social_ListBlacklist_Handler,
		},
		{
			MethodName: "CreateBlacklist",
			Handler:    _Social_CreateBlacklist_Handler,
		},
		{
			MethodName: "DeleteBlacklist",
			Handler:    _Social_DeleteBlacklist_Handler,
		},
		{
			MethodName: "ShareTweetUrl",
			Handler:    _Social_ShareTweetUrl_Handler,
		},
		{
			MethodName: "TwitterAuth",
			Handler:    _Social_TwitterAuth_Handler,
		},
		{
			MethodName: "AirdropTwitter",
			Handler:    _Social_AirdropTwitter_Handler,
		},
		{
			MethodName: "AirdropChannel",
			Handler:    _Social_AirdropChannel_Handler,
		},
		{
			MethodName: "CreateAirdropTwitter",
			Handler:    _Social_CreateAirdropTwitter_Handler,
		},
		{
			MethodName: "CreateChannelAirdrop",
			Handler:    _Social_CreateChannelAirdrop_Handler,
		},
		{
			MethodName: "UserToChain",
			Handler:    _Social_UserToChain_Handler,
		},
		{
			MethodName: "ChannelInfo",
			Handler:    _Social_ChannelInfo_Handler,
		},
		{
			MethodName: "PageChannelUser",
			Handler:    _Social_PageChannelUser_Handler,
		},
		{
			MethodName: "GetChannelUser",
			Handler:    _Social_GetChannelUser_Handler,
		},
		{
			MethodName: "GetOpenseaAsset",
			Handler:    _Social_GetOpenseaAsset_Handler,
		},
		{
			MethodName: "ListOpenseaAsset",
			Handler:    _Social_ListOpenseaAsset_Handler,
		},
		{
			MethodName: "GetOpenseaAssetContract",
			Handler:    _Social_GetOpenseaAssetContract_Handler,
		},
		{
			MethodName: "PageNftAsset",
			Handler:    _Social_PageNftAsset_Handler,
		},
		{
			MethodName: "GetNftAsset",
			Handler:    _Social_GetNftAsset_Handler,
		},
		{
			MethodName: "PageNftEvent",
			Handler:    _Social_PageNftEvent_Handler,
		},
		{
			MethodName: "UpdateUserConfig",
			Handler:    _Social_UpdateUserConfig_Handler,
		},
		{
			MethodName: "Complaint",
			Handler:    _Social_Complaint_Handler,
		},
		{
			MethodName: "GetUserConfig",
			Handler:    _Social_GetUserConfig_Handler,
		},
		{
			MethodName: "UpdateOpenseaNft",
			Handler:    _Social_UpdateOpenseaNft_Handler,
		},
		{
			MethodName: "GetTwitterAuthUrl",
			Handler:    _Social_GetTwitterAuthUrl_Handler,
		},
		{
			MethodName: "GetAirdropInfo",
			Handler:    _Social_GetAirdropInfo_Handler,
		},
		{
			MethodName: "TwitterCallback",
			Handler:    _Social_TwitterCallback_Handler,
		},
		{
			MethodName: "TwitterFollow",
			Handler:    _Social_TwitterFollow_Handler,
		},
		{
			MethodName: "ReceiveAirdrop",
			Handler:    _Social_ReceiveAirdrop_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "socialsvc.proto",
}

func (m *SignInRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SignInRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Auth) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(len(m.Auth)))
		i += copy(dAtA[i:], m.Auth)
	}
	if len(m.Referrer) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(len(m.Referrer)))
		i += copy(dAtA[i:], m.Referrer)
	}
	return i, nil
}

func (m *SignInResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SignInResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.Code))
	}
	if len(m.Jwt) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(len(m.Jwt)))
		i += copy(dAtA[i:], m.Jwt)
	}
	if m.IsCreated {
		dAtA[i] = 0x18
		i++
		if m.IsCreated {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *ComplaintRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ComplaintRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CurrentUid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.CurrentUid))
	}
	if len(m.TargetType) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(len(m.TargetType)))
		i += copy(dAtA[i:], m.TargetType)
	}
	if len(m.TargetId) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(len(m.TargetId)))
		i += copy(dAtA[i:], m.TargetId)
	}
	if len(m.Reason) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(len(m.Reason)))
		i += copy(dAtA[i:], m.Reason)
	}
	return i, nil
}

func (m *ComplaintResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ComplaintResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.Code))
	}
	return i, nil
}

func (m *UserAvatar) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserAvatar) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Small) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(len(m.Small)))
		i += copy(dAtA[i:], m.Small)
	}
	if len(m.Medium) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(len(m.Medium)))
		i += copy(dAtA[i:], m.Medium)
	}
	if len(m.Large) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(len(m.Large)))
		i += copy(dAtA[i:], m.Large)
	}
	if len(m.NftAssetId) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(len(m.NftAssetId)))
		i += copy(dAtA[i:], m.NftAssetId)
	}
	return i, nil
}

func (m *UserInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Uid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.Uid))
	}
	if len(m.Username) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(len(m.Username)))
		i += copy(dAtA[i:], m.Username)
	}
	if len(m.Misesid) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(len(m.Misesid)))
		i += copy(dAtA[i:], m.Misesid)
	}
	if len(m.Gender) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(len(m.Gender)))
		i += copy(dAtA[i:], m.Gender)
	}
	if len(m.Mobile) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(len(m.Mobile)))
		i += copy(dAtA[i:], m.Mobile)
	}
	if len(m.Email) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(len(m.Email)))
		i += copy(dAtA[i:], m.Email)
	}
	if len(m.Address) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(len(m.Address)))
		i += copy(dAtA[i:], m.Address)
	}
	if len(m.Avatar) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(len(m.Avatar)))
		i += copy(dAtA[i:], m.Avatar)
	}
	if m.IsFollowed {
		dAtA[i] = 0x48
		i++
		if m.IsFollowed {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.IsBlocked {
		dAtA[i] = 0x50
		i++
		if m.IsBlocked {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.FollowingsCount != 0 {
		dAtA[i] = 0x58
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.FollowingsCount))
	}
	if m.FansCount != 0 {
		dAtA[i] = 0x60
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.FansCount))
	}
	if m.LikedCount != 0 {
		dAtA[i] = 0x68
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.LikedCount))
	}
	if m.NewFansCount != 0 {
		dAtA[i] = 0x70
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.NewFansCount))
	}
	if m.AvatarUrl != nil {
		dAtA[i] = 0x7a
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.AvatarUrl.Size()))
		n1, err1 := m.AvatarUrl.MarshalTo(dAtA[i:])
		if err1 != nil {
			return 0, err1
		}
		i += n1
	}
	if m.IsAirdropped {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x1
		i++
		if m.IsAirdropped {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.AirdropStatus {
		dAtA[i] = 0x88
		i++
		dAtA[i] = 0x1
		i++
		if m.AirdropStatus {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.IsLogined {
		dAtA[i] = 0x90
		i++
		dAtA[i] = 0x1
		i++
		if m.IsLogined {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.HelpMisesid) > 0 {
		dAtA[i] = 0x9a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(len(m.HelpMisesid)))
		i += copy(dAtA[i:], m.HelpMisesid)
	}
	if len(m.Intro) > 0 {
		dAtA[i] = 0xa2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(len(m.Intro)))
		i += copy(dAtA[i:], m.Intro)
	}
	return i, nil
}

func (m *FindMisesUserRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FindMisesUserRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Misesid) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(len(m.Misesid)))
		i += copy(dAtA[i:], m.Misesid)
	}
	if m.CurrentUid != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.CurrentUid))
	}
	return i, nil
}

func (m *FindMisesUserResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FindMisesUserResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.Code))
	}
	if m.User != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.User.Size()))
		n2, err2 := m.User.MarshalTo(dAtA[i:])
		if err2 != nil {
			return 0, err2
		}
		i += n2
	}
	if m.IsFollowed {
		dAtA[i] = 0x18
		i++
		if m.IsFollowed {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *FindUserRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FindUserRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Uid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.Uid))
	}
	if m.CurrentUid != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.CurrentUid))
	}
	return i, nil
}

func (m *FindUserResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FindUserResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.Code))
	}
	if m.User != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.User.Size()))
		n3, err3 := m.User.MarshalTo(dAtA[i:])
		if err3 != nil {
			return 0, err3
		}
		i += n3
	}
	if m.IsFollowed {
		dAtA[i] = 0x18
		i++
		if m.IsFollowed {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *UpdateUserProfileRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateUserProfileRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Uid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.Uid))
	}
	if len(m.Gender) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(len(m.Gender)))
		i += copy(dAtA[i:], m.Gender)
	}
	if len(m.Mobile) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(len(m.Mobile)))
		i += copy(dAtA[i:], m.Mobile)
	}
	if len(m.Email) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(len(m.Email)))
		i += copy(dAtA[i:], m.Email)
	}
	if len(m.Address) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(len(m.Address)))
		i += copy(dAtA[i:], m.Address)
	}
	if len(m.Intro) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(len(m.Intro)))
		i += copy(dAtA[i:], m.Intro)
	}
	return i, nil
}

func (m *UpdateUserAvatarRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateUserAvatarRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Uid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.Uid))
	}
	if len(m.AttachmentPath) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(len(m.AttachmentPath)))
		i += copy(dAtA[i:], m.AttachmentPath)
	}
	if len(m.NftAssetId) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(len(m.NftAssetId)))
		i += copy(dAtA[i:], m.NftAssetId)
	}
	return i, nil
}

func (m *UpdateUserNameRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateUserNameRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Uid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.Uid))
	}
	if len(m.Username) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(len(m.Username)))
		i += copy(dAtA[i:], m.Username)
	}
	return i, nil
}

func (m *UpdateUserResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateUserResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.Code))
	}
	if m.User != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.User.Size()))
		n4, err4 := m.User.MarshalTo(dAtA[i:])
		if err4 != nil {
			return 0, err4
		}
		i += n4
	}
	return i, nil
}

func (m *LinkMetaInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LinkMetaInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Title) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(len(m.Title)))
		i += copy(dAtA[i:], m.Title)
	}
	if len(m.Host) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(len(m.Host)))
		i += copy(dAtA[i:], m.Host)
	}
	if len(m.Link) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(len(m.Link)))
		i += copy(dAtA[i:], m.Link)
	}
	if len(m.ImagePath) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(len(m.ImagePath)))
		i += copy(dAtA[i:], m.ImagePath)
	}
	if len(m.ImageUrl) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(len(m.ImageUrl)))
		i += copy(dAtA[i:], m.ImageUrl)
	}
	return i, nil
}

func (m *ImageMetaInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ImageMetaInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Images) > 0 {
		for _, s := range m.Images {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.ThumbImages) > 0 {
		for _, s := range m.ThumbImages {
			dAtA[i] = 0x12
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *StatusInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StatusInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if m.User != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.User.Size()))
		n5, err5 := m.User.MarshalTo(dAtA[i:])
		if err5 != nil {
			return 0, err5
		}
		i += n5
	}
	if len(m.Content) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(len(m.Content)))
		i += copy(dAtA[i:], m.Content)
	}
	if len(m.FromType) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(len(m.FromType)))
		i += copy(dAtA[i:], m.FromType)
	}
	if len(m.StatusType) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(len(m.StatusType)))
		i += copy(dAtA[i:], m.StatusType)
	}
	if m.Parent != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.Parent.Size()))
		n6, err6 := m.Parent.MarshalTo(dAtA[i:])
		if err6 != nil {
			return 0, err6
		}
		i += n6
	}
	if m.Origin != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.Origin.Size()))
		n7, err7 := m.Origin.MarshalTo(dAtA[i:])
		if err7 != nil {
			return 0, err7
		}
		i += n7
	}
	if m.CommentCount != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.CommentCount))
	}
	if m.LikeCount != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.LikeCount))
	}
	if m.ForwardCount != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.ForwardCount))
	}
	if m.IsLiked {
		dAtA[i] = 0x58
		i++
		if m.IsLiked {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.LinkMeta != nil {
		dAtA[i] = 0x62
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.LinkMeta.Size()))
		n8, err8 := m.LinkMeta.MarshalTo(dAtA[i:])
		if err8 != nil {
			return 0, err8
		}
		i += n8
	}
	if m.CreatedAt != 0 {
		dAtA[i] = 0x68
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.CreatedAt))
	}
	if m.ImageMeta != nil {
		dAtA[i] = 0x72
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.ImageMeta.Size()))
		n9, err9 := m.ImageMeta.MarshalTo(dAtA[i:])
		if err9 != nil {
			return 0, err9
		}
		i += n9
	}
	if m.IsPublic {
		dAtA[i] = 0x78
		i++
		if m.IsPublic {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.HideTime != 0 {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.HideTime))
	}
	if m.ParentStatusIsDeleted {
		dAtA[i] = 0x88
		i++
		dAtA[i] = 0x1
		i++
		if m.ParentStatusIsDeleted {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.ParentStatusIsBlacked {
		dAtA[i] = 0x90
		i++
		dAtA[i] = 0x1
		i++
		if m.ParentStatusIsBlacked {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *GetStatusRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetStatusRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CurrentUid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.CurrentUid))
	}
	if len(m.Statusid) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(len(m.Statusid)))
		i += copy(dAtA[i:], m.Statusid)
	}
	return i, nil
}

func (m *GetStatusResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetStatusResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.Code))
	}
	if m.Status != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.Status.Size()))
		n10, err10 := m.Status.MarshalTo(dAtA[i:])
		if err10 != nil {
			return 0, err10
		}
		i += n10
	}
	return i, nil
}

func (m *PageQuick) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PageQuick) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Limit != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.Limit))
	}
	if len(m.NextId) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(len(m.NextId)))
		i += copy(dAtA[i:], m.NextId)
	}
	if m.Total != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.Total))
	}
	return i, nil
}

func (m *Page) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Page) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.TotalRecords != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.TotalRecords))
	}
	if m.PageSize != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.PageSize))
	}
	if m.PageNum != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.PageNum))
	}
	if m.TotalPage != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.TotalPage))
	}
	return i, nil
}

func (m *ListStatusRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListStatusRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CurrentUid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.CurrentUid))
	}
	if m.TargetUid != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.TargetUid))
	}
	if len(m.ParentId) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(len(m.ParentId)))
		i += copy(dAtA[i:], m.ParentId)
	}
	if len(m.FromTypes) > 0 {
		for _, s := range m.FromTypes {
			dAtA[i] = 0x22
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.Paginator != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.Paginator.Size()))
		n11, err11 := m.Paginator.MarshalTo(dAtA[i:])
		if err11 != nil {
			return 0, err11
		}
		i += n11
	}
	return i, nil
}

func (m *ListStatusResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListStatusResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.Code))
	}
	if len(m.Statuses) > 0 {
		for _, msg := range m.Statuses {
			dAtA[i] = 0x12
			i++
			i = encodeVarintSocialsvc(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Paginator != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.Paginator.Size()))
		n12, err12 := m.Paginator.MarshalTo(dAtA[i:])
		if err12 != nil {
			return 0, err12
		}
		i += n12
	}
	return i, nil
}

func (m *PageChannelUserRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PageChannelUserRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Misesid) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(len(m.Misesid)))
		i += copy(dAtA[i:], m.Misesid)
	}
	if m.Paginator != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.Paginator.Size()))
		n13, err13 := m.Paginator.MarshalTo(dAtA[i:])
		if err13 != nil {
			return 0, err13
		}
		i += n13
	}
	return i, nil
}

func (m *ChannelUserInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChannelUserInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if len(m.ChannelId) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(len(m.ChannelId)))
		i += copy(dAtA[i:], m.ChannelId)
	}
	if m.ValidState != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.ValidState))
	}
	if m.Amount != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.Amount))
	}
	if len(m.TxId) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(len(m.TxId)))
		i += copy(dAtA[i:], m.TxId)
	}
	if m.User != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.User.Size()))
		n14, err14 := m.User.MarshalTo(dAtA[i:])
		if err14 != nil {
			return 0, err14
		}
		i += n14
	}
	if m.AirdropState != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.AirdropState))
	}
	if m.AirdropTime != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.AirdropTime))
	}
	if m.CreatedAt != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.CreatedAt))
	}
	if m.ChannelUid != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.ChannelUid))
	}
	if len(m.ChannelMisesid) > 0 {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(len(m.ChannelMisesid)))
		i += copy(dAtA[i:], m.ChannelMisesid)
	}
	return i, nil
}

func (m *PageChannelUserResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PageChannelUserResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.Code))
	}
	if len(m.ChannelUsers) > 0 {
		for _, msg := range m.ChannelUsers {
			dAtA[i] = 0x12
			i++
			i = encodeVarintSocialsvc(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Paginator != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.Paginator.Size()))
		n15, err15 := m.Paginator.MarshalTo(dAtA[i:])
		if err15 != nil {
			return 0, err15
		}
		i += n15
	}
	return i, nil
}

func (m *NewListStatusRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NewListStatusRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CurrentUid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.CurrentUid))
	}
	if m.TargetUid != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.TargetUid))
	}
	if len(m.Ids) > 0 {
		for _, s := range m.Ids {
			dAtA[i] = 0x1a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.ListNum != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.ListNum))
	}
	if len(m.FromTypes) > 0 {
		for _, s := range m.FromTypes {
			dAtA[i] = 0x2a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *NewListStatusResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NewListStatusResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.Code))
	}
	if len(m.Statuses) > 0 {
		for _, msg := range m.Statuses {
			dAtA[i] = 0x12
			i++
			i = encodeVarintSocialsvc(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *NewRecommendNext) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NewRecommendNext) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Limit != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.Limit))
	}
	if m.LastRecommendTime != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.LastRecommendTime))
	}
	if m.LastCommonTime != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.LastCommonTime))
	}
	return i, nil
}

func (m *NewRecommendStatusRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NewRecommendStatusRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CurrentUid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.CurrentUid))
	}
	if m.LastRecommendTime != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.LastRecommendTime))
	}
	if m.LastCommonTime != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.LastCommonTime))
	}
	return i, nil
}

func (m *NewRecommendStatusResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NewRecommendStatusResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.Code))
	}
	if len(m.Statuses) > 0 {
		for _, msg := range m.Statuses {
			dAtA[i] = 0x12
			i++
			i = encodeVarintSocialsvc(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Next != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.Next.Size()))
		n16, err16 := m.Next.MarshalTo(dAtA[i:])
		if err16 != nil {
			return 0, err16
		}
		i += n16
	}
	if m.Num != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.Num))
	}
	return i, nil
}

func (m *CreateStatusRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateStatusRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CurrentUid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.CurrentUid))
	}
	if len(m.StatusType) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(len(m.StatusType)))
		i += copy(dAtA[i:], m.StatusType)
	}
	if len(m.ParentId) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(len(m.ParentId)))
		i += copy(dAtA[i:], m.ParentId)
	}
	if len(m.Content) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(len(m.Content)))
		i += copy(dAtA[i:], m.Content)
	}
	if len(m.Meta) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(len(m.Meta)))
		i += copy(dAtA[i:], m.Meta)
	}
	if len(m.FromType) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(len(m.FromType)))
		i += copy(dAtA[i:], m.FromType)
	}
	if len(m.Images) > 0 {
		for _, s := range m.Images {
			dAtA[i] = 0x3a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.IsPrivate {
		dAtA[i] = 0x40
		i++
		if m.IsPrivate {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.ShowDuration != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.ShowDuration))
	}
	return i, nil
}

func (m *UpdateStatusRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateStatusRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CurrentUid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.CurrentUid))
	}
	if len(m.StatusId) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(len(m.StatusId)))
		i += copy(dAtA[i:], m.StatusId)
	}
	if m.IsPrivate {
		dAtA[i] = 0x18
		i++
		if m.IsPrivate {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.ShowDuration != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.ShowDuration))
	}
	return i, nil
}

func (m *CreateStatusResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateStatusResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.Code))
	}
	if m.Status != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.Status.Size()))
		n17, err17 := m.Status.MarshalTo(dAtA[i:])
		if err17 != nil {
			return 0, err17
		}
		i += n17
	}
	return i, nil
}

func (m *UpdateStatusResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateStatusResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.Code))
	}
	if m.Status != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.Status.Size()))
		n18, err18 := m.Status.MarshalTo(dAtA[i:])
		if err18 != nil {
			return 0, err18
		}
		i += n18
	}
	return i, nil
}

func (m *DeleteStatusRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteStatusRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CurrentUid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.CurrentUid))
	}
	if len(m.Statusid) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(len(m.Statusid)))
		i += copy(dAtA[i:], m.Statusid)
	}
	return i, nil
}

func (m *SimpleResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SimpleResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.Code))
	}
	return i, nil
}

func (m *LikeStatusRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LikeStatusRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CurrentUid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.CurrentUid))
	}
	if len(m.Statusid) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(len(m.Statusid)))
		i += copy(dAtA[i:], m.Statusid)
	}
	if len(m.NftAssetId) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(len(m.NftAssetId)))
		i += copy(dAtA[i:], m.NftAssetId)
	}
	return i, nil
}

func (m *UnLikeStatusRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UnLikeStatusRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CurrentUid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.CurrentUid))
	}
	if len(m.Statusid) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(len(m.Statusid)))
		i += copy(dAtA[i:], m.Statusid)
	}
	if len(m.NftAssetId) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(len(m.NftAssetId)))
		i += copy(dAtA[i:], m.NftAssetId)
	}
	return i, nil
}

func (m *LikeNftAssetRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LikeNftAssetRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CurrentUid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.CurrentUid))
	}
	if len(m.NftAssetId) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(len(m.NftAssetId)))
		i += copy(dAtA[i:], m.NftAssetId)
	}
	return i, nil
}

func (m *UnLikeNftAssetRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UnLikeNftAssetRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CurrentUid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.CurrentUid))
	}
	if len(m.NftAssetId) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(len(m.NftAssetId)))
		i += copy(dAtA[i:], m.NftAssetId)
	}
	return i, nil
}

func (m *FollowRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FollowRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CurrentUid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.CurrentUid))
	}
	if m.TargetUid != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.TargetUid))
	}
	return i, nil
}

func (m *UnFollowRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UnFollowRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CurrentUid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.CurrentUid))
	}
	if m.TargetUid != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.TargetUid))
	}
	return i, nil
}

func (m *RelationInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RelationInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.User != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.User.Size()))
		n19, err19 := m.User.MarshalTo(dAtA[i:])
		if err19 != nil {
			return 0, err19
		}
		i += n19
	}
	if len(m.RelationType) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(len(m.RelationType)))
		i += copy(dAtA[i:], m.RelationType)
	}
	if m.CreatedAt != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.CreatedAt))
	}
	return i, nil
}

func (m *ListRelationshipRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListRelationshipRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CurrentUid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.CurrentUid))
	}
	if m.Uid != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.Uid))
	}
	if len(m.RelationType) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(len(m.RelationType)))
		i += copy(dAtA[i:], m.RelationType)
	}
	if m.Paginator != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.Paginator.Size()))
		n20, err20 := m.Paginator.MarshalTo(dAtA[i:])
		if err20 != nil {
			return 0, err20
		}
		i += n20
	}
	return i, nil
}

func (m *ListRelationshipResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListRelationshipResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.Code))
	}
	if len(m.Relations) > 0 {
		for _, msg := range m.Relations {
			dAtA[i] = 0x12
			i++
			i = encodeVarintSocialsvc(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Paginator != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.Paginator.Size()))
		n21, err21 := m.Paginator.MarshalTo(dAtA[i:])
		if err21 != nil {
			return 0, err21
		}
		i += n21
	}
	return i, nil
}

func (m *Comment) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Comment) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if m.Uid != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.Uid))
	}
	if len(m.StatusId) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(len(m.StatusId)))
		i += copy(dAtA[i:], m.StatusId)
	}
	if len(m.ParentId) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(len(m.ParentId)))
		i += copy(dAtA[i:], m.ParentId)
	}
	if len(m.GroupId) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(len(m.GroupId)))
		i += copy(dAtA[i:], m.GroupId)
	}
	if m.OpponentId != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.OpponentId))
	}
	if len(m.Content) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(len(m.Content)))
		i += copy(dAtA[i:], m.Content)
	}
	if len(m.Comments) > 0 {
		for _, msg := range m.Comments {
			dAtA[i] = 0x42
			i++
			i = encodeVarintSocialsvc(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.User != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.User.Size()))
		n22, err22 := m.User.MarshalTo(dAtA[i:])
		if err22 != nil {
			return 0, err22
		}
		i += n22
	}
	if m.Opponent != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.Opponent.Size()))
		n23, err23 := m.Opponent.MarshalTo(dAtA[i:])
		if err23 != nil {
			return 0, err23
		}
		i += n23
	}
	if m.CommentCount != 0 {
		dAtA[i] = 0x58
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.CommentCount))
	}
	if m.LikeCount != 0 {
		dAtA[i] = 0x60
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.LikeCount))
	}
	if m.CreatedAt != 0 {
		dAtA[i] = 0x68
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.CreatedAt))
	}
	if m.IsLiked {
		dAtA[i] = 0x70
		i++
		if m.IsLiked {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.NftAssetId) > 0 {
		dAtA[i] = 0x7a
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(len(m.NftAssetId)))
		i += copy(dAtA[i:], m.NftAssetId)
	}
	return i, nil
}

func (m *GetCommentRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetCommentRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CurrentUid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.CurrentUid))
	}
	if len(m.CommentId) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(len(m.CommentId)))
		i += copy(dAtA[i:], m.CommentId)
	}
	return i, nil
}

func (m *GetCommentResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetCommentResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.Code))
	}
	if m.Comment != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.Comment.Size()))
		n24, err24 := m.Comment.MarshalTo(dAtA[i:])
		if err24 != nil {
			return 0, err24
		}
		i += n24
	}
	return i, nil
}

func (m *ListCommentRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListCommentRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CurrentUid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.CurrentUid))
	}
	if len(m.StatusId) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(len(m.StatusId)))
		i += copy(dAtA[i:], m.StatusId)
	}
	if len(m.TopicId) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(len(m.TopicId)))
		i += copy(dAtA[i:], m.TopicId)
	}
	if m.Paginator != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.Paginator.Size()))
		n25, err25 := m.Paginator.MarshalTo(dAtA[i:])
		if err25 != nil {
			return 0, err25
		}
		i += n25
	}
	if len(m.NftAssetId) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(len(m.NftAssetId)))
		i += copy(dAtA[i:], m.NftAssetId)
	}
	return i, nil
}

func (m *ListCommentResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListCommentResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.Code))
	}
	if len(m.Comments) > 0 {
		for _, msg := range m.Comments {
			dAtA[i] = 0x12
			i++
			i = encodeVarintSocialsvc(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Paginator != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.Paginator.Size()))
		n26, err26 := m.Paginator.MarshalTo(dAtA[i:])
		if err26 != nil {
			return 0, err26
		}
		i += n26
	}
	return i, nil
}

func (m *ListLikeUserRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListLikeUserRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CurrentUid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.CurrentUid))
	}
	if len(m.TargerId) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(len(m.TargerId)))
		i += copy(dAtA[i:], m.TargerId)
	}
	if m.Paginator != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.Paginator.Size()))
		n27, err27 := m.Paginator.MarshalTo(dAtA[i:])
		if err27 != nil {
			return 0, err27
		}
		i += n27
	}
	return i, nil
}

func (m *Like) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Like) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if m.User != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.User.Size()))
		n28, err28 := m.User.MarshalTo(dAtA[i:])
		if err28 != nil {
			return 0, err28
		}
		i += n28
	}
	return i, nil
}

func (m *ListLikeUserResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListLikeUserResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.Code))
	}
	if len(m.Likes) > 0 {
		for _, msg := range m.Likes {
			dAtA[i] = 0x12
			i++
			i = encodeVarintSocialsvc(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Paginator != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.Paginator.Size()))
		n29, err29 := m.Paginator.MarshalTo(dAtA[i:])
		if err29 != nil {
			return 0, err29
		}
		i += n29
	}
	return i, nil
}

func (m *CreateCommentRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateCommentRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CurrentUid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.CurrentUid))
	}
	if len(m.StatusId) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(len(m.StatusId)))
		i += copy(dAtA[i:], m.StatusId)
	}
	if len(m.ParentId) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(len(m.ParentId)))
		i += copy(dAtA[i:], m.ParentId)
	}
	if len(m.Content) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(len(m.Content)))
		i += copy(dAtA[i:], m.Content)
	}
	if len(m.NftAssetId) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(len(m.NftAssetId)))
		i += copy(dAtA[i:], m.NftAssetId)
	}
	return i, nil
}

func (m *DeleteCommentRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteCommentRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CurrentUid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.CurrentUid))
	}
	if len(m.Id) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	return i, nil
}

func (m *CreateCommentResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateCommentResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.Code))
	}
	if m.Comment != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.Comment.Size()))
		n30, err30 := m.Comment.MarshalTo(dAtA[i:])
		if err30 != nil {
			return 0, err30
		}
		i += n30
	}
	return i, nil
}

func (m *NewCommentMeta) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NewCommentMeta) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Uid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.Uid))
	}
	if len(m.GroupId) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(len(m.GroupId)))
		i += copy(dAtA[i:], m.GroupId)
	}
	if len(m.CommentId) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(len(m.CommentId)))
		i += copy(dAtA[i:], m.CommentId)
	}
	if len(m.Content) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(len(m.Content)))
		i += copy(dAtA[i:], m.Content)
	}
	if len(m.ParentContent) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(len(m.ParentContent)))
		i += copy(dAtA[i:], m.ParentContent)
	}
	if len(m.ParentUserName) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(len(m.ParentUserName)))
		i += copy(dAtA[i:], m.ParentUserName)
	}
	if len(m.StatusContentSummary) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(len(m.StatusContentSummary)))
		i += copy(dAtA[i:], m.StatusContentSummary)
	}
	if len(m.StatusImageUrl) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(len(m.StatusImageUrl)))
		i += copy(dAtA[i:], m.StatusImageUrl)
	}
	return i, nil
}

func (m *NewNftCommentMeta) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NewNftCommentMeta) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Uid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.Uid))
	}
	if len(m.GroupId) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(len(m.GroupId)))
		i += copy(dAtA[i:], m.GroupId)
	}
	if len(m.CommentId) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(len(m.CommentId)))
		i += copy(dAtA[i:], m.CommentId)
	}
	if len(m.Content) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(len(m.Content)))
		i += copy(dAtA[i:], m.Content)
	}
	if len(m.ParentContent) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(len(m.ParentContent)))
		i += copy(dAtA[i:], m.ParentContent)
	}
	if len(m.ParentUserName) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(len(m.ParentUserName)))
		i += copy(dAtA[i:], m.ParentUserName)
	}
	if len(m.NftAssetName) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(len(m.NftAssetName)))
		i += copy(dAtA[i:], m.NftAssetName)
	}
	if len(m.NftAssetImage) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(len(m.NftAssetImage)))
		i += copy(dAtA[i:], m.NftAssetImage)
	}
	return i, nil
}

func (m *NewLikeNftCommentMeta) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NewLikeNftCommentMeta) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Uid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.Uid))
	}
	if len(m.CommentId) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(len(m.CommentId)))
		i += copy(dAtA[i:], m.CommentId)
	}
	if len(m.CommentUsername) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(len(m.CommentUsername)))
		i += copy(dAtA[i:], m.CommentUsername)
	}
	if len(m.CommentContent) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(len(m.CommentContent)))
		i += copy(dAtA[i:], m.CommentContent)
	}
	return i, nil
}

func (m *NewLikeCommentMeta) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NewLikeCommentMeta) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Uid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.Uid))
	}
	if len(m.CommentId) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(len(m.CommentId)))
		i += copy(dAtA[i:], m.CommentId)
	}
	if len(m.CommentUsername) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(len(m.CommentUsername)))
		i += copy(dAtA[i:], m.CommentUsername)
	}
	if len(m.CommentContent) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(len(m.CommentContent)))
		i += copy(dAtA[i:], m.CommentContent)
	}
	return i, nil
}

func (m *NewLikeNftMeta) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NewLikeNftMeta) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Uid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.Uid))
	}
	if len(m.NftAssetId) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(len(m.NftAssetId)))
		i += copy(dAtA[i:], m.NftAssetId)
	}
	if len(m.NftAssetName) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(len(m.NftAssetName)))
		i += copy(dAtA[i:], m.NftAssetName)
	}
	if len(m.NftAssetImage) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(len(m.NftAssetImage)))
		i += copy(dAtA[i:], m.NftAssetImage)
	}
	return i, nil
}

func (m *NewLikeStatusMeta) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NewLikeStatusMeta) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Uid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.Uid))
	}
	if len(m.StatusId) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(len(m.StatusId)))
		i += copy(dAtA[i:], m.StatusId)
	}
	if len(m.StatusContent) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(len(m.StatusContent)))
		i += copy(dAtA[i:], m.StatusContent)
	}
	if len(m.StatusImageUrl) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(len(m.StatusImageUrl)))
		i += copy(dAtA[i:], m.StatusImageUrl)
	}
	return i, nil
}

func (m *NewFansMeta) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NewFansMeta) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Uid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.Uid))
	}
	if len(m.FanUsername) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(len(m.FanUsername)))
		i += copy(dAtA[i:], m.FanUsername)
	}
	return i, nil
}

func (m *NewForwardMeta) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NewForwardMeta) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Uid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.Uid))
	}
	if len(m.StatusId) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(len(m.StatusId)))
		i += copy(dAtA[i:], m.StatusId)
	}
	if len(m.ForwardContent) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(len(m.ForwardContent)))
		i += copy(dAtA[i:], m.ForwardContent)
	}
	if len(m.ContentSummary) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(len(m.ContentSummary)))
		i += copy(dAtA[i:], m.ContentSummary)
	}
	if len(m.ImageUrl) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(len(m.ImageUrl)))
		i += copy(dAtA[i:], m.ImageUrl)
	}
	return i, nil
}

func (m *Message) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Message) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if m.Uid != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.Uid))
	}
	if len(m.MessageType) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(len(m.MessageType)))
		i += copy(dAtA[i:], m.MessageType)
	}
	if len(m.State) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(len(m.State)))
		i += copy(dAtA[i:], m.State)
	}
	if m.FromUser != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.FromUser.Size()))
		n31, err31 := m.FromUser.MarshalTo(dAtA[i:])
		if err31 != nil {
			return 0, err31
		}
		i += n31
	}
	if m.CreatedAt != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.CreatedAt))
	}
	if m.Status != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.Status.Size()))
		n32, err32 := m.Status.MarshalTo(dAtA[i:])
		if err32 != nil {
			return 0, err32
		}
		i += n32
	}
	if m.StatusIsDeleted {
		dAtA[i] = 0x40
		i++
		if m.StatusIsDeleted {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.CommentIsDeleted {
		dAtA[i] = 0x48
		i++
		if m.CommentIsDeleted {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.NewCommentMeta != nil {
		dAtA[i] = 0xaa
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.NewCommentMeta.Size()))
		n33, err33 := m.NewCommentMeta.MarshalTo(dAtA[i:])
		if err33 != nil {
			return 0, err33
		}
		i += n33
	}
	if m.NewLikeStatusMeta != nil {
		dAtA[i] = 0xb2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.NewLikeStatusMeta.Size()))
		n34, err34 := m.NewLikeStatusMeta.MarshalTo(dAtA[i:])
		if err34 != nil {
			return 0, err34
		}
		i += n34
	}
	if m.NewFansMeta != nil {
		dAtA[i] = 0xba
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.NewFansMeta.Size()))
		n35, err35 := m.NewFansMeta.MarshalTo(dAtA[i:])
		if err35 != nil {
			return 0, err35
		}
		i += n35
	}
	if m.NewForwardMeta != nil {
		dAtA[i] = 0xc2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.NewForwardMeta.Size()))
		n36, err36 := m.NewForwardMeta.MarshalTo(dAtA[i:])
		if err36 != nil {
			return 0, err36
		}
		i += n36
	}
	if m.NewLikeCommentMeta != nil {
		dAtA[i] = 0xca
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.NewLikeCommentMeta.Size()))
		n37, err37 := m.NewLikeCommentMeta.MarshalTo(dAtA[i:])
		if err37 != nil {
			return 0, err37
		}
		i += n37
	}
	if m.NewNftComment != nil {
		dAtA[i] = 0xd2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.NewNftComment.Size()))
		n38, err38 := m.NewNftComment.MarshalTo(dAtA[i:])
		if err38 != nil {
			return 0, err38
		}
		i += n38
	}
	if m.NewLikeNft != nil {
		dAtA[i] = 0xda
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.NewLikeNft.Size()))
		n39, err39 := m.NewLikeNft.MarshalTo(dAtA[i:])
		if err39 != nil {
			return 0, err39
		}
		i += n39
	}
	if m.NewLikeNftCommentMeta != nil {
		dAtA[i] = 0xe2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.NewLikeNftCommentMeta.Size()))
		n40, err40 := m.NewLikeNftCommentMeta.MarshalTo(dAtA[i:])
		if err40 != nil {
			return 0, err40
		}
		i += n40
	}
	if m.NftAsset != nil {
		dAtA[i] = 0xea
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.NftAsset.Size()))
		n41, err41 := m.NftAsset.MarshalTo(dAtA[i:])
		if err41 != nil {
			return 0, err41
		}
		i += n41
	}
	return i, nil
}

func (m *ListMessageRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListMessageRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CurrentUid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.CurrentUid))
	}
	if len(m.State) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(len(m.State)))
		i += copy(dAtA[i:], m.State)
	}
	if m.Paginator != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.Paginator.Size()))
		n42, err42 := m.Paginator.MarshalTo(dAtA[i:])
		if err42 != nil {
			return 0, err42
		}
		i += n42
	}
	return i, nil
}

func (m *ListMessageResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListMessageResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.Code))
	}
	if len(m.Messages) > 0 {
		for _, msg := range m.Messages {
			dAtA[i] = 0x12
			i++
			i = encodeVarintSocialsvc(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Paginator != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.Paginator.Size()))
		n43, err43 := m.Paginator.MarshalTo(dAtA[i:])
		if err43 != nil {
			return 0, err43
		}
		i += n43
	}
	return i, nil
}

func (m *ReadMessageRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReadMessageRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CurrentUid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.CurrentUid))
	}
	if len(m.LatestID) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(len(m.LatestID)))
		i += copy(dAtA[i:], m.LatestID)
	}
	if len(m.Ids) > 0 {
		for _, s := range m.Ids {
			dAtA[i] = 0x1a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *GetMessageSummaryRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetMessageSummaryRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CurrentUid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.CurrentUid))
	}
	return i, nil
}

func (m *MessageSummaryResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MessageSummaryResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.Code))
	}
	if m.Summary != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.Summary.Size()))
		n44, err44 := m.Summary.MarshalTo(dAtA[i:])
		if err44 != nil {
			return 0, err44
		}
		i += n44
	}
	return i, nil
}

func (m *MessageSummary) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MessageSummary) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.LatestMessage != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.LatestMessage.Size()))
		n45, err45 := m.LatestMessage.MarshalTo(dAtA[i:])
		if err45 != nil {
			return 0, err45
		}
		i += n45
	}
	if m.Total != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.Total))
	}
	if m.NotificationsCount != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.NotificationsCount))
	}
	if m.UsersCount != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.UsersCount))
	}
	return i, nil
}

func (m *LatestFollowingRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LatestFollowingRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CurrentUid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.CurrentUid))
	}
	return i, nil
}

func (m *Following) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Following) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.User != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.User.Size()))
		n46, err46 := m.User.MarshalTo(dAtA[i:])
		if err46 != nil {
			return 0, err46
		}
		i += n46
	}
	if m.Unread {
		dAtA[i] = 0x10
		i++
		if m.Unread {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *LatestFollowingResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LatestFollowingResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.Code))
	}
	if len(m.Followings) > 0 {
		for _, msg := range m.Followings {
			dAtA[i] = 0x12
			i++
			i = encodeVarintSocialsvc(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *Blacklist) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Blacklist) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.User != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.User.Size()))
		n47, err47 := m.User.MarshalTo(dAtA[i:])
		if err47 != nil {
			return 0, err47
		}
		i += n47
	}
	if m.CreatedAt != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.CreatedAt))
	}
	return i, nil
}

func (m *ListBlacklistRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListBlacklistRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Uid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.Uid))
	}
	if m.Paginator != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.Paginator.Size()))
		n48, err48 := m.Paginator.MarshalTo(dAtA[i:])
		if err48 != nil {
			return 0, err48
		}
		i += n48
	}
	return i, nil
}

func (m *ListBlacklistResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListBlacklistResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.Code))
	}
	if len(m.Blacklists) > 0 {
		for _, msg := range m.Blacklists {
			dAtA[i] = 0x12
			i++
			i = encodeVarintSocialsvc(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Paginator != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.Paginator.Size()))
		n49, err49 := m.Paginator.MarshalTo(dAtA[i:])
		if err49 != nil {
			return 0, err49
		}
		i += n49
	}
	return i, nil
}

func (m *CreateBlacklistRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateBlacklistRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Uid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.Uid))
	}
	if m.TargetUid != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.TargetUid))
	}
	return i, nil
}

func (m *DeleteBlacklistRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteBlacklistRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Uid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.Uid))
	}
	if m.TargetUid != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.TargetUid))
	}
	return i, nil
}

func (m *ListLikeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListLikeRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Uid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.Uid))
	}
	if m.CurrentUid != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.CurrentUid))
	}
	if m.Paginator != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.Paginator.Size()))
		n50, err50 := m.Paginator.MarshalTo(dAtA[i:])
		if err50 != nil {
			return 0, err50
		}
		i += n50
	}
	return i, nil
}

func (m *StatusLike) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StatusLike) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Status != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.Status.Size()))
		n51, err51 := m.Status.MarshalTo(dAtA[i:])
		if err51 != nil {
			return 0, err51
		}
		i += n51
	}
	if m.CreatedAt != 0 {
		dAtA[i] = 0x68
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.CreatedAt))
	}
	return i, nil
}

func (m *ListLikeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListLikeResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.Code))
	}
	if len(m.Statuses) > 0 {
		for _, msg := range m.Statuses {
			dAtA[i] = 0x12
			i++
			i = encodeVarintSocialsvc(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Paginator != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.Paginator.Size()))
		n52, err52 := m.Paginator.MarshalTo(dAtA[i:])
		if err52 != nil {
			return 0, err52
		}
		i += n52
	}
	return i, nil
}

func (m *LikeCommentRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LikeCommentRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CurrentUid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.CurrentUid))
	}
	if len(m.CommentId) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(len(m.CommentId)))
		i += copy(dAtA[i:], m.CommentId)
	}
	return i, nil
}

func (m *UnlikeCommentRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UnlikeCommentRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CurrentUid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.CurrentUid))
	}
	if len(m.CommentId) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(len(m.CommentId)))
		i += copy(dAtA[i:], m.CommentId)
	}
	return i, nil
}

func (m *ShareTweetUrlRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ShareTweetUrlRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CurrentUid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.CurrentUid))
	}
	return i, nil
}

func (m *ShareTweetUrlResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ShareTweetUrlResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.Code))
	}
	if len(m.Url) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(len(m.Url)))
		i += copy(dAtA[i:], m.Url)
	}
	return i, nil
}

func (m *TwitterAuthRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TwitterAuthRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *TwitterAuthResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TwitterAuthResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *AirdropTwitterRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AirdropTwitterRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Misesid) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(len(m.Misesid)))
		i += copy(dAtA[i:], m.Misesid)
	}
	return i, nil
}

func (m *AirdropTwitterResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AirdropTwitterResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *AirdropChannelRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AirdropChannelRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *AirdropChannelResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AirdropChannelResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *CreateAirdropTwitterRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateAirdropTwitterRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *CreateAirdropTwitterResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateAirdropTwitterResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *CreateChannelAirdropRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateChannelAirdropRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *CreateChannelAirdropResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateChannelAirdropResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *UserToChainRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserToChainRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *UserToChainResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserToChainResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *TwitterFollowRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TwitterFollowRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *TwitterFollowResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TwitterFollowResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.Code))
	}
	return i, nil
}

func (m *ChannelInfoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChannelInfoRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Misesid) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(len(m.Misesid)))
		i += copy(dAtA[i:], m.Misesid)
	}
	if len(m.Type) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(len(m.Type)))
		i += copy(dAtA[i:], m.Type)
	}
	if len(m.Medium) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(len(m.Medium)))
		i += copy(dAtA[i:], m.Medium)
	}
	return i, nil
}

func (m *ChannelInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChannelInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.Code))
	}
	if len(m.Url) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(len(m.Url)))
		i += copy(dAtA[i:], m.Url)
	}
	if m.TotalChannelUser != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.TotalChannelUser))
	}
	if m.AirdropAmount != 0 {
		dAtA[i] = 0x25
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.AirdropAmount))))
		i += 4
	}
	if len(m.MediumUrl) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(len(m.MediumUrl)))
		i += copy(dAtA[i:], m.MediumUrl)
	}
	if len(m.IosLink) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(len(m.IosLink)))
		i += copy(dAtA[i:], m.IosLink)
	}
	if len(m.IosMediumLink) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(len(m.IosMediumLink)))
		i += copy(dAtA[i:], m.IosMediumLink)
	}
	return i, nil
}

func (m *GetChannelUserRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetChannelUserRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Misesid) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(len(m.Misesid)))
		i += copy(dAtA[i:], m.Misesid)
	}
	return i, nil
}

func (m *GetChannelUserResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetChannelUserResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.Code))
	}
	if m.ChanelUser != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.ChanelUser.Size()))
		n53, err53 := m.ChanelUser.MarshalTo(dAtA[i:])
		if err53 != nil {
			return 0, err53
		}
		i += n53
	}
	return i, nil
}

func (m *OpenseaAsset) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OpenseaAsset) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.Id))
	}
	if len(m.ImageUrl) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(len(m.ImageUrl)))
		i += copy(dAtA[i:], m.ImageUrl)
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	return i, nil
}

func (m *GetOpenseaAssetRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetOpenseaAssetRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.AssetContractAddress) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(len(m.AssetContractAddress)))
		i += copy(dAtA[i:], m.AssetContractAddress)
	}
	if len(m.TokenId) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(len(m.TokenId)))
		i += copy(dAtA[i:], m.TokenId)
	}
	if len(m.AccountAddress) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(len(m.AccountAddress)))
		i += copy(dAtA[i:], m.AccountAddress)
	}
	if len(m.IncludeOrders) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(len(m.IncludeOrders)))
		i += copy(dAtA[i:], m.IncludeOrders)
	}
	if len(m.Network) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(len(m.Network)))
		i += copy(dAtA[i:], m.Network)
	}
	if m.CurrentUid != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.CurrentUid))
	}
	return i, nil
}

func (m *GetOpenseaAssetResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetOpenseaAssetResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.Code))
	}
	if len(m.OpenseaAsset) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(len(m.OpenseaAsset)))
		i += copy(dAtA[i:], m.OpenseaAsset)
	}
	return i, nil
}

func (m *GetOpenseaAssetContractRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetOpenseaAssetContractRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.AssetContractAddress) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(len(m.AssetContractAddress)))
		i += copy(dAtA[i:], m.AssetContractAddress)
	}
	if len(m.TokenId) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(len(m.TokenId)))
		i += copy(dAtA[i:], m.TokenId)
	}
	if len(m.AccountAddress) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(len(m.AccountAddress)))
		i += copy(dAtA[i:], m.AccountAddress)
	}
	if len(m.IncludeOrders) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(len(m.IncludeOrders)))
		i += copy(dAtA[i:], m.IncludeOrders)
	}
	if len(m.Network) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(len(m.Network)))
		i += copy(dAtA[i:], m.Network)
	}
	if m.CurrentUid != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.CurrentUid))
	}
	return i, nil
}

func (m *GetOpenseaAssetContractResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetOpenseaAssetContractResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.Code))
	}
	if len(m.OpenseaAsset) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(len(m.OpenseaAsset)))
		i += copy(dAtA[i:], m.OpenseaAsset)
	}
	return i, nil
}

func (m *ListOpenseaAssetRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListOpenseaAssetRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Owner) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(len(m.Owner)))
		i += copy(dAtA[i:], m.Owner)
	}
	if m.Limit != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.Limit))
	}
	if len(m.Cursor) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(len(m.Cursor)))
		i += copy(dAtA[i:], m.Cursor)
	}
	if len(m.Network) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(len(m.Network)))
		i += copy(dAtA[i:], m.Network)
	}
	if m.CurrentUid != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.CurrentUid))
	}
	return i, nil
}

func (m *ListOpenseaAssetResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListOpenseaAssetResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.Code))
	}
	if len(m.Assets) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(len(m.Assets)))
		i += copy(dAtA[i:], m.Assets)
	}
	if len(m.Next) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(len(m.Next)))
		i += copy(dAtA[i:], m.Next)
	}
	if len(m.Previous) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(len(m.Previous)))
		i += copy(dAtA[i:], m.Previous)
	}
	return i, nil
}

func (m *NftCollection) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NftCollection) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Slug) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(len(m.Slug)))
		i += copy(dAtA[i:], m.Slug)
	}
	if m.Stats != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.Stats.Size()))
		n54, err54 := m.Stats.MarshalTo(dAtA[i:])
		if err54 != nil {
			return 0, err54
		}
		i += n54
	}
	if len(m.PaymentToken) > 0 {
		for _, msg := range m.PaymentToken {
			dAtA[i] = 0x2a
			i++
			i = encodeVarintSocialsvc(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *AssetContract) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AssetContract) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(len(m.Address)))
		i += copy(dAtA[i:], m.Address)
	}
	return i, nil
}

func (m *NftAsset) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NftAsset) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if len(m.ImageUrl) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(len(m.ImageUrl)))
		i += copy(dAtA[i:], m.ImageUrl)
	}
	if len(m.ImagePreviewUrl) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(len(m.ImagePreviewUrl)))
		i += copy(dAtA[i:], m.ImagePreviewUrl)
	}
	if len(m.ImageThumbnailUrl) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(len(m.ImageThumbnailUrl)))
		i += copy(dAtA[i:], m.ImageThumbnailUrl)
	}
	if len(m.PermaLink) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(len(m.PermaLink)))
		i += copy(dAtA[i:], m.PermaLink)
	}
	if m.LikesCount != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.LikesCount))
	}
	if m.CommentsCount != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.CommentsCount))
	}
	if len(m.TokenId) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(len(m.TokenId)))
		i += copy(dAtA[i:], m.TokenId)
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.Collection != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.Collection.Size()))
		n55, err55 := m.Collection.MarshalTo(dAtA[i:])
		if err55 != nil {
			return 0, err55
		}
		i += n55
	}
	if m.AssetContract != nil {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.AssetContract.Size()))
		n56, err56 := m.AssetContract.MarshalTo(dAtA[i:])
		if err56 != nil {
			return 0, err56
		}
		i += n56
	}
	if m.IsLiked {
		dAtA[i] = 0x60
		i++
		if m.IsLiked {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.User != nil {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.User.Size()))
		n57, err57 := m.User.MarshalTo(dAtA[i:])
		if err57 != nil {
			return 0, err57
		}
		i += n57
	}
	return i, nil
}

func (m *PageNftAssetRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PageNftAssetRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CurrentUid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.CurrentUid))
	}
	if m.Uid != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.Uid))
	}
	if m.Paginator != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.Paginator.Size()))
		n58, err58 := m.Paginator.MarshalTo(dAtA[i:])
		if err58 != nil {
			return 0, err58
		}
		i += n58
	}
	if len(m.SortBy) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(len(m.SortBy)))
		i += copy(dAtA[i:], m.SortBy)
	}
	if len(m.Scene) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(len(m.Scene)))
		i += copy(dAtA[i:], m.Scene)
	}
	return i, nil
}

func (m *PageNftAssetResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PageNftAssetResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.Code))
	}
	if len(m.Assets) > 0 {
		for _, msg := range m.Assets {
			dAtA[i] = 0x12
			i++
			i = encodeVarintSocialsvc(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Paginator != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.Paginator.Size()))
		n59, err59 := m.Paginator.MarshalTo(dAtA[i:])
		if err59 != nil {
			return 0, err59
		}
		i += n59
	}
	return i, nil
}

func (m *GetNftAssetRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetNftAssetRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CurrentUid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.CurrentUid))
	}
	if len(m.NftAssetId) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(len(m.NftAssetId)))
		i += copy(dAtA[i:], m.NftAssetId)
	}
	return i, nil
}

func (m *GetNftAssetResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetNftAssetResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.Code))
	}
	if m.Asset != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.Asset.Size()))
		n60, err60 := m.Asset.MarshalTo(dAtA[i:])
		if err60 != nil {
			return 0, err60
		}
		i += n60
	}
	return i, nil
}

func (m *UserConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserConfig) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.NftState {
		dAtA[i] = 0x8
		i++
		if m.NftState {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *UpdateUserConfigRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateUserConfigRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CurrentUid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.CurrentUid))
	}
	if m.NftState {
		dAtA[i] = 0x10
		i++
		if m.NftState {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *UpdateUserConfigResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateUserConfigResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.Code))
	}
	if m.Config != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.Config.Size()))
		n61, err61 := m.Config.MarshalTo(dAtA[i:])
		if err61 != nil {
			return 0, err61
		}
		i += n61
	}
	return i, nil
}

func (m *GetUserConfigRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetUserConfigRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CurrentUid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.CurrentUid))
	}
	if m.Uid != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.Uid))
	}
	return i, nil
}

func (m *GetUserConfigResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetUserConfigResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.Code))
	}
	if m.Config != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.Config.Size()))
		n62, err62 := m.Config.MarshalTo(dAtA[i:])
		if err62 != nil {
			return 0, err62
		}
		i += n62
	}
	return i, nil
}

func (m *NftAccount) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NftAccount) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(len(m.Address)))
		i += copy(dAtA[i:], m.Address)
	}
	if m.MisesUser != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.MisesUser.Size()))
		n63, err63 := m.MisesUser.MarshalTo(dAtA[i:])
		if err63 != nil {
			return 0, err63
		}
		i += n63
	}
	if len(m.ProfileImgUrl) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(len(m.ProfileImgUrl)))
		i += copy(dAtA[i:], m.ProfileImgUrl)
	}
	return i, nil
}

func (m *PaymentToken) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PaymentToken) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.Id))
	}
	if len(m.Symbol) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(len(m.Symbol)))
		i += copy(dAtA[i:], m.Symbol)
	}
	if len(m.Address) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(len(m.Address)))
		i += copy(dAtA[i:], m.Address)
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.EthPrice) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(len(m.EthPrice)))
		i += copy(dAtA[i:], m.EthPrice)
	}
	if len(m.UsdPrice) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(len(m.UsdPrice)))
		i += copy(dAtA[i:], m.UsdPrice)
	}
	if m.Decimals != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.Decimals))
	}
	return i, nil
}

func (m *Stats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Stats) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.FloorPrice != 0 {
		dAtA[i] = 0xd
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.FloorPrice))))
		i += 4
	}
	return i, nil
}

func (m *NftEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NftEvent) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if len(m.EventType) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(len(m.EventType)))
		i += copy(dAtA[i:], m.EventType)
	}
	if m.FromAccount != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.FromAccount.Size()))
		n64, err64 := m.FromAccount.MarshalTo(dAtA[i:])
		if err64 != nil {
			return 0, err64
		}
		i += n64
	}
	if m.ToAccount != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.ToAccount.Size()))
		n65, err65 := m.ToAccount.MarshalTo(dAtA[i:])
		if err65 != nil {
			return 0, err65
		}
		i += n65
	}
	if len(m.CreatedDate) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(len(m.CreatedDate)))
		i += copy(dAtA[i:], m.CreatedDate)
	}
	if m.PaymentToken != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.PaymentToken.Size()))
		n66, err66 := m.PaymentToken.MarshalTo(dAtA[i:])
		if err66 != nil {
			return 0, err66
		}
		i += n66
	}
	return i, nil
}

func (m *PageNftEventRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PageNftEventRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CurrentUid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.CurrentUid))
	}
	if len(m.NftAssetId) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(len(m.NftAssetId)))
		i += copy(dAtA[i:], m.NftAssetId)
	}
	if m.Paginator != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.Paginator.Size()))
		n67, err67 := m.Paginator.MarshalTo(dAtA[i:])
		if err67 != nil {
			return 0, err67
		}
		i += n67
	}
	return i, nil
}

func (m *PageNftEventResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PageNftEventResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.Code))
	}
	if len(m.Event) > 0 {
		for _, msg := range m.Event {
			dAtA[i] = 0x12
			i++
			i = encodeVarintSocialsvc(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Paginator != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.Paginator.Size()))
		n68, err68 := m.Paginator.MarshalTo(dAtA[i:])
		if err68 != nil {
			return 0, err68
		}
		i += n68
	}
	return i, nil
}

func (m *UpdateOpenseaNftRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateOpenseaNftRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *UpdateOpenseaNftResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateOpenseaNftResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.Code))
	}
	return i, nil
}

func (m *GetTwitterAuthUrlRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetTwitterAuthUrlRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CurrentUid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.CurrentUid))
	}
	return i, nil
}

func (m *GetTwitterAuthUrlResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetTwitterAuthUrlResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.Code))
	}
	if len(m.Url) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(len(m.Url)))
		i += copy(dAtA[i:], m.Url)
	}
	return i, nil
}

func (m *UserTwitterAuth) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserTwitterAuth) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.TwitterUserId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(len(m.TwitterUserId)))
		i += copy(dAtA[i:], m.TwitterUserId)
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Username) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(len(m.Username)))
		i += copy(dAtA[i:], m.Username)
	}
	if m.FollowersCount != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.FollowersCount))
	}
	if m.TweetCount != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.TweetCount))
	}
	if m.TwitterCreatedAt != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.TwitterCreatedAt))
	}
	if m.Amount != 0 {
		dAtA[i] = 0x3d
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Amount))))
		i += 4
	}
	if m.CreatedAt != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.CreatedAt))
	}
	if len(m.Misesid) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(len(m.Misesid)))
		i += copy(dAtA[i:], m.Misesid)
	}
	return i, nil
}

func (m *Airdrop) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Airdrop) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Coin != 0 {
		dAtA[i] = 0xd
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Coin))))
		i += 4
	}
	if m.CreatedAt != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.CreatedAt))
	}
	if m.FinishAt != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.FinishAt))
	}
	if len(m.Status) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(len(m.Status)))
		i += copy(dAtA[i:], m.Status)
	}
	return i, nil
}

func (m *GetAirdropInfoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAirdropInfoRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CurrentUid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.CurrentUid))
	}
	return i, nil
}

func (m *GetAirdropInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAirdropInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.Code))
	}
	if m.Twitter != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.Twitter.Size()))
		n69, err69 := m.Twitter.MarshalTo(dAtA[i:])
		if err69 != nil {
			return 0, err69
		}
		i += n69
	}
	if m.Airdrop != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.Airdrop.Size()))
		n70, err70 := m.Airdrop.MarshalTo(dAtA[i:])
		if err70 != nil {
			return 0, err70
		}
		i += n70
	}
	return i, nil
}

func (m *TwitterCallbackRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TwitterCallbackRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CurrentUid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.CurrentUid))
	}
	if len(m.OauthToken) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(len(m.OauthToken)))
		i += copy(dAtA[i:], m.OauthToken)
	}
	if len(m.OauthVerifier) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(len(m.OauthVerifier)))
		i += copy(dAtA[i:], m.OauthVerifier)
	}
	return i, nil
}

func (m *TwitterCallbackResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TwitterCallbackResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.Code))
	}
	if len(m.Url) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(len(m.Url)))
		i += copy(dAtA[i:], m.Url)
	}
	return i, nil
}

func (m *ReceiveAirdropRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReceiveAirdropRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CurrentUid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.CurrentUid))
	}
	if len(m.Tweet) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(len(m.Tweet)))
		i += copy(dAtA[i:], m.Tweet)
	}
	return i, nil
}

func (m *ReceiveAirdropResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReceiveAirdropResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSocialsvc(dAtA, i, uint64(m.Code))
	}
	return i, nil
}

func encodeVarintSocialsvc(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *SignInRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Auth)
	if l > 0 {
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	l = len(m.Referrer)
	if l > 0 {
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	return n
}

func (m *SignInResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovSocialsvc(uint64(m.Code))
	}
	l = len(m.Jwt)
	if l > 0 {
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	if m.IsCreated {
		n += 2
	}
	return n
}

func (m *ComplaintRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CurrentUid != 0 {
		n += 1 + sovSocialsvc(uint64(m.CurrentUid))
	}
	l = len(m.TargetType)
	if l > 0 {
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	l = len(m.TargetId)
	if l > 0 {
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	l = len(m.Reason)
	if l > 0 {
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	return n
}

func (m *ComplaintResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovSocialsvc(uint64(m.Code))
	}
	return n
}

func (m *UserAvatar) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Small)
	if l > 0 {
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	l = len(m.Medium)
	if l > 0 {
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	l = len(m.Large)
	if l > 0 {
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	l = len(m.NftAssetId)
	if l > 0 {
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	return n
}

func (m *UserInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Uid != 0 {
		n += 1 + sovSocialsvc(uint64(m.Uid))
	}
	l = len(m.Username)
	if l > 0 {
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	l = len(m.Misesid)
	if l > 0 {
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	l = len(m.Gender)
	if l > 0 {
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	l = len(m.Mobile)
	if l > 0 {
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	l = len(m.Email)
	if l > 0 {
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	l = len(m.Avatar)
	if l > 0 {
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	if m.IsFollowed {
		n += 2
	}
	if m.IsBlocked {
		n += 2
	}
	if m.FollowingsCount != 0 {
		n += 1 + sovSocialsvc(uint64(m.FollowingsCount))
	}
	if m.FansCount != 0 {
		n += 1 + sovSocialsvc(uint64(m.FansCount))
	}
	if m.LikedCount != 0 {
		n += 1 + sovSocialsvc(uint64(m.LikedCount))
	}
	if m.NewFansCount != 0 {
		n += 1 + sovSocialsvc(uint64(m.NewFansCount))
	}
	if m.AvatarUrl != nil {
		l = m.AvatarUrl.Size()
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	if m.IsAirdropped {
		n += 3
	}
	if m.AirdropStatus {
		n += 3
	}
	if m.IsLogined {
		n += 3
	}
	l = len(m.HelpMisesid)
	if l > 0 {
		n += 2 + l + sovSocialsvc(uint64(l))
	}
	l = len(m.Intro)
	if l > 0 {
		n += 2 + l + sovSocialsvc(uint64(l))
	}
	return n
}

func (m *FindMisesUserRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Misesid)
	if l > 0 {
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	if m.CurrentUid != 0 {
		n += 1 + sovSocialsvc(uint64(m.CurrentUid))
	}
	return n
}

func (m *FindMisesUserResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovSocialsvc(uint64(m.Code))
	}
	if m.User != nil {
		l = m.User.Size()
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	if m.IsFollowed {
		n += 2
	}
	return n
}

func (m *FindUserRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Uid != 0 {
		n += 1 + sovSocialsvc(uint64(m.Uid))
	}
	if m.CurrentUid != 0 {
		n += 1 + sovSocialsvc(uint64(m.CurrentUid))
	}
	return n
}

func (m *FindUserResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovSocialsvc(uint64(m.Code))
	}
	if m.User != nil {
		l = m.User.Size()
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	if m.IsFollowed {
		n += 2
	}
	return n
}

func (m *UpdateUserProfileRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Uid != 0 {
		n += 1 + sovSocialsvc(uint64(m.Uid))
	}
	l = len(m.Gender)
	if l > 0 {
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	l = len(m.Mobile)
	if l > 0 {
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	l = len(m.Email)
	if l > 0 {
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	l = len(m.Intro)
	if l > 0 {
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	return n
}

func (m *UpdateUserAvatarRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Uid != 0 {
		n += 1 + sovSocialsvc(uint64(m.Uid))
	}
	l = len(m.AttachmentPath)
	if l > 0 {
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	l = len(m.NftAssetId)
	if l > 0 {
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	return n
}

func (m *UpdateUserNameRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Uid != 0 {
		n += 1 + sovSocialsvc(uint64(m.Uid))
	}
	l = len(m.Username)
	if l > 0 {
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	return n
}

func (m *UpdateUserResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovSocialsvc(uint64(m.Code))
	}
	if m.User != nil {
		l = m.User.Size()
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	return n
}

func (m *LinkMetaInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	l = len(m.Host)
	if l > 0 {
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	l = len(m.Link)
	if l > 0 {
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	l = len(m.ImagePath)
	if l > 0 {
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	l = len(m.ImageUrl)
	if l > 0 {
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	return n
}

func (m *ImageMetaInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Images) > 0 {
		for _, s := range m.Images {
			l = len(s)
			n += 1 + l + sovSocialsvc(uint64(l))
		}
	}
	if len(m.ThumbImages) > 0 {
		for _, s := range m.ThumbImages {
			l = len(s)
			n += 1 + l + sovSocialsvc(uint64(l))
		}
	}
	return n
}

func (m *StatusInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	if m.User != nil {
		l = m.User.Size()
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	l = len(m.FromType)
	if l > 0 {
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	l = len(m.StatusType)
	if l > 0 {
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	if m.Parent != nil {
		l = m.Parent.Size()
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	if m.Origin != nil {
		l = m.Origin.Size()
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	if m.CommentCount != 0 {
		n += 1 + sovSocialsvc(uint64(m.CommentCount))
	}
	if m.LikeCount != 0 {
		n += 1 + sovSocialsvc(uint64(m.LikeCount))
	}
	if m.ForwardCount != 0 {
		n += 1 + sovSocialsvc(uint64(m.ForwardCount))
	}
	if m.IsLiked {
		n += 2
	}
	if m.LinkMeta != nil {
		l = m.LinkMeta.Size()
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	if m.CreatedAt != 0 {
		n += 1 + sovSocialsvc(uint64(m.CreatedAt))
	}
	if m.ImageMeta != nil {
		l = m.ImageMeta.Size()
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	if m.IsPublic {
		n += 2
	}
	if m.HideTime != 0 {
		n += 2 + sovSocialsvc(uint64(m.HideTime))
	}
	if m.ParentStatusIsDeleted {
		n += 3
	}
	if m.ParentStatusIsBlacked {
		n += 3
	}
	return n
}

func (m *GetStatusRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CurrentUid != 0 {
		n += 1 + sovSocialsvc(uint64(m.CurrentUid))
	}
	l = len(m.Statusid)
	if l > 0 {
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	return n
}

func (m *GetStatusResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovSocialsvc(uint64(m.Code))
	}
	if m.Status != nil {
		l = m.Status.Size()
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	return n
}

func (m *PageQuick) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Limit != 0 {
		n += 1 + sovSocialsvc(uint64(m.Limit))
	}
	l = len(m.NextId)
	if l > 0 {
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	if m.Total != 0 {
		n += 1 + sovSocialsvc(uint64(m.Total))
	}
	return n
}

func (m *Page) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TotalRecords != 0 {
		n += 1 + sovSocialsvc(uint64(m.TotalRecords))
	}
	if m.PageSize != 0 {
		n += 1 + sovSocialsvc(uint64(m.PageSize))
	}
	if m.PageNum != 0 {
		n += 1 + sovSocialsvc(uint64(m.PageNum))
	}
	if m.TotalPage != 0 {
		n += 1 + sovSocialsvc(uint64(m.TotalPage))
	}
	return n
}

func (m *ListStatusRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CurrentUid != 0 {
		n += 1 + sovSocialsvc(uint64(m.CurrentUid))
	}
	if m.TargetUid != 0 {
		n += 1 + sovSocialsvc(uint64(m.TargetUid))
	}
	l = len(m.ParentId)
	if l > 0 {
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	if len(m.FromTypes) > 0 {
		for _, s := range m.FromTypes {
			l = len(s)
			n += 1 + l + sovSocialsvc(uint64(l))
		}
	}
	if m.Paginator != nil {
		l = m.Paginator.Size()
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	return n
}

func (m *ListStatusResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovSocialsvc(uint64(m.Code))
	}
	if len(m.Statuses) > 0 {
		for _, e := range m.Statuses {
			l = e.Size()
			n += 1 + l + sovSocialsvc(uint64(l))
		}
	}
	if m.Paginator != nil {
		l = m.Paginator.Size()
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	return n
}

func (m *PageChannelUserRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Misesid)
	if l > 0 {
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	if m.Paginator != nil {
		l = m.Paginator.Size()
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	return n
}

func (m *ChannelUserInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	l = len(m.ChannelId)
	if l > 0 {
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	if m.ValidState != 0 {
		n += 1 + sovSocialsvc(uint64(m.ValidState))
	}
	if m.Amount != 0 {
		n += 1 + sovSocialsvc(uint64(m.Amount))
	}
	l = len(m.TxId)
	if l > 0 {
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	if m.User != nil {
		l = m.User.Size()
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	if m.AirdropState != 0 {
		n += 1 + sovSocialsvc(uint64(m.AirdropState))
	}
	if m.AirdropTime != 0 {
		n += 1 + sovSocialsvc(uint64(m.AirdropTime))
	}
	if m.CreatedAt != 0 {
		n += 1 + sovSocialsvc(uint64(m.CreatedAt))
	}
	if m.ChannelUid != 0 {
		n += 1 + sovSocialsvc(uint64(m.ChannelUid))
	}
	l = len(m.ChannelMisesid)
	if l > 0 {
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	return n
}

func (m *PageChannelUserResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovSocialsvc(uint64(m.Code))
	}
	if len(m.ChannelUsers) > 0 {
		for _, e := range m.ChannelUsers {
			l = e.Size()
			n += 1 + l + sovSocialsvc(uint64(l))
		}
	}
	if m.Paginator != nil {
		l = m.Paginator.Size()
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	return n
}

func (m *NewListStatusRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CurrentUid != 0 {
		n += 1 + sovSocialsvc(uint64(m.CurrentUid))
	}
	if m.TargetUid != 0 {
		n += 1 + sovSocialsvc(uint64(m.TargetUid))
	}
	if len(m.Ids) > 0 {
		for _, s := range m.Ids {
			l = len(s)
			n += 1 + l + sovSocialsvc(uint64(l))
		}
	}
	if m.ListNum != 0 {
		n += 1 + sovSocialsvc(uint64(m.ListNum))
	}
	if len(m.FromTypes) > 0 {
		for _, s := range m.FromTypes {
			l = len(s)
			n += 1 + l + sovSocialsvc(uint64(l))
		}
	}
	return n
}

func (m *NewListStatusResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovSocialsvc(uint64(m.Code))
	}
	if len(m.Statuses) > 0 {
		for _, e := range m.Statuses {
			l = e.Size()
			n += 1 + l + sovSocialsvc(uint64(l))
		}
	}
	return n
}

func (m *NewRecommendNext) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Limit != 0 {
		n += 1 + sovSocialsvc(uint64(m.Limit))
	}
	if m.LastRecommendTime != 0 {
		n += 1 + sovSocialsvc(uint64(m.LastRecommendTime))
	}
	if m.LastCommonTime != 0 {
		n += 1 + sovSocialsvc(uint64(m.LastCommonTime))
	}
	return n
}

func (m *NewRecommendStatusRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CurrentUid != 0 {
		n += 1 + sovSocialsvc(uint64(m.CurrentUid))
	}
	if m.LastRecommendTime != 0 {
		n += 1 + sovSocialsvc(uint64(m.LastRecommendTime))
	}
	if m.LastCommonTime != 0 {
		n += 1 + sovSocialsvc(uint64(m.LastCommonTime))
	}
	return n
}

func (m *NewRecommendStatusResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovSocialsvc(uint64(m.Code))
	}
	if len(m.Statuses) > 0 {
		for _, e := range m.Statuses {
			l = e.Size()
			n += 1 + l + sovSocialsvc(uint64(l))
		}
	}
	if m.Next != nil {
		l = m.Next.Size()
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	if m.Num != 0 {
		n += 1 + sovSocialsvc(uint64(m.Num))
	}
	return n
}

func (m *CreateStatusRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CurrentUid != 0 {
		n += 1 + sovSocialsvc(uint64(m.CurrentUid))
	}
	l = len(m.StatusType)
	if l > 0 {
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	l = len(m.ParentId)
	if l > 0 {
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	l = len(m.Meta)
	if l > 0 {
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	l = len(m.FromType)
	if l > 0 {
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	if len(m.Images) > 0 {
		for _, s := range m.Images {
			l = len(s)
			n += 1 + l + sovSocialsvc(uint64(l))
		}
	}
	if m.IsPrivate {
		n += 2
	}
	if m.ShowDuration != 0 {
		n += 1 + sovSocialsvc(uint64(m.ShowDuration))
	}
	return n
}

func (m *UpdateStatusRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CurrentUid != 0 {
		n += 1 + sovSocialsvc(uint64(m.CurrentUid))
	}
	l = len(m.StatusId)
	if l > 0 {
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	if m.IsPrivate {
		n += 2
	}
	if m.ShowDuration != 0 {
		n += 1 + sovSocialsvc(uint64(m.ShowDuration))
	}
	return n
}

func (m *CreateStatusResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovSocialsvc(uint64(m.Code))
	}
	if m.Status != nil {
		l = m.Status.Size()
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	return n
}

func (m *UpdateStatusResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovSocialsvc(uint64(m.Code))
	}
	if m.Status != nil {
		l = m.Status.Size()
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	return n
}

func (m *DeleteStatusRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CurrentUid != 0 {
		n += 1 + sovSocialsvc(uint64(m.CurrentUid))
	}
	l = len(m.Statusid)
	if l > 0 {
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	return n
}

func (m *SimpleResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovSocialsvc(uint64(m.Code))
	}
	return n
}

func (m *LikeStatusRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CurrentUid != 0 {
		n += 1 + sovSocialsvc(uint64(m.CurrentUid))
	}
	l = len(m.Statusid)
	if l > 0 {
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	l = len(m.NftAssetId)
	if l > 0 {
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	return n
}

func (m *UnLikeStatusRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CurrentUid != 0 {
		n += 1 + sovSocialsvc(uint64(m.CurrentUid))
	}
	l = len(m.Statusid)
	if l > 0 {
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	l = len(m.NftAssetId)
	if l > 0 {
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	return n
}

func (m *LikeNftAssetRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CurrentUid != 0 {
		n += 1 + sovSocialsvc(uint64(m.CurrentUid))
	}
	l = len(m.NftAssetId)
	if l > 0 {
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	return n
}

func (m *UnLikeNftAssetRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CurrentUid != 0 {
		n += 1 + sovSocialsvc(uint64(m.CurrentUid))
	}
	l = len(m.NftAssetId)
	if l > 0 {
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	return n
}

func (m *FollowRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CurrentUid != 0 {
		n += 1 + sovSocialsvc(uint64(m.CurrentUid))
	}
	if m.TargetUid != 0 {
		n += 1 + sovSocialsvc(uint64(m.TargetUid))
	}
	return n
}

func (m *UnFollowRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CurrentUid != 0 {
		n += 1 + sovSocialsvc(uint64(m.CurrentUid))
	}
	if m.TargetUid != 0 {
		n += 1 + sovSocialsvc(uint64(m.TargetUid))
	}
	return n
}

func (m *RelationInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.User != nil {
		l = m.User.Size()
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	l = len(m.RelationType)
	if l > 0 {
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	if m.CreatedAt != 0 {
		n += 1 + sovSocialsvc(uint64(m.CreatedAt))
	}
	return n
}

func (m *ListRelationshipRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CurrentUid != 0 {
		n += 1 + sovSocialsvc(uint64(m.CurrentUid))
	}
	if m.Uid != 0 {
		n += 1 + sovSocialsvc(uint64(m.Uid))
	}
	l = len(m.RelationType)
	if l > 0 {
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	if m.Paginator != nil {
		l = m.Paginator.Size()
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	return n
}

func (m *ListRelationshipResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovSocialsvc(uint64(m.Code))
	}
	if len(m.Relations) > 0 {
		for _, e := range m.Relations {
			l = e.Size()
			n += 1 + l + sovSocialsvc(uint64(l))
		}
	}
	if m.Paginator != nil {
		l = m.Paginator.Size()
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	return n
}

func (m *Comment) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	if m.Uid != 0 {
		n += 1 + sovSocialsvc(uint64(m.Uid))
	}
	l = len(m.StatusId)
	if l > 0 {
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	l = len(m.ParentId)
	if l > 0 {
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	l = len(m.GroupId)
	if l > 0 {
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	if m.OpponentId != 0 {
		n += 1 + sovSocialsvc(uint64(m.OpponentId))
	}
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	if len(m.Comments) > 0 {
		for _, e := range m.Comments {
			l = e.Size()
			n += 1 + l + sovSocialsvc(uint64(l))
		}
	}
	if m.User != nil {
		l = m.User.Size()
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	if m.Opponent != nil {
		l = m.Opponent.Size()
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	if m.CommentCount != 0 {
		n += 1 + sovSocialsvc(uint64(m.CommentCount))
	}
	if m.LikeCount != 0 {
		n += 1 + sovSocialsvc(uint64(m.LikeCount))
	}
	if m.CreatedAt != 0 {
		n += 1 + sovSocialsvc(uint64(m.CreatedAt))
	}
	if m.IsLiked {
		n += 2
	}
	l = len(m.NftAssetId)
	if l > 0 {
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	return n
}

func (m *GetCommentRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CurrentUid != 0 {
		n += 1 + sovSocialsvc(uint64(m.CurrentUid))
	}
	l = len(m.CommentId)
	if l > 0 {
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	return n
}

func (m *GetCommentResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovSocialsvc(uint64(m.Code))
	}
	if m.Comment != nil {
		l = m.Comment.Size()
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	return n
}

func (m *ListCommentRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CurrentUid != 0 {
		n += 1 + sovSocialsvc(uint64(m.CurrentUid))
	}
	l = len(m.StatusId)
	if l > 0 {
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	l = len(m.TopicId)
	if l > 0 {
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	if m.Paginator != nil {
		l = m.Paginator.Size()
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	l = len(m.NftAssetId)
	if l > 0 {
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	return n
}

func (m *ListCommentResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovSocialsvc(uint64(m.Code))
	}
	if len(m.Comments) > 0 {
		for _, e := range m.Comments {
			l = e.Size()
			n += 1 + l + sovSocialsvc(uint64(l))
		}
	}
	if m.Paginator != nil {
		l = m.Paginator.Size()
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	return n
}

func (m *ListLikeUserRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CurrentUid != 0 {
		n += 1 + sovSocialsvc(uint64(m.CurrentUid))
	}
	l = len(m.TargerId)
	if l > 0 {
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	if m.Paginator != nil {
		l = m.Paginator.Size()
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	return n
}

func (m *Like) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	if m.User != nil {
		l = m.User.Size()
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	return n
}

func (m *ListLikeUserResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovSocialsvc(uint64(m.Code))
	}
	if len(m.Likes) > 0 {
		for _, e := range m.Likes {
			l = e.Size()
			n += 1 + l + sovSocialsvc(uint64(l))
		}
	}
	if m.Paginator != nil {
		l = m.Paginator.Size()
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	return n
}

func (m *CreateCommentRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CurrentUid != 0 {
		n += 1 + sovSocialsvc(uint64(m.CurrentUid))
	}
	l = len(m.StatusId)
	if l > 0 {
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	l = len(m.ParentId)
	if l > 0 {
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	l = len(m.NftAssetId)
	if l > 0 {
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	return n
}

func (m *DeleteCommentRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CurrentUid != 0 {
		n += 1 + sovSocialsvc(uint64(m.CurrentUid))
	}
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	return n
}

func (m *CreateCommentResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovSocialsvc(uint64(m.Code))
	}
	if m.Comment != nil {
		l = m.Comment.Size()
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	return n
}

func (m *NewCommentMeta) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Uid != 0 {
		n += 1 + sovSocialsvc(uint64(m.Uid))
	}
	l = len(m.GroupId)
	if l > 0 {
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	l = len(m.CommentId)
	if l > 0 {
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	l = len(m.ParentContent)
	if l > 0 {
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	l = len(m.ParentUserName)
	if l > 0 {
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	l = len(m.StatusContentSummary)
	if l > 0 {
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	l = len(m.StatusImageUrl)
	if l > 0 {
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	return n
}

func (m *NewNftCommentMeta) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Uid != 0 {
		n += 1 + sovSocialsvc(uint64(m.Uid))
	}
	l = len(m.GroupId)
	if l > 0 {
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	l = len(m.CommentId)
	if l > 0 {
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	l = len(m.ParentContent)
	if l > 0 {
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	l = len(m.ParentUserName)
	if l > 0 {
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	l = len(m.NftAssetName)
	if l > 0 {
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	l = len(m.NftAssetImage)
	if l > 0 {
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	return n
}

func (m *NewLikeNftCommentMeta) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Uid != 0 {
		n += 1 + sovSocialsvc(uint64(m.Uid))
	}
	l = len(m.CommentId)
	if l > 0 {
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	l = len(m.CommentUsername)
	if l > 0 {
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	l = len(m.CommentContent)
	if l > 0 {
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	return n
}

func (m *NewLikeCommentMeta) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Uid != 0 {
		n += 1 + sovSocialsvc(uint64(m.Uid))
	}
	l = len(m.CommentId)
	if l > 0 {
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	l = len(m.CommentUsername)
	if l > 0 {
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	l = len(m.CommentContent)
	if l > 0 {
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	return n
}

func (m *NewLikeNftMeta) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Uid != 0 {
		n += 1 + sovSocialsvc(uint64(m.Uid))
	}
	l = len(m.NftAssetId)
	if l > 0 {
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	l = len(m.NftAssetName)
	if l > 0 {
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	l = len(m.NftAssetImage)
	if l > 0 {
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	return n
}

func (m *NewLikeStatusMeta) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Uid != 0 {
		n += 1 + sovSocialsvc(uint64(m.Uid))
	}
	l = len(m.StatusId)
	if l > 0 {
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	l = len(m.StatusContent)
	if l > 0 {
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	l = len(m.StatusImageUrl)
	if l > 0 {
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	return n
}

func (m *NewFansMeta) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Uid != 0 {
		n += 1 + sovSocialsvc(uint64(m.Uid))
	}
	l = len(m.FanUsername)
	if l > 0 {
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	return n
}

func (m *NewForwardMeta) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Uid != 0 {
		n += 1 + sovSocialsvc(uint64(m.Uid))
	}
	l = len(m.StatusId)
	if l > 0 {
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	l = len(m.ForwardContent)
	if l > 0 {
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	l = len(m.ContentSummary)
	if l > 0 {
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	l = len(m.ImageUrl)
	if l > 0 {
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	return n
}

func (m *Message) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	if m.Uid != 0 {
		n += 1 + sovSocialsvc(uint64(m.Uid))
	}
	l = len(m.MessageType)
	if l > 0 {
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	l = len(m.State)
	if l > 0 {
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	if m.FromUser != nil {
		l = m.FromUser.Size()
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	if m.CreatedAt != 0 {
		n += 1 + sovSocialsvc(uint64(m.CreatedAt))
	}
	if m.Status != nil {
		l = m.Status.Size()
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	if m.StatusIsDeleted {
		n += 2
	}
	if m.CommentIsDeleted {
		n += 2
	}
	if m.NewCommentMeta != nil {
		l = m.NewCommentMeta.Size()
		n += 2 + l + sovSocialsvc(uint64(l))
	}
	if m.NewLikeStatusMeta != nil {
		l = m.NewLikeStatusMeta.Size()
		n += 2 + l + sovSocialsvc(uint64(l))
	}
	if m.NewFansMeta != nil {
		l = m.NewFansMeta.Size()
		n += 2 + l + sovSocialsvc(uint64(l))
	}
	if m.NewForwardMeta != nil {
		l = m.NewForwardMeta.Size()
		n += 2 + l + sovSocialsvc(uint64(l))
	}
	if m.NewLikeCommentMeta != nil {
		l = m.NewLikeCommentMeta.Size()
		n += 2 + l + sovSocialsvc(uint64(l))
	}
	if m.NewNftComment != nil {
		l = m.NewNftComment.Size()
		n += 2 + l + sovSocialsvc(uint64(l))
	}
	if m.NewLikeNft != nil {
		l = m.NewLikeNft.Size()
		n += 2 + l + sovSocialsvc(uint64(l))
	}
	if m.NewLikeNftCommentMeta != nil {
		l = m.NewLikeNftCommentMeta.Size()
		n += 2 + l + sovSocialsvc(uint64(l))
	}
	if m.NftAsset != nil {
		l = m.NftAsset.Size()
		n += 2 + l + sovSocialsvc(uint64(l))
	}
	return n
}

func (m *ListMessageRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CurrentUid != 0 {
		n += 1 + sovSocialsvc(uint64(m.CurrentUid))
	}
	l = len(m.State)
	if l > 0 {
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	if m.Paginator != nil {
		l = m.Paginator.Size()
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	return n
}

func (m *ListMessageResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovSocialsvc(uint64(m.Code))
	}
	if len(m.Messages) > 0 {
		for _, e := range m.Messages {
			l = e.Size()
			n += 1 + l + sovSocialsvc(uint64(l))
		}
	}
	if m.Paginator != nil {
		l = m.Paginator.Size()
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	return n
}

func (m *ReadMessageRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CurrentUid != 0 {
		n += 1 + sovSocialsvc(uint64(m.CurrentUid))
	}
	l = len(m.LatestID)
	if l > 0 {
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	if len(m.Ids) > 0 {
		for _, s := range m.Ids {
			l = len(s)
			n += 1 + l + sovSocialsvc(uint64(l))
		}
	}
	return n
}

func (m *GetMessageSummaryRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CurrentUid != 0 {
		n += 1 + sovSocialsvc(uint64(m.CurrentUid))
	}
	return n
}

func (m *MessageSummaryResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovSocialsvc(uint64(m.Code))
	}
	if m.Summary != nil {
		l = m.Summary.Size()
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	return n
}

func (m *MessageSummary) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LatestMessage != nil {
		l = m.LatestMessage.Size()
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	if m.Total != 0 {
		n += 1 + sovSocialsvc(uint64(m.Total))
	}
	if m.NotificationsCount != 0 {
		n += 1 + sovSocialsvc(uint64(m.NotificationsCount))
	}
	if m.UsersCount != 0 {
		n += 1 + sovSocialsvc(uint64(m.UsersCount))
	}
	return n
}

func (m *LatestFollowingRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CurrentUid != 0 {
		n += 1 + sovSocialsvc(uint64(m.CurrentUid))
	}
	return n
}

func (m *Following) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.User != nil {
		l = m.User.Size()
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	if m.Unread {
		n += 2
	}
	return n
}

func (m *LatestFollowingResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovSocialsvc(uint64(m.Code))
	}
	if len(m.Followings) > 0 {
		for _, e := range m.Followings {
			l = e.Size()
			n += 1 + l + sovSocialsvc(uint64(l))
		}
	}
	return n
}

func (m *Blacklist) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.User != nil {
		l = m.User.Size()
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	if m.CreatedAt != 0 {
		n += 1 + sovSocialsvc(uint64(m.CreatedAt))
	}
	return n
}

func (m *ListBlacklistRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Uid != 0 {
		n += 1 + sovSocialsvc(uint64(m.Uid))
	}
	if m.Paginator != nil {
		l = m.Paginator.Size()
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	return n
}

func (m *ListBlacklistResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovSocialsvc(uint64(m.Code))
	}
	if len(m.Blacklists) > 0 {
		for _, e := range m.Blacklists {
			l = e.Size()
			n += 1 + l + sovSocialsvc(uint64(l))
		}
	}
	if m.Paginator != nil {
		l = m.Paginator.Size()
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	return n
}

func (m *CreateBlacklistRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Uid != 0 {
		n += 1 + sovSocialsvc(uint64(m.Uid))
	}
	if m.TargetUid != 0 {
		n += 1 + sovSocialsvc(uint64(m.TargetUid))
	}
	return n
}

func (m *DeleteBlacklistRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Uid != 0 {
		n += 1 + sovSocialsvc(uint64(m.Uid))
	}
	if m.TargetUid != 0 {
		n += 1 + sovSocialsvc(uint64(m.TargetUid))
	}
	return n
}

func (m *ListLikeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Uid != 0 {
		n += 1 + sovSocialsvc(uint64(m.Uid))
	}
	if m.CurrentUid != 0 {
		n += 1 + sovSocialsvc(uint64(m.CurrentUid))
	}
	if m.Paginator != nil {
		l = m.Paginator.Size()
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	return n
}

func (m *StatusLike) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != nil {
		l = m.Status.Size()
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	if m.CreatedAt != 0 {
		n += 1 + sovSocialsvc(uint64(m.CreatedAt))
	}
	return n
}

func (m *ListLikeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovSocialsvc(uint64(m.Code))
	}
	if len(m.Statuses) > 0 {
		for _, e := range m.Statuses {
			l = e.Size()
			n += 1 + l + sovSocialsvc(uint64(l))
		}
	}
	if m.Paginator != nil {
		l = m.Paginator.Size()
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	return n
}

func (m *LikeCommentRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CurrentUid != 0 {
		n += 1 + sovSocialsvc(uint64(m.CurrentUid))
	}
	l = len(m.CommentId)
	if l > 0 {
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	return n
}

func (m *UnlikeCommentRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CurrentUid != 0 {
		n += 1 + sovSocialsvc(uint64(m.CurrentUid))
	}
	l = len(m.CommentId)
	if l > 0 {
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	return n
}

func (m *ShareTweetUrlRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CurrentUid != 0 {
		n += 1 + sovSocialsvc(uint64(m.CurrentUid))
	}
	return n
}

func (m *ShareTweetUrlResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovSocialsvc(uint64(m.Code))
	}
	l = len(m.Url)
	if l > 0 {
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	return n
}

func (m *TwitterAuthRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *TwitterAuthResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *AirdropTwitterRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Misesid)
	if l > 0 {
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	return n
}

func (m *AirdropTwitterResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *AirdropChannelRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *AirdropChannelResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *CreateAirdropTwitterRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *CreateAirdropTwitterResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *CreateChannelAirdropRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *CreateChannelAirdropResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *UserToChainRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *UserToChainResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *TwitterFollowRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *TwitterFollowResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovSocialsvc(uint64(m.Code))
	}
	return n
}

func (m *ChannelInfoRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Misesid)
	if l > 0 {
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	l = len(m.Medium)
	if l > 0 {
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	return n
}

func (m *ChannelInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovSocialsvc(uint64(m.Code))
	}
	l = len(m.Url)
	if l > 0 {
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	if m.TotalChannelUser != 0 {
		n += 1 + sovSocialsvc(uint64(m.TotalChannelUser))
	}
	if m.AirdropAmount != 0 {
		n += 5
	}
	l = len(m.MediumUrl)
	if l > 0 {
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	l = len(m.IosLink)
	if l > 0 {
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	l = len(m.IosMediumLink)
	if l > 0 {
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	return n
}

func (m *GetChannelUserRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Misesid)
	if l > 0 {
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	return n
}

func (m *GetChannelUserResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovSocialsvc(uint64(m.Code))
	}
	if m.ChanelUser != nil {
		l = m.ChanelUser.Size()
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	return n
}

func (m *OpenseaAsset) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovSocialsvc(uint64(m.Id))
	}
	l = len(m.ImageUrl)
	if l > 0 {
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	return n
}

func (m *GetOpenseaAssetRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AssetContractAddress)
	if l > 0 {
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	l = len(m.TokenId)
	if l > 0 {
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	l = len(m.AccountAddress)
	if l > 0 {
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	l = len(m.IncludeOrders)
	if l > 0 {
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	l = len(m.Network)
	if l > 0 {
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	if m.CurrentUid != 0 {
		n += 1 + sovSocialsvc(uint64(m.CurrentUid))
	}
	return n
}

func (m *GetOpenseaAssetResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovSocialsvc(uint64(m.Code))
	}
	l = len(m.OpenseaAsset)
	if l > 0 {
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	return n
}

func (m *GetOpenseaAssetContractRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AssetContractAddress)
	if l > 0 {
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	l = len(m.TokenId)
	if l > 0 {
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	l = len(m.AccountAddress)
	if l > 0 {
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	l = len(m.IncludeOrders)
	if l > 0 {
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	l = len(m.Network)
	if l > 0 {
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	if m.CurrentUid != 0 {
		n += 1 + sovSocialsvc(uint64(m.CurrentUid))
	}
	return n
}

func (m *GetOpenseaAssetContractResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovSocialsvc(uint64(m.Code))
	}
	l = len(m.OpenseaAsset)
	if l > 0 {
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	return n
}

func (m *ListOpenseaAssetRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	if m.Limit != 0 {
		n += 1 + sovSocialsvc(uint64(m.Limit))
	}
	l = len(m.Cursor)
	if l > 0 {
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	l = len(m.Network)
	if l > 0 {
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	if m.CurrentUid != 0 {
		n += 1 + sovSocialsvc(uint64(m.CurrentUid))
	}
	return n
}

func (m *ListOpenseaAssetResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovSocialsvc(uint64(m.Code))
	}
	l = len(m.Assets)
	if l > 0 {
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	l = len(m.Next)
	if l > 0 {
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	l = len(m.Previous)
	if l > 0 {
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	return n
}

func (m *NftCollection) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	l = len(m.Slug)
	if l > 0 {
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	if m.Stats != nil {
		l = m.Stats.Size()
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	if len(m.PaymentToken) > 0 {
		for _, e := range m.PaymentToken {
			l = e.Size()
			n += 1 + l + sovSocialsvc(uint64(l))
		}
	}
	return n
}

func (m *AssetContract) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	return n
}

func (m *NftAsset) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	l = len(m.ImageUrl)
	if l > 0 {
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	l = len(m.ImagePreviewUrl)
	if l > 0 {
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	l = len(m.ImageThumbnailUrl)
	if l > 0 {
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	l = len(m.PermaLink)
	if l > 0 {
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	if m.LikesCount != 0 {
		n += 1 + sovSocialsvc(uint64(m.LikesCount))
	}
	if m.CommentsCount != 0 {
		n += 1 + sovSocialsvc(uint64(m.CommentsCount))
	}
	l = len(m.TokenId)
	if l > 0 {
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	if m.Collection != nil {
		l = m.Collection.Size()
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	if m.AssetContract != nil {
		l = m.AssetContract.Size()
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	if m.IsLiked {
		n += 2
	}
	if m.User != nil {
		l = m.User.Size()
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	return n
}

func (m *PageNftAssetRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CurrentUid != 0 {
		n += 1 + sovSocialsvc(uint64(m.CurrentUid))
	}
	if m.Uid != 0 {
		n += 1 + sovSocialsvc(uint64(m.Uid))
	}
	if m.Paginator != nil {
		l = m.Paginator.Size()
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	l = len(m.SortBy)
	if l > 0 {
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	l = len(m.Scene)
	if l > 0 {
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	return n
}

func (m *PageNftAssetResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovSocialsvc(uint64(m.Code))
	}
	if len(m.Assets) > 0 {
		for _, e := range m.Assets {
			l = e.Size()
			n += 1 + l + sovSocialsvc(uint64(l))
		}
	}
	if m.Paginator != nil {
		l = m.Paginator.Size()
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	return n
}

func (m *GetNftAssetRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CurrentUid != 0 {
		n += 1 + sovSocialsvc(uint64(m.CurrentUid))
	}
	l = len(m.NftAssetId)
	if l > 0 {
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	return n
}

func (m *GetNftAssetResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovSocialsvc(uint64(m.Code))
	}
	if m.Asset != nil {
		l = m.Asset.Size()
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	return n
}

func (m *UserConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NftState {
		n += 2
	}
	return n
}

func (m *UpdateUserConfigRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CurrentUid != 0 {
		n += 1 + sovSocialsvc(uint64(m.CurrentUid))
	}
	if m.NftState {
		n += 2
	}
	return n
}

func (m *UpdateUserConfigResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovSocialsvc(uint64(m.Code))
	}
	if m.Config != nil {
		l = m.Config.Size()
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	return n
}

func (m *GetUserConfigRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CurrentUid != 0 {
		n += 1 + sovSocialsvc(uint64(m.CurrentUid))
	}
	if m.Uid != 0 {
		n += 1 + sovSocialsvc(uint64(m.Uid))
	}
	return n
}

func (m *GetUserConfigResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovSocialsvc(uint64(m.Code))
	}
	if m.Config != nil {
		l = m.Config.Size()
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	return n
}

func (m *NftAccount) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	if m.MisesUser != nil {
		l = m.MisesUser.Size()
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	l = len(m.ProfileImgUrl)
	if l > 0 {
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	return n
}

func (m *PaymentToken) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovSocialsvc(uint64(m.Id))
	}
	l = len(m.Symbol)
	if l > 0 {
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	l = len(m.EthPrice)
	if l > 0 {
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	l = len(m.UsdPrice)
	if l > 0 {
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	if m.Decimals != 0 {
		n += 1 + sovSocialsvc(uint64(m.Decimals))
	}
	return n
}

func (m *Stats) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FloorPrice != 0 {
		n += 5
	}
	return n
}

func (m *NftEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	l = len(m.EventType)
	if l > 0 {
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	if m.FromAccount != nil {
		l = m.FromAccount.Size()
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	if m.ToAccount != nil {
		l = m.ToAccount.Size()
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	l = len(m.CreatedDate)
	if l > 0 {
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	if m.PaymentToken != nil {
		l = m.PaymentToken.Size()
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	return n
}

func (m *PageNftEventRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CurrentUid != 0 {
		n += 1 + sovSocialsvc(uint64(m.CurrentUid))
	}
	l = len(m.NftAssetId)
	if l > 0 {
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	if m.Paginator != nil {
		l = m.Paginator.Size()
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	return n
}

func (m *PageNftEventResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovSocialsvc(uint64(m.Code))
	}
	if len(m.Event) > 0 {
		for _, e := range m.Event {
			l = e.Size()
			n += 1 + l + sovSocialsvc(uint64(l))
		}
	}
	if m.Paginator != nil {
		l = m.Paginator.Size()
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	return n
}

func (m *UpdateOpenseaNftRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *UpdateOpenseaNftResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovSocialsvc(uint64(m.Code))
	}
	return n
}

func (m *GetTwitterAuthUrlRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CurrentUid != 0 {
		n += 1 + sovSocialsvc(uint64(m.CurrentUid))
	}
	return n
}

func (m *GetTwitterAuthUrlResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovSocialsvc(uint64(m.Code))
	}
	l = len(m.Url)
	if l > 0 {
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	return n
}

func (m *UserTwitterAuth) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TwitterUserId)
	if l > 0 {
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	l = len(m.Username)
	if l > 0 {
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	if m.FollowersCount != 0 {
		n += 1 + sovSocialsvc(uint64(m.FollowersCount))
	}
	if m.TweetCount != 0 {
		n += 1 + sovSocialsvc(uint64(m.TweetCount))
	}
	if m.TwitterCreatedAt != 0 {
		n += 1 + sovSocialsvc(uint64(m.TwitterCreatedAt))
	}
	if m.Amount != 0 {
		n += 5
	}
	if m.CreatedAt != 0 {
		n += 1 + sovSocialsvc(uint64(m.CreatedAt))
	}
	l = len(m.Misesid)
	if l > 0 {
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	return n
}

func (m *Airdrop) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Coin != 0 {
		n += 5
	}
	if m.CreatedAt != 0 {
		n += 1 + sovSocialsvc(uint64(m.CreatedAt))
	}
	if m.FinishAt != 0 {
		n += 1 + sovSocialsvc(uint64(m.FinishAt))
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	return n
}

func (m *GetAirdropInfoRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CurrentUid != 0 {
		n += 1 + sovSocialsvc(uint64(m.CurrentUid))
	}
	return n
}

func (m *GetAirdropInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovSocialsvc(uint64(m.Code))
	}
	if m.Twitter != nil {
		l = m.Twitter.Size()
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	if m.Airdrop != nil {
		l = m.Airdrop.Size()
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	return n
}

func (m *TwitterCallbackRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CurrentUid != 0 {
		n += 1 + sovSocialsvc(uint64(m.CurrentUid))
	}
	l = len(m.OauthToken)
	if l > 0 {
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	l = len(m.OauthVerifier)
	if l > 0 {
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	return n
}

func (m *TwitterCallbackResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovSocialsvc(uint64(m.Code))
	}
	l = len(m.Url)
	if l > 0 {
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	return n
}

func (m *ReceiveAirdropRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CurrentUid != 0 {
		n += 1 + sovSocialsvc(uint64(m.CurrentUid))
	}
	l = len(m.Tweet)
	if l > 0 {
		n += 1 + l + sovSocialsvc(uint64(l))
	}
	return n
}

func (m *ReceiveAirdropResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovSocialsvc(uint64(m.Code))
	}
	return n
}

func sovSocialsvc(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozSocialsvc(x uint64) (n int) {
	return sovSocialsvc(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SignInRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSocialsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SignInRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SignInRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Auth", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Auth = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Referrer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Referrer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSocialsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SignInResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSocialsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SignInResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SignInResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Jwt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Jwt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsCreated", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsCreated = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipSocialsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ComplaintRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSocialsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ComplaintRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ComplaintRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentUid", wireType)
			}
			m.CurrentUid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentUid |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TargetType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TargetId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSocialsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ComplaintResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSocialsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ComplaintResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ComplaintResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSocialsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserAvatar) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSocialsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserAvatar: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserAvatar: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Small", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Small = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Medium", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Medium = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Large", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Large = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NftAssetId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NftAssetId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSocialsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSocialsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Username", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Username = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Misesid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Misesid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Gender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mobile", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Mobile = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Email", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Email = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Avatar", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Avatar = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsFollowed", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsFollowed = bool(v != 0)
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsBlocked", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsBlocked = bool(v != 0)
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FollowingsCount", wireType)
			}
			m.FollowingsCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FollowingsCount |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FansCount", wireType)
			}
			m.FansCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FansCount |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LikedCount", wireType)
			}
			m.LikedCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LikedCount |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewFansCount", wireType)
			}
			m.NewFansCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NewFansCount |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AvatarUrl", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AvatarUrl == nil {
				m.AvatarUrl = &UserAvatar{}
			}
			if err := m.AvatarUrl.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsAirdropped", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsAirdropped = bool(v != 0)
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AirdropStatus", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AirdropStatus = bool(v != 0)
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsLogined", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsLogined = bool(v != 0)
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HelpMisesid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HelpMisesid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Intro", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Intro = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSocialsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FindMisesUserRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSocialsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FindMisesUserRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FindMisesUserRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Misesid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Misesid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentUid", wireType)
			}
			m.CurrentUid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentUid |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSocialsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FindMisesUserResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSocialsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FindMisesUserResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FindMisesUserResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.User == nil {
				m.User = &UserInfo{}
			}
			if err := m.User.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsFollowed", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsFollowed = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipSocialsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FindUserRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSocialsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FindUserRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FindUserRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentUid", wireType)
			}
			m.CurrentUid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentUid |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSocialsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FindUserResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSocialsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FindUserResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FindUserResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.User == nil {
				m.User = &UserInfo{}
			}
			if err := m.User.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsFollowed", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsFollowed = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipSocialsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateUserProfileRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSocialsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateUserProfileRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateUserProfileRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Gender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mobile", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Mobile = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Email", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Email = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Intro", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Intro = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSocialsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateUserAvatarRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSocialsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateUserAvatarRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateUserAvatarRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttachmentPath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AttachmentPath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NftAssetId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NftAssetId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSocialsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateUserNameRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSocialsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateUserNameRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateUserNameRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Username", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Username = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSocialsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateUserResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSocialsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateUserResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateUserResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.User == nil {
				m.User = &UserInfo{}
			}
			if err := m.User.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSocialsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LinkMetaInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSocialsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LinkMetaInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LinkMetaInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Host", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Host = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Link", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Link = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImagePath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ImagePath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImageUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ImageUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSocialsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ImageMetaInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSocialsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ImageMetaInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ImageMetaInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Images", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Images = append(m.Images, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ThumbImages", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ThumbImages = append(m.ThumbImages, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSocialsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StatusInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSocialsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StatusInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StatusInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.User == nil {
				m.User = &UserInfo{}
			}
			if err := m.User.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FromType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatusType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StatusType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Parent", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Parent == nil {
				m.Parent = &StatusInfo{}
			}
			if err := m.Parent.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Origin", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Origin == nil {
				m.Origin = &StatusInfo{}
			}
			if err := m.Origin.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommentCount", wireType)
			}
			m.CommentCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CommentCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LikeCount", wireType)
			}
			m.LikeCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LikeCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForwardCount", wireType)
			}
			m.ForwardCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ForwardCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsLiked", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsLiked = bool(v != 0)
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LinkMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LinkMeta == nil {
				m.LinkMeta = &LinkMetaInfo{}
			}
			if err := m.LinkMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			m.CreatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatedAt |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImageMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ImageMeta == nil {
				m.ImageMeta = &ImageMetaInfo{}
			}
			if err := m.ImageMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsPublic", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsPublic = bool(v != 0)
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HideTime", wireType)
			}
			m.HideTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HideTime |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParentStatusIsDeleted", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ParentStatusIsDeleted = bool(v != 0)
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParentStatusIsBlacked", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ParentStatusIsBlacked = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipSocialsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetStatusRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSocialsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetStatusRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetStatusRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentUid", wireType)
			}
			m.CurrentUid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentUid |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Statusid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Statusid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSocialsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetStatusResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSocialsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetStatusResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetStatusResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Status == nil {
				m.Status = &StatusInfo{}
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSocialsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PageQuick) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSocialsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PageQuick: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PageQuick: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NextId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			m.Total = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Total |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSocialsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Page) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSocialsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Page: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Page: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalRecords", wireType)
			}
			m.TotalRecords = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalRecords |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageSize", wireType)
			}
			m.PageSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PageSize |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageNum", wireType)
			}
			m.PageNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PageNum |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalPage", wireType)
			}
			m.TotalPage = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalPage |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSocialsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListStatusRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSocialsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListStatusRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListStatusRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentUid", wireType)
			}
			m.CurrentUid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentUid |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetUid", wireType)
			}
			m.TargetUid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TargetUid |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParentId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ParentId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromTypes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FromTypes = append(m.FromTypes, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Paginator", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Paginator == nil {
				m.Paginator = &PageQuick{}
			}
			if err := m.Paginator.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSocialsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListStatusResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSocialsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListStatusResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListStatusResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Statuses", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Statuses = append(m.Statuses, &StatusInfo{})
			if err := m.Statuses[len(m.Statuses)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Paginator", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Paginator == nil {
				m.Paginator = &PageQuick{}
			}
			if err := m.Paginator.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSocialsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PageChannelUserRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSocialsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PageChannelUserRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PageChannelUserRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Misesid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Misesid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Paginator", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Paginator == nil {
				m.Paginator = &Page{}
			}
			if err := m.Paginator.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSocialsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChannelUserInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSocialsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChannelUserInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChannelUserInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChannelId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidState", wireType)
			}
			m.ValidState = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ValidState |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.User == nil {
				m.User = &UserInfo{}
			}
			if err := m.User.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AirdropState", wireType)
			}
			m.AirdropState = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AirdropState |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AirdropTime", wireType)
			}
			m.AirdropTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AirdropTime |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			m.CreatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatedAt |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelUid", wireType)
			}
			m.ChannelUid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelUid |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelMisesid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChannelMisesid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSocialsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PageChannelUserResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSocialsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PageChannelUserResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PageChannelUserResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelUsers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChannelUsers = append(m.ChannelUsers, &ChannelUserInfo{})
			if err := m.ChannelUsers[len(m.ChannelUsers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Paginator", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Paginator == nil {
				m.Paginator = &Page{}
			}
			if err := m.Paginator.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSocialsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NewListStatusRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSocialsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NewListStatusRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NewListStatusRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentUid", wireType)
			}
			m.CurrentUid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentUid |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetUid", wireType)
			}
			m.TargetUid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TargetUid |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ids", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ids = append(m.Ids, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListNum", wireType)
			}
			m.ListNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ListNum |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromTypes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FromTypes = append(m.FromTypes, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSocialsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NewListStatusResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSocialsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NewListStatusResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NewListStatusResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Statuses", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Statuses = append(m.Statuses, &StatusInfo{})
			if err := m.Statuses[len(m.Statuses)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSocialsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NewRecommendNext) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSocialsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NewRecommendNext: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NewRecommendNext: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastRecommendTime", wireType)
			}
			m.LastRecommendTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastRecommendTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastCommonTime", wireType)
			}
			m.LastCommonTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastCommonTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSocialsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NewRecommendStatusRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSocialsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NewRecommendStatusRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NewRecommendStatusRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentUid", wireType)
			}
			m.CurrentUid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentUid |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastRecommendTime", wireType)
			}
			m.LastRecommendTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastRecommendTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastCommonTime", wireType)
			}
			m.LastCommonTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastCommonTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSocialsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NewRecommendStatusResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSocialsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NewRecommendStatusResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NewRecommendStatusResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Statuses", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Statuses = append(m.Statuses, &StatusInfo{})
			if err := m.Statuses[len(m.Statuses)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Next", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Next == nil {
				m.Next = &NewRecommendNext{}
			}
			if err := m.Next.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Num", wireType)
			}
			m.Num = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Num |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSocialsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateStatusRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSocialsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateStatusRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateStatusRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentUid", wireType)
			}
			m.CurrentUid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentUid |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatusType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StatusType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParentId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ParentId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Meta", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Meta = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FromType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Images", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Images = append(m.Images, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsPrivate", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsPrivate = bool(v != 0)
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShowDuration", wireType)
			}
			m.ShowDuration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ShowDuration |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSocialsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateStatusRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSocialsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateStatusRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateStatusRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentUid", wireType)
			}
			m.CurrentUid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentUid |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatusId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StatusId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsPrivate", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsPrivate = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShowDuration", wireType)
			}
			m.ShowDuration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ShowDuration |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSocialsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateStatusResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSocialsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateStatusResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateStatusResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Status == nil {
				m.Status = &StatusInfo{}
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSocialsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateStatusResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSocialsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateStatusResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateStatusResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Status == nil {
				m.Status = &StatusInfo{}
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSocialsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteStatusRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSocialsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteStatusRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteStatusRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentUid", wireType)
			}
			m.CurrentUid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentUid |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Statusid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Statusid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSocialsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SimpleResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSocialsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SimpleResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SimpleResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSocialsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LikeStatusRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSocialsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LikeStatusRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LikeStatusRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentUid", wireType)
			}
			m.CurrentUid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentUid |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Statusid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Statusid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NftAssetId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NftAssetId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSocialsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UnLikeStatusRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSocialsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UnLikeStatusRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UnLikeStatusRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentUid", wireType)
			}
			m.CurrentUid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentUid |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Statusid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Statusid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NftAssetId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NftAssetId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSocialsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LikeNftAssetRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSocialsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LikeNftAssetRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LikeNftAssetRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentUid", wireType)
			}
			m.CurrentUid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentUid |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NftAssetId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NftAssetId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSocialsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UnLikeNftAssetRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSocialsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UnLikeNftAssetRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UnLikeNftAssetRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentUid", wireType)
			}
			m.CurrentUid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentUid |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NftAssetId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NftAssetId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSocialsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FollowRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSocialsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FollowRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FollowRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentUid", wireType)
			}
			m.CurrentUid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentUid |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetUid", wireType)
			}
			m.TargetUid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TargetUid |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSocialsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UnFollowRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSocialsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UnFollowRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UnFollowRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentUid", wireType)
			}
			m.CurrentUid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentUid |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetUid", wireType)
			}
			m.TargetUid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TargetUid |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSocialsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RelationInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSocialsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RelationInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RelationInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.User == nil {
				m.User = &UserInfo{}
			}
			if err := m.User.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RelationType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RelationType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			m.CreatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatedAt |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSocialsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListRelationshipRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSocialsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListRelationshipRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListRelationshipRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentUid", wireType)
			}
			m.CurrentUid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentUid |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RelationType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RelationType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Paginator", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Paginator == nil {
				m.Paginator = &PageQuick{}
			}
			if err := m.Paginator.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSocialsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListRelationshipResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSocialsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListRelationshipResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListRelationshipResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Relations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Relations = append(m.Relations, &RelationInfo{})
			if err := m.Relations[len(m.Relations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Paginator", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Paginator == nil {
				m.Paginator = &PageQuick{}
			}
			if err := m.Paginator.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSocialsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Comment) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSocialsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Comment: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Comment: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatusId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StatusId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParentId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ParentId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OpponentId", wireType)
			}
			m.OpponentId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OpponentId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Comments", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Comments = append(m.Comments, &Comment{})
			if err := m.Comments[len(m.Comments)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.User == nil {
				m.User = &UserInfo{}
			}
			if err := m.User.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Opponent", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Opponent == nil {
				m.Opponent = &UserInfo{}
			}
			if err := m.Opponent.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommentCount", wireType)
			}
			m.CommentCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CommentCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LikeCount", wireType)
			}
			m.LikeCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LikeCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			m.CreatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatedAt |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsLiked", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsLiked = bool(v != 0)
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NftAssetId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NftAssetId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSocialsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetCommentRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSocialsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetCommentRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetCommentRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentUid", wireType)
			}
			m.CurrentUid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentUid |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommentId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CommentId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSocialsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetCommentResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSocialsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetCommentResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetCommentResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Comment", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Comment == nil {
				m.Comment = &Comment{}
			}
			if err := m.Comment.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSocialsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListCommentRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSocialsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListCommentRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListCommentRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentUid", wireType)
			}
			m.CurrentUid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentUid |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatusId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StatusId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TopicId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Paginator", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Paginator == nil {
				m.Paginator = &PageQuick{}
			}
			if err := m.Paginator.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NftAssetId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NftAssetId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSocialsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListCommentResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSocialsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListCommentResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListCommentResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Comments", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Comments = append(m.Comments, &Comment{})
			if err := m.Comments[len(m.Comments)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Paginator", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Paginator == nil {
				m.Paginator = &PageQuick{}
			}
			if err := m.Paginator.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSocialsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListLikeUserRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSocialsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListLikeUserRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListLikeUserRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentUid", wireType)
			}
			m.CurrentUid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentUid |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TargerId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Paginator", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Paginator == nil {
				m.Paginator = &PageQuick{}
			}
			if err := m.Paginator.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSocialsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Like) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSocialsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Like: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Like: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.User == nil {
				m.User = &UserInfo{}
			}
			if err := m.User.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSocialsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListLikeUserResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSocialsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListLikeUserResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListLikeUserResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Likes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Likes = append(m.Likes, &Like{})
			if err := m.Likes[len(m.Likes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Paginator", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Paginator == nil {
				m.Paginator = &PageQuick{}
			}
			if err := m.Paginator.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSocialsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateCommentRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSocialsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateCommentRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateCommentRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentUid", wireType)
			}
			m.CurrentUid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentUid |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatusId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StatusId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParentId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ParentId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NftAssetId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NftAssetId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSocialsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteCommentRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSocialsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteCommentRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteCommentRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentUid", wireType)
			}
			m.CurrentUid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentUid |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSocialsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateCommentResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSocialsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateCommentResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateCommentResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Comment", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Comment == nil {
				m.Comment = &Comment{}
			}
			if err := m.Comment.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSocialsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NewCommentMeta) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSocialsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NewCommentMeta: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NewCommentMeta: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommentId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CommentId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParentContent", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ParentContent = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParentUserName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ParentUserName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatusContentSummary", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StatusContentSummary = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatusImageUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StatusImageUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSocialsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NewNftCommentMeta) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSocialsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NewNftCommentMeta: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NewNftCommentMeta: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommentId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CommentId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParentContent", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ParentContent = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParentUserName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ParentUserName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NftAssetName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NftAssetName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NftAssetImage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NftAssetImage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSocialsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NewLikeNftCommentMeta) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSocialsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NewLikeNftCommentMeta: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NewLikeNftCommentMeta: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommentId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CommentId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommentUsername", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CommentUsername = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommentContent", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CommentContent = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSocialsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NewLikeCommentMeta) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSocialsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NewLikeCommentMeta: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NewLikeCommentMeta: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommentId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CommentId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommentUsername", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CommentUsername = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommentContent", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CommentContent = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSocialsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NewLikeNftMeta) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSocialsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NewLikeNftMeta: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NewLikeNftMeta: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NftAssetId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NftAssetId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NftAssetName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NftAssetName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NftAssetImage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NftAssetImage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSocialsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NewLikeStatusMeta) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSocialsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NewLikeStatusMeta: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NewLikeStatusMeta: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatusId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StatusId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatusContent", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StatusContent = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatusImageUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StatusImageUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSocialsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NewFansMeta) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSocialsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NewFansMeta: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NewFansMeta: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FanUsername", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FanUsername = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSocialsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NewForwardMeta) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSocialsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NewForwardMeta: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NewForwardMeta: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatusId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StatusId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForwardContent", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ForwardContent = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContentSummary", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContentSummary = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImageUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ImageUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSocialsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Message) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSocialsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Message: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Message: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MessageType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.State = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromUser", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FromUser == nil {
				m.FromUser = &UserInfo{}
			}
			if err := m.FromUser.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			m.CreatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatedAt |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Status == nil {
				m.Status = &StatusInfo{}
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatusIsDeleted", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.StatusIsDeleted = bool(v != 0)
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommentIsDeleted", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CommentIsDeleted = bool(v != 0)
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewCommentMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NewCommentMeta == nil {
				m.NewCommentMeta = &NewCommentMeta{}
			}
			if err := m.NewCommentMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewLikeStatusMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NewLikeStatusMeta == nil {
				m.NewLikeStatusMeta = &NewLikeStatusMeta{}
			}
			if err := m.NewLikeStatusMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewFansMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NewFansMeta == nil {
				m.NewFansMeta = &NewFansMeta{}
			}
			if err := m.NewFansMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewForwardMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NewForwardMeta == nil {
				m.NewForwardMeta = &NewForwardMeta{}
			}
			if err := m.NewForwardMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 25:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewLikeCommentMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NewLikeCommentMeta == nil {
				m.NewLikeCommentMeta = &NewLikeCommentMeta{}
			}
			if err := m.NewLikeCommentMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 26:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewNftComment", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NewNftComment == nil {
				m.NewNftComment = &NewNftCommentMeta{}
			}
			if err := m.NewNftComment.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 27:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewLikeNft", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NewLikeNft == nil {
				m.NewLikeNft = &NewLikeNftMeta{}
			}
			if err := m.NewLikeNft.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 28:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewLikeNftCommentMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NewLikeNftCommentMeta == nil {
				m.NewLikeNftCommentMeta = &NewLikeNftCommentMeta{}
			}
			if err := m.NewLikeNftCommentMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 29:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NftAsset", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NftAsset == nil {
				m.NftAsset = &NftAsset{}
			}
			if err := m.NftAsset.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSocialsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListMessageRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSocialsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListMessageRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListMessageRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentUid", wireType)
			}
			m.CurrentUid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentUid |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.State = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Paginator", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Paginator == nil {
				m.Paginator = &PageQuick{}
			}
			if err := m.Paginator.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSocialsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListMessageResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSocialsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListMessageResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListMessageResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Messages", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Messages = append(m.Messages, &Message{})
			if err := m.Messages[len(m.Messages)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Paginator", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Paginator == nil {
				m.Paginator = &PageQuick{}
			}
			if err := m.Paginator.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSocialsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReadMessageRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSocialsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReadMessageRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReadMessageRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentUid", wireType)
			}
			m.CurrentUid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentUid |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LatestID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LatestID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ids", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ids = append(m.Ids, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSocialsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetMessageSummaryRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSocialsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetMessageSummaryRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetMessageSummaryRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentUid", wireType)
			}
			m.CurrentUid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentUid |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSocialsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MessageSummaryResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSocialsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MessageSummaryResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MessageSummaryResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Summary", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Summary == nil {
				m.Summary = &MessageSummary{}
			}
			if err := m.Summary.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSocialsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MessageSummary) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSocialsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MessageSummary: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MessageSummary: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LatestMessage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LatestMessage == nil {
				m.LatestMessage = &Message{}
			}
			if err := m.LatestMessage.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			m.Total = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Total |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NotificationsCount", wireType)
			}
			m.NotificationsCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NotificationsCount |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UsersCount", wireType)
			}
			m.UsersCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UsersCount |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSocialsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LatestFollowingRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSocialsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LatestFollowingRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LatestFollowingRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentUid", wireType)
			}
			m.CurrentUid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentUid |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSocialsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Following) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSocialsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Following: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Following: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.User == nil {
				m.User = &UserInfo{}
			}
			if err := m.User.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Unread", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Unread = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipSocialsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LatestFollowingResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSocialsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LatestFollowingResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LatestFollowingResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Followings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Followings = append(m.Followings, &Following{})
			if err := m.Followings[len(m.Followings)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSocialsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Blacklist) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSocialsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Blacklist: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Blacklist: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.User == nil {
				m.User = &UserInfo{}
			}
			if err := m.User.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			m.CreatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatedAt |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSocialsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListBlacklistRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSocialsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListBlacklistRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListBlacklistRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Paginator", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Paginator == nil {
				m.Paginator = &PageQuick{}
			}
			if err := m.Paginator.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSocialsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListBlacklistResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSocialsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListBlacklistResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListBlacklistResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Blacklists", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Blacklists = append(m.Blacklists, &Blacklist{})
			if err := m.Blacklists[len(m.Blacklists)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Paginator", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Paginator == nil {
				m.Paginator = &PageQuick{}
			}
			if err := m.Paginator.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSocialsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateBlacklistRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSocialsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateBlacklistRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateBlacklistRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetUid", wireType)
			}
			m.TargetUid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TargetUid |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSocialsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteBlacklistRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSocialsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteBlacklistRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteBlacklistRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetUid", wireType)
			}
			m.TargetUid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TargetUid |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSocialsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListLikeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSocialsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListLikeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListLikeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentUid", wireType)
			}
			m.CurrentUid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentUid |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Paginator", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Paginator == nil {
				m.Paginator = &PageQuick{}
			}
			if err := m.Paginator.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSocialsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StatusLike) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSocialsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StatusLike: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StatusLike: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Status == nil {
				m.Status = &StatusInfo{}
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			m.CreatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatedAt |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSocialsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListLikeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSocialsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListLikeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListLikeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Statuses", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Statuses = append(m.Statuses, &StatusLike{})
			if err := m.Statuses[len(m.Statuses)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Paginator", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Paginator == nil {
				m.Paginator = &PageQuick{}
			}
			if err := m.Paginator.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSocialsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LikeCommentRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSocialsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LikeCommentRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LikeCommentRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentUid", wireType)
			}
			m.CurrentUid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentUid |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommentId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CommentId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSocialsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UnlikeCommentRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSocialsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UnlikeCommentRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UnlikeCommentRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentUid", wireType)
			}
			m.CurrentUid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentUid |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommentId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CommentId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSocialsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ShareTweetUrlRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSocialsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ShareTweetUrlRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ShareTweetUrlRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentUid", wireType)
			}
			m.CurrentUid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentUid |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSocialsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ShareTweetUrlResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSocialsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ShareTweetUrlResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ShareTweetUrlResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Url = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSocialsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TwitterAuthRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSocialsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TwitterAuthRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TwitterAuthRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipSocialsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TwitterAuthResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSocialsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TwitterAuthResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TwitterAuthResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipSocialsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AirdropTwitterRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSocialsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AirdropTwitterRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AirdropTwitterRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Misesid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Misesid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSocialsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AirdropTwitterResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSocialsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AirdropTwitterResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AirdropTwitterResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipSocialsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AirdropChannelRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSocialsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AirdropChannelRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AirdropChannelRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipSocialsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AirdropChannelResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSocialsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AirdropChannelResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AirdropChannelResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipSocialsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateAirdropTwitterRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSocialsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateAirdropTwitterRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateAirdropTwitterRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipSocialsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateAirdropTwitterResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSocialsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateAirdropTwitterResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateAirdropTwitterResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipSocialsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateChannelAirdropRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSocialsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateChannelAirdropRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateChannelAirdropRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipSocialsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateChannelAirdropResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSocialsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateChannelAirdropResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateChannelAirdropResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipSocialsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserToChainRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSocialsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserToChainRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserToChainRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipSocialsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserToChainResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSocialsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserToChainResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserToChainResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipSocialsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TwitterFollowRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSocialsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TwitterFollowRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TwitterFollowRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipSocialsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TwitterFollowResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSocialsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TwitterFollowResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TwitterFollowResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSocialsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChannelInfoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSocialsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChannelInfoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChannelInfoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Misesid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Misesid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Medium", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Medium = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSocialsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChannelInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSocialsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChannelInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChannelInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Url = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalChannelUser", wireType)
			}
			m.TotalChannelUser = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalChannelUser |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field AirdropAmount", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.AirdropAmount = float32(math.Float32frombits(v))
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MediumUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MediumUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IosLink", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IosLink = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IosMediumLink", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IosMediumLink = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSocialsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetChannelUserRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSocialsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetChannelUserRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetChannelUserRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Misesid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Misesid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSocialsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetChannelUserResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSocialsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetChannelUserResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetChannelUserResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChanelUser", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ChanelUser == nil {
				m.ChanelUser = &ChannelUserInfo{}
			}
			if err := m.ChanelUser.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSocialsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OpenseaAsset) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSocialsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OpenseaAsset: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OpenseaAsset: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImageUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ImageUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSocialsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetOpenseaAssetRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSocialsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetOpenseaAssetRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetOpenseaAssetRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetContractAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AssetContractAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccountAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IncludeOrders", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IncludeOrders = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Network", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Network = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentUid", wireType)
			}
			m.CurrentUid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentUid |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSocialsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetOpenseaAssetResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSocialsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetOpenseaAssetResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetOpenseaAssetResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OpenseaAsset", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OpenseaAsset = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSocialsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetOpenseaAssetContractRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSocialsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetOpenseaAssetContractRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetOpenseaAssetContractRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetContractAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AssetContractAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccountAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IncludeOrders", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IncludeOrders = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Network", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Network = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentUid", wireType)
			}
			m.CurrentUid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentUid |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSocialsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetOpenseaAssetContractResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSocialsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetOpenseaAssetContractResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetOpenseaAssetContractResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OpenseaAsset", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OpenseaAsset = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSocialsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListOpenseaAssetRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSocialsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListOpenseaAssetRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListOpenseaAssetRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cursor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cursor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Network", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Network = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentUid", wireType)
			}
			m.CurrentUid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentUid |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSocialsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListOpenseaAssetResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSocialsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListOpenseaAssetResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListOpenseaAssetResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Assets", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Assets = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Next", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Next = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Previous", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Previous = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSocialsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NftCollection) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSocialsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NftCollection: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NftCollection: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Slug", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Slug = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Stats == nil {
				m.Stats = &Stats{}
			}
			if err := m.Stats.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaymentToken", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PaymentToken = append(m.PaymentToken, &PaymentToken{})
			if err := m.PaymentToken[len(m.PaymentToken)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSocialsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AssetContract) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSocialsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AssetContract: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AssetContract: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSocialsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NftAsset) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSocialsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NftAsset: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NftAsset: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImageUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ImageUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImagePreviewUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ImagePreviewUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImageThumbnailUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ImageThumbnailUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PermaLink", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PermaLink = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LikesCount", wireType)
			}
			m.LikesCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LikesCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommentsCount", wireType)
			}
			m.CommentsCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CommentsCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Collection", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Collection == nil {
				m.Collection = &NftCollection{}
			}
			if err := m.Collection.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetContract", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AssetContract == nil {
				m.AssetContract = &AssetContract{}
			}
			if err := m.AssetContract.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsLiked", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsLiked = bool(v != 0)
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.User == nil {
				m.User = &UserInfo{}
			}
			if err := m.User.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSocialsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PageNftAssetRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSocialsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PageNftAssetRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PageNftAssetRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentUid", wireType)
			}
			m.CurrentUid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentUid |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Paginator", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Paginator == nil {
				m.Paginator = &PageQuick{}
			}
			if err := m.Paginator.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SortBy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SortBy = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Scene", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Scene = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSocialsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PageNftAssetResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSocialsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PageNftAssetResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PageNftAssetResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Assets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Assets = append(m.Assets, &NftAsset{})
			if err := m.Assets[len(m.Assets)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Paginator", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Paginator == nil {
				m.Paginator = &PageQuick{}
			}
			if err := m.Paginator.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSocialsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetNftAssetRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSocialsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetNftAssetRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetNftAssetRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentUid", wireType)
			}
			m.CurrentUid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentUid |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NftAssetId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NftAssetId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSocialsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetNftAssetResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSocialsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetNftAssetResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetNftAssetResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Asset", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Asset == nil {
				m.Asset = &NftAsset{}
			}
			if err := m.Asset.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSocialsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSocialsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NftState", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NftState = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipSocialsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateUserConfigRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSocialsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateUserConfigRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateUserConfigRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentUid", wireType)
			}
			m.CurrentUid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentUid |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NftState", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NftState = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipSocialsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateUserConfigResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSocialsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateUserConfigResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateUserConfigResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Config", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Config == nil {
				m.Config = &UserConfig{}
			}
			if err := m.Config.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSocialsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetUserConfigRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSocialsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetUserConfigRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetUserConfigRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentUid", wireType)
			}
			m.CurrentUid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentUid |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSocialsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetUserConfigResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSocialsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetUserConfigResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetUserConfigResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Config", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Config == nil {
				m.Config = &UserConfig{}
			}
			if err := m.Config.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSocialsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NftAccount) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSocialsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NftAccount: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NftAccount: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MisesUser", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MisesUser == nil {
				m.MisesUser = &UserInfo{}
			}
			if err := m.MisesUser.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProfileImgUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProfileImgUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSocialsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PaymentToken) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSocialsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PaymentToken: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PaymentToken: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Symbol", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Symbol = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EthPrice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EthPrice = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UsdPrice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UsdPrice = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Decimals", wireType)
			}
			m.Decimals = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Decimals |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSocialsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Stats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSocialsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Stats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Stats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field FloorPrice", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.FloorPrice = float32(math.Float32frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipSocialsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NftEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSocialsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NftEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NftEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EventType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromAccount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FromAccount == nil {
				m.FromAccount = &NftAccount{}
			}
			if err := m.FromAccount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToAccount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ToAccount == nil {
				m.ToAccount = &NftAccount{}
			}
			if err := m.ToAccount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedDate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreatedDate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaymentToken", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PaymentToken == nil {
				m.PaymentToken = &PaymentToken{}
			}
			if err := m.PaymentToken.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSocialsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PageNftEventRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSocialsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PageNftEventRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PageNftEventRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentUid", wireType)
			}
			m.CurrentUid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentUid |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NftAssetId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NftAssetId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Paginator", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Paginator == nil {
				m.Paginator = &PageQuick{}
			}
			if err := m.Paginator.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSocialsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PageNftEventResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSocialsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PageNftEventResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PageNftEventResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Event", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Event = append(m.Event, &NftEvent{})
			if err := m.Event[len(m.Event)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Paginator", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Paginator == nil {
				m.Paginator = &PageQuick{}
			}
			if err := m.Paginator.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSocialsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateOpenseaNftRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSocialsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateOpenseaNftRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateOpenseaNftRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipSocialsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateOpenseaNftResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSocialsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateOpenseaNftResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateOpenseaNftResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSocialsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetTwitterAuthUrlRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSocialsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetTwitterAuthUrlRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetTwitterAuthUrlRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentUid", wireType)
			}
			m.CurrentUid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentUid |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSocialsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetTwitterAuthUrlResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSocialsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetTwitterAuthUrlResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetTwitterAuthUrlResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Url = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSocialsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserTwitterAuth) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSocialsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserTwitterAuth: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserTwitterAuth: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TwitterUserId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TwitterUserId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Username", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Username = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FollowersCount", wireType)
			}
			m.FollowersCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FollowersCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TweetCount", wireType)
			}
			m.TweetCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TweetCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TwitterCreatedAt", wireType)
			}
			m.TwitterCreatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TwitterCreatedAt |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Amount = float32(math.Float32frombits(v))
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			m.CreatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatedAt |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Misesid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Misesid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSocialsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Airdrop) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSocialsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Airdrop: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Airdrop: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coin", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Coin = float32(math.Float32frombits(v))
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			m.CreatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatedAt |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FinishAt", wireType)
			}
			m.FinishAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FinishAt |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSocialsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAirdropInfoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSocialsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAirdropInfoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAirdropInfoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentUid", wireType)
			}
			m.CurrentUid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentUid |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSocialsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAirdropInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSocialsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAirdropInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAirdropInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Twitter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Twitter == nil {
				m.Twitter = &UserTwitterAuth{}
			}
			if err := m.Twitter.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Airdrop", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Airdrop == nil {
				m.Airdrop = &Airdrop{}
			}
			if err := m.Airdrop.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSocialsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TwitterCallbackRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSocialsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TwitterCallbackRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TwitterCallbackRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentUid", wireType)
			}
			m.CurrentUid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentUid |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OauthToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OauthToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OauthVerifier", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OauthVerifier = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSocialsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TwitterCallbackResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSocialsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TwitterCallbackResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TwitterCallbackResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Url = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSocialsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReceiveAirdropRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSocialsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReceiveAirdropRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReceiveAirdropRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentUid", wireType)
			}
			m.CurrentUid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentUid |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tweet", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSocialsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tweet = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSocialsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReceiveAirdropResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSocialsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReceiveAirdropResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReceiveAirdropResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSocialsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSocialsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSocialsvc(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSocialsvc
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSocialsvc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSocialsvc
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthSocialsvc
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowSocialsvc
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipSocialsvc(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthSocialsvc
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthSocialsvc = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSocialsvc   = fmt.Errorf("proto: integer overflow")
)
