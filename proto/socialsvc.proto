// In general, while you can use proto2 (the current default protocol buffers
// version), we recommend that you use proto3 with gRPC as it lets you use the
// full range of gRPC-supported languages, as well as avoiding compatibility
// issues with proto2 clients talking to proto3 servers and vice versa.
syntax = "proto3";

// The package name determines the name of the directories that truss creates
// for `package echo;` truss will create the directory "echo-service".
package socialsvc;

import "google/api/annotations.proto";

service Social {
  // SignIn verify the user auth and return a jwt
  rpc SignIn (SignInRequest) returns (SignInResponse) {
    option (google.api.http) = {
      // All fields (In) are query parameters of the http request unless otherwise specified
      get: "/signin"

      additional_bindings {
        // Trailing slashes are different routes
        get: "/signin/"
      }
    };
  }

  //Find a user info by uid
  rpc FindUser (FindUserRequest) returns (FindUserResponse) {
    option (google.api.http) = {
      // All fields (In) are query parameters of the http request unless otherwise specified
      get: "/user"

      additional_bindings {
        // Trailing slashes are different routes
        get: "/user/"
      }
    };
  }

  //update user info
  rpc UpdateUserProfile (UpdateUserProfileRequest) returns (UpdateUserResponse) {
    option (google.api.http) = {
      // All fields (In) are query parameters of the http request unless otherwise specified
      post: "/user/profile"
      body: "*"

      additional_bindings {
        // Trailing slashes are different routes
        post: "/user/profile/"
        body: "*"
      }
    };
  }

  //update user avatar
  rpc UpdateUserAvatar (UpdateUserAvatarRequest) returns (UpdateUserResponse) {
    option (google.api.http) = {
      // All fields (In) are query parameters of the http request unless otherwise specified
      post: "/user/avatar"
      body: "*"

      additional_bindings {
        // Trailing slashes are different routes
        post: "/user/avatar/"
        body: "*"
      }
    };
  }

  //update user username
  rpc UpdateUserName (UpdateUserNameRequest) returns (UpdateUserResponse) {
    option (google.api.http) = {
      // All fields (In) are query parameters of the http request unless otherwise specified
      post: "/user/username"
      body: "*"

      additional_bindings {
        // Trailing slashes are different routes
        post: "/user/username/"
        body: "*"
      }
    };
  }

  //create new status
  rpc CreateStatus (CreateStatusRequest) returns (CreateStatusResponse) {
    option (google.api.http) = {
      // All fields (In) are query parameters of the http request unless otherwise specified
      post: "/status/create"
      body: "*"

      additional_bindings {
        // Trailing slashes are different routes
        post: "/status/create/"
        body: "*"
      }
    };
  }

  // update status
  rpc UpdateStatus (UpdateStatusRequest) returns (UpdateStatusResponse) {
    option (google.api.http) = {
      // All fields (In) are query parameters of the http request unless otherwise specified
      post: "/status/update"
      body: "*"

      additional_bindings {
        // Trailing slashes are different routes
        post: "/status/update/"
        body: "*"
      }
    };
  }

  //delete a status
  rpc DeleteStatus (DeleteStatusRequest) returns (SimpleResponse) {
    option (google.api.http) = {
      // All fields (In) are query parameters of the http request unless otherwise specified
      post: "/status/delete"
      body: "*"

      additional_bindings {
        // Trailing slashes are different routes
        post: "/status/delete/"
        body: "*"
      }
    };
  }

  //like a status
  rpc LikeStatus (LikeStatusRequest) returns (SimpleResponse) {
    option (google.api.http) = {
      // All fields (In) are query parameters of the http request unless otherwise specified
      post: "/status/like"
      body: "*"

      additional_bindings {
        // Trailing slashes are different routes
        post: "/status/like/"
        body: "*"
      }
    };
  }

  //unlike a status
  rpc UnLikeStatus (UnLikeStatusRequest) returns (SimpleResponse) {
    option (google.api.http) = {
      // All fields (In) are query parameters of the http request unless otherwise specified
      post: "/status/unlike"
      body: "*"

      additional_bindings {
        // Trailing slashes are different routes
        post: "/status/unlike/"
        body: "*"
      }
    };
  }

  // list like status
  rpc ListLikeStatus (ListLikeRequest) returns (ListLikeResponse) {
    option (google.api.http) = {
      // All fields (In) are query parameters of the http request unless otherwise specified
      get: "/status/like/list"

      additional_bindings {
        // Trailing slashes are different routes
        get: "/status/like/list"
      }
    };
  }

  //query single status
  rpc GetStatus (GetStatusRequest) returns (GetStatusResponse) {
    option (google.api.http) = {
      // All fields (In) are query parameters of the http request unless otherwise specified
      get: "/status"

      additional_bindings {
        // Trailing slashes are different routes
        get: "/status/"
      }
    };
  }

  //query batch status
  rpc ListStatus (ListStatusRequest) returns (ListStatusResponse) {
    option (google.api.http) = {
      // All fields (In) are query parameters of the http request unless otherwise specified
      get: "/status/list"

      additional_bindings {
        // Trailing slashes are different routes
        get: "/status/list/"
      }
    };
  }
  //query batch status
  rpc NewListStatus (NewListStatusRequest) returns (NewListStatusResponse) {
    option (google.api.http) = {
      // All fields (In) are query parameters of the http request unless otherwise specified
      get: "/status/new_list"

      additional_bindings {
        // Trailing slashes are different routes
        get: "/status/new_list/"
      }
    };
  }

  //query recommended status
  rpc ListRecommended (ListStatusRequest) returns (ListStatusResponse) {
    option (google.api.http) = {
      // All fields (In) are query parameters of the http request unless otherwise specified
      get: "/status/recommended"

      additional_bindings {
        // Trailing slashes are different routes
        get: "/status/recommended/"
      }
    };
  }


  //query time line
  rpc ListUserTimeline (ListStatusRequest) returns (ListStatusResponse) {
    option (google.api.http) = {
      // All fields (In) are query parameters of the http request unless otherwise specified
      get: "/status/timeline"

      additional_bindings {
        // Trailing slashes are different routes
        get: "/status/timeline/"
      }
    };
  }


  //query following users order by update time
  rpc LatestFollowing (LatestFollowingRequest) returns (LatestFollowingResponse) {
    option (google.api.http) = {
      // All fields (In) are query parameters of the http request unless otherwise specified
      get: "/following/latest"

      additional_bindings {
        // Trailing slashes are different routes
        get: "/following/latest/"
      }
    };
  }


  //query related users
  rpc ListRelationship (ListRelationshipRequest) returns (ListRelationshipResponse) {
    option (google.api.http) = {
      // All fields (In) are query parameters of the http request unless otherwise specified
      get: "/relation/list"

      additional_bindings {
        // Trailing slashes are different routes
        get: "/relation/list/"
      }
    };
  }


  //like a status
  rpc Follow (FollowRequest) returns (SimpleResponse) {
    option (google.api.http) = {
      // All fields (In) are query parameters of the http request unless otherwise specified
      post: "/relation/follow"
      body: "*"

      additional_bindings {
        // Trailing slashes are different routes
        post: "/relation/follow/"
        body: "*"
      }
    };
  }

  //unlike a status
  rpc UnFollow (UnFollowRequest) returns (SimpleResponse) {
    option (google.api.http) = {
      // All fields (In) are query parameters of the http request unless otherwise specified
      post: "/relation/unfollow"
      body: "*"

      additional_bindings {
        // Trailing slashes are different routes
        post: "/relation/unfollow/"
        body: "*"
      }
    };
  }

  rpc ListMessage (ListMessageRequest) returns (ListMessageResponse) {
    option (google.api.http) = {
      // All fields (In) are query parameters of the http request unless otherwise specified
      get: "/message/list"

      additional_bindings {
        // Trailing slashes are different routes
        get: "/message/list/"
      }
    };
  }

  rpc ReadMessage (ReadMessageRequest) returns (SimpleResponse) {
    option (google.api.http) = {
      // All fields (In) are query parameters of the http request unless otherwise specified
      post: "/message/read"
      body: "*"

      additional_bindings {
        // Trailing slashes are different routes
        post: "/message/read/"
        body: "*"
      }
    };
  }

  rpc GetMessageSummary (GetMessageSummaryRequest) returns (MessageSummaryResponse) {
    option (google.api.http) = {
      // All fields (In) are query parameters of the http request unless otherwise specified
      get: "/message/summary"

      additional_bindings {
        // Trailing slashes are different routes
        get: "/message/summary/"
      }
    };
  }

  

  rpc ListComment (ListCommentRequest) returns (ListCommentResponse) {
    option (google.api.http) = {
      // All fields (In) are query parameters of the http request unless otherwise specified
      get: "/comment/list"

      additional_bindings {
        // Trailing slashes are different routes
        get: "/comment/list/"
      }
    };
  }
  rpc GetComment (GetCommentRequest) returns (GetCommentResponse) {
    option (google.api.http) = {
      // All fields (In) are query parameters of the http request unless otherwise specified
      get: "/comment"

      additional_bindings {
        // Trailing slashes are different routes
        get: "/comment/"
      }
    };
  }
  rpc NewRecommendStatus (NewRecommendStatusRequest) returns (NewRecommendStatusResponse) {
    option (google.api.http) = {
      // All fields (In) are query parameters of the http request unless otherwise specified
      get: "/status/new_recommend"

      additional_bindings {
        // Trailing slashes are different routes
        get: "/status/new_recommend/"
      }
    };
  }

  rpc CreateComment (CreateCommentRequest) returns (CreateCommentResponse) {
    option (google.api.http) = {
      // All fields (In) are query parameters of the http request unless otherwise specified
      post: "/comment/create"
      body: "*"

      additional_bindings {
        // Trailing slashes are different routes
        post: "/comment/create/"
        body: "*"
      }
    };
  }

  rpc DeleteComment (DeleteCommentRequest) returns (SimpleResponse) {
    option (google.api.http) = {
      // All fields (In) are query parameters of the http request unless otherwise specified
      post: "/comment/delete"
      body: "*"

      additional_bindings {
        // Trailing slashes are different routes
        post: "/comment/delete/"
        body: "*"
      }
    };
  }


  //like a comment
  rpc LikeComment (LikeCommentRequest) returns (SimpleResponse) {
    option (google.api.http) = {
      // All fields (In) are query parameters of the http request unless otherwise specified
      post: "/comment/like"
      body: "*"

      additional_bindings {
        // Trailing slashes are different routes
        post: "/comment/like/"
        body: "*"
      }
    };
  }

  //unlike a status
  rpc UnlikeComment (UnlikeCommentRequest) returns (SimpleResponse) {
    option (google.api.http) = {
      // All fields (In) are query parameters of the http request unless otherwise specified
      post: "/comment/unlike"
      body: "*"

      additional_bindings {
        // Trailing slashes are different routes
        post: "/comment/unlike/"
        body: "*"
      }
    };
  }

  rpc ListBlacklist (ListBlacklistRequest) returns (ListBlacklistResponse) {
    option (google.api.http) = {
      // All fields (In) are query parameters of the http request unless otherwise specified
      get: "/user/blacklist/list"

      additional_bindings {
        // Trailing slashes are different routes
        get: "/user/blacklist/list"
      }
    };
  }

  rpc CreateBlacklist (CreateBlacklistRequest) returns (SimpleResponse) {
    option (google.api.http) = {
      // All fields (In) are query parameters of the http request unless otherwise specified
      post: "/user/blacklist/create"
      body: "*"

      additional_bindings {
        // Trailing slashes are different routes
        post: "/user/blacklist/create/"
        body: "*"
      }
    };
  }

  rpc DeleteBlacklist (DeleteBlacklistRequest) returns (SimpleResponse) {
    option (google.api.http) = {
      // All fields (In) are query parameters of the http request unless otherwise specified
      post: "/user/blacklist/delete"
      body: "*"

      additional_bindings {
        // Trailing slashes are different routes
        post: "/user/blacklist/delete/"
        body: "*"
      }
    };
  }
  rpc ShareTweetUrl (ShareTweetUrlRequest) returns (ShareTweetUrlResponse) {
    option (google.api.http) = {
      // All fields (In) are query parameters of the http request unless otherwise specified
      get: "/share/twitter"

      additional_bindings {
        // Trailing slashes are different routes
        get: "/share/twitter/"
      }
    };
  }
  rpc UserTwitterAuth (UserTwitterAuthRequest) returns (UserTwitterAuthResponse) {
    option (google.api.http) = {
      // All fields (In) are query parameters of the http request unless otherwise specified
      get: "/user/twitter/auth"

      additional_bindings {
        // Trailing slashes are different routes
        get: "/user/twitter/auth/"
      }
    };
  }
  rpc UserTwitterAirdrop (UserTwitterAirdropRequest) returns (UserTwitterAirdropResponse) {
    option (google.api.http) = {
      // All fields (In) are query parameters of the http request unless otherwise specified
      get: "/user/twitter/airdrop"

      additional_bindings {
        // Trailing slashes are different routes
        get: "/user/twitter/airdrop/"
      }
    };
  }
}

message SignInRequest {
  string auth = 1;
}

message SignInResponse {
  uint64 code = 1;
  string jwt = 2;
  bool is_created = 3;
}

message UserAvatar {
  string small = 1;
	string		medium = 2;
  string	large = 3;
}

message UserInfo {
  uint64 uid = 1;
  string username = 2;
  string misesid = 3;
  string gender = 4;
  string mobile = 5;
  string email = 6;
  string address = 7;
  string avatar = 8;
  bool is_followed = 9;
  bool is_blocked = 10;
  uint32 followings_count = 11;
  uint32 fans_count = 12;
  uint32 liked_count = 13;
  uint32 new_fans_count = 14;
  UserAvatar avatar_url = 15;
  bool is_airdropped = 16;
}

message FindUserRequest {
  uint64 uid = 1;
  uint64 current_uid = 2;
}

message FindUserResponse {
  uint64 code = 1;
  UserInfo user = 2;
  bool is_followed = 3;
}


message UpdateUserProfileRequest {
  uint64 uid = 1;
  string gender = 2;
  string mobile = 3;
  string email = 4;
  string address = 5;
}

message UpdateUserAvatarRequest {
  uint64 uid = 1;
  string attachment_path = 2;
}

message UpdateUserNameRequest {
  uint64 uid = 1;
  string username = 2;
}

message UpdateUserResponse {
  uint64 code = 1;
  UserInfo user = 2;
}

message LinkMetaInfo {
  string title = 1;
  string host = 2;
  string link = 3;
  string image_path = 4;
  string image_url = 5;
}

message ImageMetaInfo {
  repeated string images  = 1;
  repeated string thumb_images  = 2;
}

message StatusInfo {
  string id = 1;
  UserInfo user = 2;
  string content = 3;
  string from_type = 4;
  string status_type = 5;
  StatusInfo parent = 6;
  StatusInfo origin = 7;
  uint64 comment_count = 8;
  uint64 like_count = 9;
  uint64 forward_count = 10;
  bool is_liked = 11;
  LinkMetaInfo link_meta = 12;
  uint64 created_at = 13;
  ImageMetaInfo image_meta = 14;
  bool is_public = 15;
  uint64 hide_time = 16;
  bool parent_status_is_deleted = 17;
  bool parent_status_is_blacked = 18;
}

message GetStatusRequest {
  uint64 current_uid = 1;
  string statusid = 2;
}

message GetStatusResponse {
  uint64 code = 1;
  StatusInfo status = 2;
}


message PageQuick {
  uint64 limit = 1;
  string next_id = 2;
  uint64 total = 3;
}

message ListStatusRequest {
  uint64 current_uid = 1;
  uint64 target_uid = 2;
  string parent_id = 3;
  repeated string from_types = 4;
  PageQuick paginator = 5;
}

message ListStatusResponse {
  uint64 code = 1;
  repeated StatusInfo statuses = 2;
  PageQuick paginator = 3;
}
message NewListStatusRequest {
  uint64 current_uid = 1;
  uint64 target_uid = 2;
  repeated string ids = 3;
  uint64 list_num = 4;
  repeated string from_types = 5;
}

message NewListStatusResponse {
  uint64 code = 1;
  repeated StatusInfo statuses = 2;
 
}

message NewRecommendNext {
  uint64 limit = 1;
  int64 last_recommend_time = 2;
  int64 last_common_time = 3;
}

message NewRecommendStatusRequest {
  uint64 current_uid = 1;
  int64 last_recommend_time = 2;
  int64 last_common_time = 3;
}

message NewRecommendStatusResponse {
  uint64 code = 1;
  repeated StatusInfo statuses = 2;
  NewRecommendNext next = 3;
  uint64 num = 4;
}

message CreateStatusRequest {
  uint64 current_uid = 1;
	string status_type = 2;
	string parent_id = 3;
	string content = 4;
	string meta = 5;
	string from_type = 6;
  repeated string images = 7;
  bool is_private = 8;
	uint64 show_duration = 9; // 开放时长 秒
}

message UpdateStatusRequest {
  uint64 current_uid = 1;
	string status_id = 2;
  bool is_private = 3;
	uint64 show_duration = 4; // 开放时长 秒
}

message CreateStatusResponse {
  uint64 code = 1;
  StatusInfo status = 2;
}

message UpdateStatusResponse {
  uint64 code = 1;
  StatusInfo status = 2;
}

message DeleteStatusRequest {
  uint64 current_uid = 1;
  string statusid = 2;
}

message SimpleResponse {
  uint64 code = 1;
}


message LikeStatusRequest {
  uint64 current_uid = 1;
  string statusid = 2;
}

message UnLikeStatusRequest {
  uint64 current_uid = 1;
  string statusid = 2;
}

message FollowRequest {
  uint64 current_uid = 1;
  uint64 target_uid = 2;
}

message UnFollowRequest {
  uint64 current_uid = 1;
  uint64 target_uid = 2;
}

message RelationInfo {
  UserInfo user = 1;
	string relation_type = 2;
	uint64 created_at = 3;
}

message ListRelationshipRequest {
  uint64 current_uid = 1;
  uint64 uid = 2;
  string relation_type = 3;
  PageQuick paginator = 4;
}

message ListRelationshipResponse {
  uint64 code = 1;
  repeated RelationInfo relations = 2;
  PageQuick paginator = 3;
}

message Comment {
  string id = 1;
  uint64 uid = 2;
  string status_id = 3;
  string parent_id = 4;
  string group_id = 5;
  uint64 opponent_id = 6;
  string content = 7;
  repeated Comment comments = 8;
  UserInfo user = 9;
  UserInfo opponent = 10;
  uint64 comment_count = 11;
  uint64 like_count = 12;
	uint64 created_at = 13;
  bool is_liked = 14;
}

message GetCommentRequest {
  uint64 current_uid = 1;
  string comment_id = 2;
}

message GetCommentResponse {
  uint64 code = 1;
  Comment comment = 2;
}

message ListCommentRequest {
  uint64 current_uid = 1;
  string status_id = 2;
  string topic_id = 3;
  PageQuick paginator = 4;
}

message ListCommentResponse {
  uint64 code = 1;
  repeated Comment comments = 2;
  PageQuick paginator = 3;
}

message CreateCommentRequest {
  uint64 current_uid = 1;
  string status_id = 2;
  string parent_id = 3;
  string content = 4;
}

message DeleteCommentRequest {
  uint64 current_uid = 1;
  string id = 2;
}

message CreateCommentResponse {
  uint64 code = 1;
  Comment comment = 2;
}

message NewCommentMeta {
  uint64 uid = 1;
  string group_id=2;
  string comment_id=3;
  string content=4;
  string parent_content=5;
  string parent_user_name=6;
  string status_content_summary=7;
  string status_image_url=8;
}

message NewLikeCommentMeta {
  uint64 uid = 1;
  string comment_id=2;
  string comment_username=3;
  string comment_content=4;
}

message NewLikeStatusMeta {
  uint64 uid = 1;
  string status_id=2;
  string status_content=3;
  string status_image_url=4;
}

message NewFansMeta {
  uint64 uid = 1;
  string fan_username = 2;
}

message NewForwardMeta {
  uint64 uid = 1;
  string status_id=2;
  string forward_content=3;
  string content_summary=4;
  string image_url=5;
}

message Message {
  string id = 1;
  uint64 uid = 2;
  string message_type = 3;
	string state = 4;
  UserInfo from_user = 5;
	uint64 created_at = 6;
  StatusInfo status = 7;
  bool status_is_deleted = 8;
  bool comment_is_deleted = 9;
  NewCommentMeta new_comment_meta = 21;
  NewLikeStatusMeta new_like_status_meta = 22;
  NewFansMeta new_fans_meta = 23;
  NewForwardMeta new_forward_meta = 24;
  NewLikeCommentMeta new_like_comment_meta = 25;
}

message ListMessageRequest {
  uint64 current_uid = 1;
  PageQuick paginator = 3;
}

message ListMessageResponse {
  uint64 code = 1;
  repeated Message messages = 2;
  PageQuick paginator = 3;
}

message ReadMessageRequest {
  uint64 current_uid = 1;
  string latestID = 2;
  repeated string ids = 3;
}

message GetMessageSummaryRequest {
  uint64 current_uid = 1;
}

message MessageSummaryResponse {
  uint64 code = 1;
  MessageSummary summary = 2;
}

message MessageSummary {
  Message latest_message = 1;
  uint32 total = 2;
  uint32 notifications_count = 3;
  uint32 users_count = 4;
}

message LatestFollowingRequest {
  uint64 current_uid = 1;
}

message Following {
  UserInfo user = 1;
  bool unread = 2;
}

message LatestFollowingResponse {
  uint64 code = 1;
  repeated Following followings = 2;
}

message Blacklist {
  UserInfo user = 1;
	uint64 created_at = 2;
}

message ListBlacklistRequest {
  uint64 uid = 1;
  PageQuick paginator = 2;
}

message ListBlacklistResponse {
  uint64 code = 1;
  repeated Blacklist blacklists = 2;
  PageQuick paginator = 3;
}

message CreateBlacklistRequest {
  uint64 uid = 1;
  uint64 target_uid = 2;
}

message DeleteBlacklistRequest {
  uint64 uid = 1;
  uint64 target_uid = 2;
}

message ListLikeRequest {
  uint64 uid = 1;
  uint64 current_uid = 2;
  PageQuick paginator = 3;
}

message StatusLike {
  StatusInfo status = 1;
  uint64 created_at = 13;
}

message ListLikeResponse {
  uint64 code = 1;
  repeated StatusLike statuses = 2;
  PageQuick paginator = 3;
}

message LikeCommentRequest {
  uint64 current_uid = 1;
  string comment_id = 2;
}

message UnlikeCommentRequest {
  uint64 current_uid = 1;
  string comment_id = 2;
}
message ShareTweetUrlRequest {
  uint64 current_uid = 1;
}
message ShareTweetUrlResponse {
  uint64 code = 1;
  string url = 2;
}
message UserTwitterAuthRequest {
  
}
message UserTwitterAuthResponse {
  
}
message UserTwitterAirdropRequest {
  string misesid = 1;
}
message UserTwitterAirdropResponse {
  
}